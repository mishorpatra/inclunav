[{"C:\\Users\\Assistech\\mishor\\inclunav\\src\\index.js":"1","C:\\Users\\Assistech\\mishor\\inclunav\\src\\App.js":"2","C:\\Users\\Assistech\\mishor\\inclunav\\src\\serviceWorkerRegistration.js":"3","C:\\Users\\Assistech\\mishor\\inclunav\\src\\reportWebVitals.js":"4","C:\\Users\\Assistech\\mishor\\inclunav\\src\\store\\reducers\\index.js":"5","C:\\Users\\Assistech\\mishor\\inclunav\\src\\routes.js":"6","C:\\Users\\Assistech\\mishor\\inclunav\\src\\store\\reducers\\userRegister.js":"7","C:\\Users\\Assistech\\mishor\\inclunav\\src\\store\\reducers\\userLogin.js":"8","C:\\Users\\Assistech\\mishor\\inclunav\\src\\store\\reducers\\userDetails.js":"9","C:\\Users\\Assistech\\mishor\\inclunav\\src\\store\\reducers\\forgotPassword.js":"10","C:\\Users\\Assistech\\mishor\\inclunav\\src\\store\\reducers\\resetPassword.js":"11","C:\\Users\\Assistech\\mishor\\inclunav\\src\\store\\reducers\\sendOtp.js":"12","C:\\Users\\Assistech\\mishor\\inclunav\\src\\store\\reducers\\buildingList.js":"13","C:\\Users\\Assistech\\mishor\\inclunav\\src\\store\\reducers\\navigationInfo.js":"14","C:\\Users\\Assistech\\mishor\\inclunav\\src\\store\\reducers\\gpsLocation.js":"15","C:\\Users\\Assistech\\mishor\\inclunav\\src\\store\\reducers\\verifyOtp.js":"16","C:\\Users\\Assistech\\mishor\\inclunav\\src\\store\\reducers\\verifyEmailotp.js":"17","C:\\Users\\Assistech\\mishor\\inclunav\\src\\store\\reducers\\sendEmailotp.js":"18","C:\\Users\\Assistech\\mishor\\inclunav\\src\\store\\reducers\\floorList.js":"19","C:\\Users\\Assistech\\mishor\\inclunav\\src\\store\\reducers\\venueList.js":"20","C:\\Users\\Assistech\\mishor\\inclunav\\src\\store\\reducers\\userInformation.js":"21","C:\\Users\\Assistech\\mishor\\inclunav\\src\\store\\reducers\\userPortfolio.js":"22","C:\\Users\\Assistech\\mishor\\inclunav\\src\\store\\reducers\\updateName.js":"23","C:\\Users\\Assistech\\mishor\\inclunav\\src\\store\\reducers\\updateMobile.js":"24","C:\\Users\\Assistech\\mishor\\inclunav\\src\\store\\reducers\\updatePassword.js":"25","C:\\Users\\Assistech\\mishor\\inclunav\\src\\store\\reducers\\updateEmail.js":"26","C:\\Users\\Assistech\\mishor\\inclunav\\src\\store\\reducers\\androidNavigation.js":"27","C:\\Users\\Assistech\\mishor\\inclunav\\src\\store\\reducers\\saveAddress.js":"28","C:\\Users\\Assistech\\mishor\\inclunav\\src\\store\\reducers\\osmRoutes.js":"29","C:\\Users\\Assistech\\mishor\\inclunav\\src\\store\\reducers\\globalNavigation.js":"30","C:\\Users\\Assistech\\mishor\\inclunav\\src\\store\\reducers\\refPoint.js":"31","C:\\Users\\Assistech\\mishor\\inclunav\\src\\store\\reducers\\navContent.js":"32","C:\\Users\\Assistech\\mishor\\inclunav\\src\\store\\reducers\\portfolio\\updateAgegroup.js":"33","C:\\Users\\Assistech\\mishor\\inclunav\\src\\store\\reducers\\portfolio\\updateHeight.js":"34","C:\\Users\\Assistech\\mishor\\inclunav\\src\\store\\reducers\\portfolio\\updateVision.js":"35","C:\\Users\\Assistech\\mishor\\inclunav\\src\\store\\reducers\\portfolio\\updateLanguage.js":"36","C:\\Users\\Assistech\\mishor\\inclunav\\src\\store\\reducers\\portfolio\\updateWalking.js":"37","C:\\Users\\Assistech\\mishor\\inclunav\\src\\components\\landing\\LanguageSelect.js":"38","C:\\Users\\Assistech\\mishor\\inclunav\\src\\components\\landing\\Landing.js":"39","C:\\Users\\Assistech\\mishor\\inclunav\\src\\components\\authentication\\Registration.js":"40","C:\\Users\\Assistech\\mishor\\inclunav\\src\\components\\authentication\\UserRegistration.js":"41","C:\\Users\\Assistech\\mishor\\inclunav\\src\\components\\authentication\\ResetPassword.js":"42","C:\\Users\\Assistech\\mishor\\inclunav\\src\\components\\authentication\\ForgotPass.js":"43","C:\\Users\\Assistech\\mishor\\inclunav\\src\\components\\feedback\\CheckMessage.js":"44","C:\\Users\\Assistech\\mishor\\inclunav\\src\\components\\feedback\\AllowAccess.js":"45","C:\\Users\\Assistech\\mishor\\inclunav\\src\\components\\authentication\\UserLogin.js":"46","C:\\Users\\Assistech\\mishor\\inclunav\\src\\components\\feedback\\ContactSupport.js":"47","C:\\Users\\Assistech\\mishor\\inclunav\\src\\components\\dashboard\\Dashboard.js":"48","C:\\Users\\Assistech\\mishor\\inclunav\\src\\components\\dashboard\\global\\GlobalView.js":"49","C:\\Users\\Assistech\\mishor\\inclunav\\src\\components\\dashboard\\navigation\\Konva.js":"50","C:\\Users\\Assistech\\mishor\\inclunav\\src\\components\\dashboard\\navigation\\Navigation.js":"51","C:\\Users\\Assistech\\mishor\\inclunav\\src\\components\\dashboard\\Landing.js":"52","C:\\Users\\Assistech\\mishor\\inclunav\\src\\components\\dashboard\\navigation\\GlobalDetails.js":"53","C:\\Users\\Assistech\\mishor\\inclunav\\src\\components\\dashboard\\navigation\\SourceMenu.js":"54","C:\\Users\\Assistech\\mishor\\inclunav\\src\\components\\dashboard\\navigation\\DestinationMenu.js":"55","C:\\Users\\Assistech\\mishor\\inclunav\\src\\components\\dashboard\\navigation\\InstructionTab.js":"56","C:\\Users\\Assistech\\mishor\\inclunav\\src\\components\\dashboard\\navigation\\NavigationDetails.js":"57","C:\\Users\\Assistech\\mishor\\inclunav\\src\\components\\dashboard\\navigation\\Instructions.js":"58","C:\\Users\\Assistech\\mishor\\inclunav\\src\\config.js":"59","C:\\Users\\Assistech\\mishor\\inclunav\\src\\components\\dashboard\\global\\Instructions.js":"60","C:\\Users\\Assistech\\mishor\\inclunav\\src\\components\\dashboard\\global\\module.js":"61","C:\\Users\\Assistech\\mishor\\inclunav\\src\\components\\dashboard\\global\\BottomBar.js":"62","C:\\Users\\Assistech\\mishor\\inclunav\\src\\components\\dashboard\\ProfileSettings.js":"63","C:\\Users\\Assistech\\mishor\\inclunav\\src\\components\\dashboard\\navigation\\InclusiveNavigation.js":"64","C:\\Users\\Assistech\\mishor\\inclunav\\src\\components\\dashboard\\NavigationSettings.js":"65","C:\\Users\\Assistech\\mishor\\inclunav\\src\\components\\dashboard\\Settings.js":"66","C:\\Users\\Assistech\\mishor\\inclunav\\src\\store\\actions\\index.js":"67","C:\\Users\\Assistech\\mishor\\inclunav\\src\\components\\dashboard\\navigation\\Menu.js":"68","C:\\Users\\Assistech\\mishor\\inclunav\\src\\components\\dashboard\\navigation\\SelectSource.js":"69","C:\\Users\\Assistech\\mishor\\inclunav\\src\\components\\dashboard\\navigation\\SelectDestination.js":"70"},{"size":1096,"mtime":1655204426681,"results":"71","hashOfConfig":"72"},{"size":368,"mtime":1655204426655,"results":"73","hashOfConfig":"72"},{"size":5201,"mtime":1655204426682,"results":"74","hashOfConfig":"72"},{"size":377,"mtime":1655204426681,"results":"75","hashOfConfig":"72"},{"size":2266,"mtime":1655204426686,"results":"76","hashOfConfig":"72"},{"size":2296,"mtime":1655204426682,"results":"77","hashOfConfig":"72"},{"size":185,"mtime":1655204426693,"results":"78","hashOfConfig":"72"},{"size":182,"mtime":1655204426693,"results":"79","hashOfConfig":"72"},{"size":184,"mtime":1655204426692,"results":"80","hashOfConfig":"72"},{"size":187,"mtime":1655204426685,"results":"81","hashOfConfig":"72"},{"size":186,"mtime":1655204426690,"results":"82","hashOfConfig":"72"},{"size":180,"mtime":1655204426690,"results":"83","hashOfConfig":"72"},{"size":185,"mtime":1655204426684,"results":"84","hashOfConfig":"72"},{"size":187,"mtime":1655204426687,"results":"85","hashOfConfig":"72"},{"size":181,"mtime":1655204426686,"results":"86","hashOfConfig":"72"},{"size":180,"mtime":1655204426694,"results":"87","hashOfConfig":"72"},{"size":185,"mtime":1655204426694,"results":"88","hashOfConfig":"72"},{"size":185,"mtime":1655204426690,"results":"89","hashOfConfig":"72"},{"size":179,"mtime":1655204426685,"results":"90","hashOfConfig":"72"},{"size":182,"mtime":1655204426694,"results":"91","hashOfConfig":"72"},{"size":188,"mtime":1655204426692,"results":"92","hashOfConfig":"72"},{"size":186,"mtime":1655204426693,"results":"93","hashOfConfig":"72"},{"size":183,"mtime":1655204426692,"results":"94","hashOfConfig":"72"},{"size":185,"mtime":1655204426691,"results":"95","hashOfConfig":"72"},{"size":187,"mtime":1655204426692,"results":"96","hashOfConfig":"72"},{"size":184,"mtime":1655204426691,"results":"97","hashOfConfig":"72"},{"size":190,"mtime":1655204426684,"results":"98","hashOfConfig":"72"},{"size":184,"mtime":1655204426690,"results":"99","hashOfConfig":"72"},{"size":182,"mtime":1655204426687,"results":"100","hashOfConfig":"72"},{"size":189,"mtime":1655204426685,"results":"101","hashOfConfig":"72"},{"size":179,"mtime":1655204426689,"results":"102","hashOfConfig":"72"},{"size":183,"mtime":1655204426686,"results":"103","hashOfConfig":"72"},{"size":187,"mtime":1655204426688,"results":"104","hashOfConfig":"72"},{"size":185,"mtime":1655204426688,"results":"105","hashOfConfig":"72"},{"size":185,"mtime":1655204426689,"results":"106","hashOfConfig":"72"},{"size":187,"mtime":1655204426688,"results":"107","hashOfConfig":"72"},{"size":186,"mtime":1655204426689,"results":"108","hashOfConfig":"72"},{"size":1570,"mtime":1655204426679,"results":"109","hashOfConfig":"72"},{"size":1161,"mtime":1655204426679,"results":"110","hashOfConfig":"72"},{"size":1079,"mtime":1655204426659,"results":"111","hashOfConfig":"72"},{"size":19985,"mtime":1655369643421,"results":"112","hashOfConfig":"72"},{"size":8843,"mtime":1655370757698,"results":"113","hashOfConfig":"72"},{"size":4977,"mtime":1655373290121,"results":"114","hashOfConfig":"72"},{"size":1593,"mtime":1655374275778,"results":"115","hashOfConfig":"72"},{"size":1084,"mtime":1655204426678,"results":"116","hashOfConfig":"72"},{"size":8182,"mtime":1655204426660,"results":"117","hashOfConfig":"72"},{"size":4700,"mtime":1655361383781,"results":"118","hashOfConfig":"72"},{"size":4588,"mtime":1655204426661,"results":"119","hashOfConfig":"72"},{"size":109857,"mtime":1655204426666,"results":"120","hashOfConfig":"72"},{"size":124597,"mtime":1655270694366,"results":"121","hashOfConfig":"72"},{"size":141917,"mtime":1655204426675,"results":"122","hashOfConfig":"72"},{"size":10016,"mtime":1655374602745,"results":"123","hashOfConfig":"72"},{"size":11315,"mtime":1655204426670,"results":"124","hashOfConfig":"72"},{"size":23916,"mtime":1655204426676,"results":"125","hashOfConfig":"72"},{"size":20175,"mtime":1655204426669,"results":"126","hashOfConfig":"72"},{"size":10062,"mtime":1655204426672,"results":"127","hashOfConfig":"72"},{"size":8135,"mtime":1655204426675,"results":"128","hashOfConfig":"72"},{"size":10534,"mtime":1655204426672,"results":"129","hashOfConfig":"72"},{"size":3808,"mtime":1655204426680,"results":"130","hashOfConfig":"72"},{"size":10776,"mtime":1655204426667,"results":"131","hashOfConfig":"72"},{"size":28311,"mtime":1655204426668,"results":"132","hashOfConfig":"72"},{"size":11557,"mtime":1655204426665,"results":"133","hashOfConfig":"72"},{"size":34822,"mtime":1655375648663,"results":"134","hashOfConfig":"72"},{"size":123433,"mtime":1655378139462,"results":"135","hashOfConfig":"72"},{"size":16985,"mtime":1655376971911,"results":"136","hashOfConfig":"72"},{"size":2370,"mtime":1655374855466,"results":"137","hashOfConfig":"72"},{"size":11043,"mtime":1655204426683,"results":"138","hashOfConfig":"72"},{"size":15976,"mtime":1655204426674,"results":"139","hashOfConfig":"72"},{"size":32682,"mtime":1655204426676,"results":"140","hashOfConfig":"72"},{"size":28621,"mtime":1655204426676,"results":"141","hashOfConfig":"72"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},"qvvb7t",{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"144"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"144"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"144"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"144"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"144"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"144"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"144"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"144"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"144"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"144"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"144"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"144"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"144"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"144"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"144"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"144"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"144"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"144"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"144"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"144"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"144"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"144"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"144"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"144"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"144"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"144"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"144"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"144"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"144"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"144"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"144"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"144"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"144"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"144"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"144"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"259","messages":"260","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"261","messages":"262","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"263","messages":"264","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"265","messages":"266","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"267","usedDeprecatedRules":"144"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":101,"fixableErrorCount":0,"fixableWarningCount":0,"source":"276","usedDeprecatedRules":"144"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":104,"fixableErrorCount":0,"fixableWarningCount":0,"source":"279","usedDeprecatedRules":"144"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":103,"fixableErrorCount":0,"fixableWarningCount":0,"source":"282","usedDeprecatedRules":"144"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"289","usedDeprecatedRules":"144"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"294","usedDeprecatedRules":"144"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"297","usedDeprecatedRules":"144"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"304","usedDeprecatedRules":"144"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":43,"fixableErrorCount":0,"fixableWarningCount":0,"source":"307","usedDeprecatedRules":"144"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"310","usedDeprecatedRules":"144"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":30,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"313","messages":"314","errorCount":0,"warningCount":94,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"315","messages":"316","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"317","messages":"318","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"319","messages":"320","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"321","usedDeprecatedRules":"144"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},"C:\\Users\\Assistech\\mishor\\inclunav\\src\\index.js",[],["328","329"],"C:\\Users\\Assistech\\mishor\\inclunav\\src\\App.js",[],"C:\\Users\\Assistech\\mishor\\inclunav\\src\\serviceWorkerRegistration.js",[],"C:\\Users\\Assistech\\mishor\\inclunav\\src\\reportWebVitals.js",[],"C:\\Users\\Assistech\\mishor\\inclunav\\src\\store\\reducers\\index.js",[],"C:\\Users\\Assistech\\mishor\\inclunav\\src\\routes.js",["330"],"import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport Landing from  './components/landing/Landing';\r\nimport LanguageSelect from './components/landing/LanguageSelect';\r\nimport Registration from './components/authentication/Registration';\r\nimport AllowAccess from './components/feedback/AllowAccess';\r\nimport ResetPassword from './components/authentication/ResetPassword';\r\nimport ForgotPass from './components/authentication/ForgotPass';\r\nimport CheckMessage from './components/feedback/CheckMessage';\r\nimport ContactSupport from './components/feedback/ContactSupport';\r\nimport Dashboard from './components/dashboard/Dashboard';\r\nimport UserRegistration from './components/authentication/UserRegistration';\r\nimport UserLogin from './components/authentication/UserLogin';\r\nimport ColoredRect from './components/dashboard/navigation/Konva';\r\nimport GlobalView from './components/dashboard/global/GlobalView';\r\n\r\nconst BaseRouter = ()=>{\r\n    return(\r\n    <div>   \r\n            <Route exact path=\"/\" component={Landing}/>\r\n            <Route exact path=\"/language-select\" component={LanguageSelect}/>\r\n            <Route exact path=\"/login\" component={UserLogin}/>\r\n            <Route exact path=\"/contact\" component={ContactSupport}/>\r\n            <Route exact path=\"/register\" component={UserRegistration}/>\r\n            <Route exact path=\"/success\" component={Registration}/>\r\n            <Route exact path=\"/access\" component={AllowAccess}/>\r\n            <Route exact path=\"/reset-password\" component={ResetPassword}/>\r\n            <Route exact path=\"/forgot-password\" component={ForgotPass}/>\r\n            <Route exact path=\"/check-message\" component={CheckMessage}/>\r\n            <Route exact path=\"/dashboard\" component={Dashboard}/>\r\n            <Route exact path=\"/navigate\" component={Dashboard}/>\r\n            <Route exact path=\"/settings\" component={Dashboard}/>\r\n            <Route exact path=\"/profile-settings\" component={Dashboard}/>\r\n            <Route exact path=\"/navigation-settings\" component={Dashboard}/>\r\n            <Route exact path=\"/konva\" component={ColoredRect}/>\r\n            <Route exact path=\"/inclusive\" component={Dashboard}/>\r\n            <Route exact path=\"/global-view\" component={Dashboard}/>\r\n    </div>)\r\n}\r\n\r\nexport default BaseRouter","C:\\Users\\Assistech\\mishor\\inclunav\\src\\store\\reducers\\userRegister.js",["331"],"export default (state=null,action)=>{\r\n    switch(action.type){\r\n        case 'USER_REGISTER':\r\n            return action.payload\r\n        default: \r\n            return state;\r\n    }\r\n}","C:\\Users\\Assistech\\mishor\\inclunav\\src\\store\\reducers\\userLogin.js",["332"],"export default (state=null,action)=>{\r\n    switch(action.type){\r\n        case 'USER_LOGIN':\r\n            return action.payload\r\n        default: \r\n            return state;\r\n    }\r\n}","C:\\Users\\Assistech\\mishor\\inclunav\\src\\store\\reducers\\userDetails.js",["333"],"export default (state=null,action)=>{\r\n    switch(action.type){\r\n        case 'USER_DETAILS':\r\n            return action.payload\r\n        default: \r\n            return state;\r\n    }\r\n}","C:\\Users\\Assistech\\mishor\\inclunav\\src\\store\\reducers\\forgotPassword.js",["334"],"export default (state=null,action)=>{\r\n    switch(action.type){\r\n        case 'FORGOT_PASSWORD':\r\n            return action.payload\r\n        default: \r\n            return state;\r\n    }\r\n}","C:\\Users\\Assistech\\mishor\\inclunav\\src\\store\\reducers\\resetPassword.js",["335"],"export default (state=null,action)=>{\r\n    switch(action.type){\r\n        case 'RESET_PASSWORD':\r\n            return action.payload\r\n        default: \r\n            return state;\r\n    }\r\n}","C:\\Users\\Assistech\\mishor\\inclunav\\src\\store\\reducers\\sendOtp.js",["336"],"export default (state=null,action)=>{\r\n    switch(action.type){\r\n        case 'SEND_OTP':\r\n            return action.payload\r\n        default: \r\n            return state;\r\n    }\r\n}","C:\\Users\\Assistech\\mishor\\inclunav\\src\\store\\reducers\\buildingList.js",["337"],"export default (state=null,action)=>{\r\n    switch(action.type){\r\n        case 'BUILDING_LIST':\r\n            return action.payload\r\n        default: \r\n            return state;\r\n    }\r\n}","C:\\Users\\Assistech\\mishor\\inclunav\\src\\store\\reducers\\navigationInfo.js",["338"],"export default (state=[],action)=>{\r\n    switch(action.type){\r\n        case 'NAVIGATION_INFO':\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","C:\\Users\\Assistech\\mishor\\inclunav\\src\\store\\reducers\\gpsLocation.js",["339"],"export default(state=[],action)=>{\r\n    switch(action.type){\r\n        case 'GPS_LOCATION':\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n}","C:\\Users\\Assistech\\mishor\\inclunav\\src\\store\\reducers\\verifyOtp.js",["340"],"export default (state=[],action)=>{\r\n    switch(action.type){\r\n        case 'VERIFY_OTP':\r\n            return action.payload\r\n        default: \r\n            return state;\r\n    }\r\n}","C:\\Users\\Assistech\\mishor\\inclunav\\src\\store\\reducers\\verifyEmailotp.js",["341"],"export default (state=[],action)=>{\r\n    switch(action.type){\r\n        case 'VERIFY_EMAILOTP':\r\n            return action.payload\r\n        default: \r\n            return state;\r\n    }\r\n}","C:\\Users\\Assistech\\mishor\\inclunav\\src\\store\\reducers\\sendEmailotp.js",["342"],"C:\\Users\\Assistech\\mishor\\inclunav\\src\\store\\reducers\\floorList.js",["343"],"export default(state=[],action)=>{\r\n    switch(action.type){\r\n        case 'FLOOR_LIST':\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n}","C:\\Users\\Assistech\\mishor\\inclunav\\src\\store\\reducers\\venueList.js",["344"],"export default (state=null,action)=>{\r\n    switch(action.type){\r\n        case 'VENUE_LIST':\r\n            return action.payload\r\n        default: \r\n            return state;\r\n    }\r\n}","C:\\Users\\Assistech\\mishor\\inclunav\\src\\store\\reducers\\userInformation.js",["345"],"export default (state=null,action)=>{\r\n    switch(action.type){\r\n        case 'USER_INFORMATION':\r\n            return action.payload\r\n        default: \r\n            return state;\r\n    }\r\n}","C:\\Users\\Assistech\\mishor\\inclunav\\src\\store\\reducers\\userPortfolio.js",["346"],"export default (state=null,action)=>{\r\n    switch(action.type){\r\n        case 'USER_PORTFOLIO':\r\n            return action.payload\r\n        default: \r\n            return state;\r\n    }\r\n}","C:\\Users\\Assistech\\mishor\\inclunav\\src\\store\\reducers\\updateName.js",["347"],"export default (state=null,action)=>{\r\n    switch(action.type){\r\n        case 'UPDATE_NAME':\r\n            return action.payload\r\n        default: \r\n            return state;\r\n    }\r\n}","C:\\Users\\Assistech\\mishor\\inclunav\\src\\store\\reducers\\updateMobile.js",["348"],"export default (state=null,action)=>{\r\n    switch(action.type){\r\n        case 'UPDATE_MOBILE':\r\n            return action.payload\r\n        default: \r\n            return state;\r\n    }\r\n}","C:\\Users\\Assistech\\mishor\\inclunav\\src\\store\\reducers\\updatePassword.js",["349"],"export default (state=null,action)=>{\r\n    switch(action.type){\r\n        case 'UPDATE_PASSWORD':\r\n            return action.payload\r\n        default: \r\n            return state;\r\n    }\r\n}","C:\\Users\\Assistech\\mishor\\inclunav\\src\\store\\reducers\\updateEmail.js",["350"],"export default (state=null,action)=>{\r\n    switch(action.type){\r\n        case 'UPDATE_EMAIL':\r\n            return action.payload\r\n        default: \r\n            return state;\r\n    }\r\n}","C:\\Users\\Assistech\\mishor\\inclunav\\src\\store\\reducers\\androidNavigation.js",["351"],"export default (state=null,action)=>{\r\n    switch(action.type){\r\n        case 'ANDROID_NAVIGATION':\r\n            return action.payload\r\n        default: \r\n            return state;\r\n    }\r\n}","C:\\Users\\Assistech\\mishor\\inclunav\\src\\store\\reducers\\saveAddress.js",["352"],"export default (state=null,action)=>{\r\n    switch(action.type){\r\n        case 'SAVE_ADDRESS':\r\n            return action.payload\r\n        default: \r\n            return state;\r\n    }\r\n}","C:\\Users\\Assistech\\mishor\\inclunav\\src\\store\\reducers\\osmRoutes.js",["353"],"export default (state=null,action)=>{\r\n    switch(action.type){\r\n        case 'OSM_ROUTES':\r\n            return action.payload\r\n        default: \r\n            return state;\r\n    }\r\n}","C:\\Users\\Assistech\\mishor\\inclunav\\src\\store\\reducers\\globalNavigation.js",["354"],"export default (state=null,action)=>{\r\n    switch(action.type){\r\n        case 'GLOBAL_NAVIGATION':\r\n            return action.payload\r\n        default: \r\n            return state;\r\n    }\r\n}","C:\\Users\\Assistech\\mishor\\inclunav\\src\\store\\reducers\\refPoint.js",["355"],"export default (state=[],action)=>{\r\n    switch(action.type){\r\n        case 'REF_POINT':\r\n            return  action.payload;\r\n        default:\r\n            return state\r\n    }\r\n}","C:\\Users\\Assistech\\mishor\\inclunav\\src\\store\\reducers\\navContent.js",["356"],"export default (state=null,action)=>{\r\n    switch(action.type){\r\n        case 'NAV_CONTENT':\r\n            return action.payload\r\n        default: \r\n            return state;\r\n    }\r\n}","C:\\Users\\Assistech\\mishor\\inclunav\\src\\store\\reducers\\portfolio\\updateAgegroup.js",["357"],"export default (state=null,action)=>{\r\n    switch(action.type){\r\n        case 'UPDATE_AGEGROUP':\r\n            return action.payload\r\n        default: \r\n            return state;\r\n    }\r\n}","C:\\Users\\Assistech\\mishor\\inclunav\\src\\store\\reducers\\portfolio\\updateHeight.js",["358"],"export default (state=null,action)=>{\r\n    switch(action.type){\r\n        case 'UPDATE_HEIGHT':\r\n            return action.payload\r\n        default: \r\n            return state;\r\n    }\r\n}","C:\\Users\\Assistech\\mishor\\inclunav\\src\\store\\reducers\\portfolio\\updateVision.js",["359"],"export default (state=null,action)=>{\r\n    switch(action.type){\r\n        case 'UPDATE_VISION':\r\n            return action.payload\r\n        default: \r\n            return state;\r\n    }\r\n}","C:\\Users\\Assistech\\mishor\\inclunav\\src\\store\\reducers\\portfolio\\updateLanguage.js",["360"],"export default (state=null,action)=>{\r\n    switch(action.type){\r\n        case 'UPDATE_LANGUAGE':\r\n            return action.payload\r\n        default: \r\n            return state;\r\n    }\r\n}","C:\\Users\\Assistech\\mishor\\inclunav\\src\\store\\reducers\\portfolio\\updateWalking.js",["361"],"export default (state=null,action)=>{\r\n    switch(action.type){\r\n        case 'UPDATE_WALKING':\r\n            return action.payload\r\n        default: \r\n            return state;\r\n    }\r\n}","C:\\Users\\Assistech\\mishor\\inclunav\\src\\components\\landing\\LanguageSelect.js",["362"],"import React, { useState } from 'react';\r\nimport '../styles.css';\r\n\r\nexport default function LanguageSelect(props) {\r\n\r\n  return (\r\n    <div className=\"landing-height\">\r\n      <div className=\"bg-landing container-fluid d-flex justify-content-center align-items-center h-100\">\r\n        <div className=\"text-white row\" >\r\n          <div className=\"col-lg-12\">\r\n            <div className=\"text-center\" id=\"language-content\">\r\n              <div className=\"sr-only\"> Welcome to Inclunav Routes, your personal indoor navigation system </div>\r\n               <h3 className=\"text-normal mx-auto mb-2\"> <span aria-hidden=\"true\" > Choose Your language </span>  <span className=\"sr-only\">Choose your Preferred Language </span> </h3>\r\n              <h3 className=\"text-normal mx-auto mb-2\" aria-hidden=\"true\" > अपनी भाषा चुिनए </h3>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-lg-12\">\r\n            <div className=\"text-center\" id=\"language-button\">\r\n              <button className=\"btn btn-language w-80 btn-default btn-lg font-weight-bold h2 mx-auto\" onClick={()=>{props.history.push('/login')}} ><span aria-hidden=\"true\">English</span>   <span class=\"sr-only\">English</span></button>\r\n              <button className=\"btn btn-language w-80 btn-default btn-lg font-weight-bold mt-4 h2 mx-auto\" onClick={()=>{props.history.push('/login')}} ><span aria-hidden=\"true\">हिन्दी</span>   <span class=\"sr-only\">Hindi</span></button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Assistech\\mishor\\inclunav\\src\\components\\landing\\Landing.js",["363"],"import React, { useState } from 'react';\r\nimport '../styles.css';\r\n\r\nexport default function Landing(props) {\r\n\r\n  return (\r\n    <div className=\"landing-height\">\r\n      <div className=\"bg-landing  container-fluid d-flex justify-content-center align-items-center h-100\">\r\n        <div className=\"text-white row \" >\r\n          <div className=\"col-lg-12 \">\r\n            <div className=\"text-center\" id=\"content\">\r\n              <img src=\"/inclunav/assets/images/vertical_logo.svg\" alt=\"Welcome to Inclunav. It will assist you in Indoor Navigation and Wayfinding\" className=\"img-fluid w-75 h-75\"  />\r\n              <h2 className=\"text-header font-weight-bold mt-1 mb-4\" aria-hidden=\"true\"></h2>\r\n              <h3 className=\"text-normal mx-auto mb-5\" aria-hidden=\"true\">Assisted Indoor Navigation</h3>\r\n              <button className=\"btn btn-landing mx-auto btn-block btn-default btn-lg font-weight-bold mt-4 h2\" onClick={()=>{props.history.push('/language-select')}} > <span aria-hidden=\"true\"> START </span> <span class=\"sr-only\">Double tap to continue</span> </button> \r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Assistech\\mishor\\inclunav\\src\\components\\authentication\\Registration.js",["364"],"import React, { useState } from 'react';\r\nimport '../styles.css';\r\n\r\nexport default function Registration(props) {\r\n\r\n  return (\r\n    <div className=\"landing-height\">\r\n    <nav className=\"navbar navbar-expand-lg nav-bg text-white\">\r\n        <div className=\"mx-auto\"> REGISTRATION </div>\r\n    </nav>\r\n    <div className=\"bg-landing  container-fluid d-flex justify-content-center align-items-center h-100\">\r\n        <div className=\"text-white row w-100\" >\r\n        <div className=\"col-lg-12 \">\r\n            <div className=\"text-center\" id=\"content\">\r\n              <h3 className=\"registration-success mx-auto mb-5\" aria-hidden=\"true\">Sign-Up successfull!</h3>\r\n              {/* onClick={()=>{props.history.push('/access')}} */}\r\n              <button className=\"btn btn-landing mx-auto btn-block btn-default btn-lg font-weight-bold mt-4 h2\" onClick={()=>{props.history.push('/dashboard')}} >Proceed to Dashboard <img src=\"/inclunav/assets/images/vector.png\" alt=\"move next page\" /></button> \r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","C:\\Users\\Assistech\\mishor\\inclunav\\src\\components\\authentication\\UserRegistration.js",["365","366","367","368","369","370","371","372","373","374","375"],"C:\\Users\\Assistech\\mishor\\inclunav\\src\\components\\authentication\\ResetPassword.js",["376"],"C:\\Users\\Assistech\\mishor\\inclunav\\src\\components\\authentication\\ForgotPass.js",["377","378"],"C:\\Users\\Assistech\\mishor\\inclunav\\src\\components\\feedback\\CheckMessage.js",["379"],"C:\\Users\\Assistech\\mishor\\inclunav\\src\\components\\feedback\\AllowAccess.js",["380"],"import React, { useState } from 'react';\r\nimport '../styles.css';\r\n\r\nexport default function AllowAccess(props) {\r\n\r\n  return (\r\n    <div className=\"landing-height\">\r\n    <nav className=\"navbar navbar-expand-lg nav-bg text-white\">\r\n        <div className=\"mx-auto\"> REGISTRATION </div>\r\n    </nav>\r\n    <div className=\"bg-landing  container-fluid d-flex justify-content-center align-items-center h-100\">\r\n        <div className=\"text-white row w-100\" >\r\n        <div className=\"col-lg-12 \">\r\n            <div className=\"text-center\" id=\"content\">\r\n              <h3 className=\"access-content mx-auto mb-5\" aria-hidden=\"true\">This application uses GPS and Bluetooth for navigation and geolocation purposes. Please enable Bluetooth and GPS services to continue using this application.</h3>\r\n              <button className=\"btn btn-landing mx-auto btn-block btn-default btn-lg font-weight-bold mt-4 h2\" onClick={()=>{props.history.push('/language-select')}} > Enable Bluetooth and GPS </button> \r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Assistech\\mishor\\inclunav\\src\\components\\authentication\\UserLogin.js",[],"C:\\Users\\Assistech\\mishor\\inclunav\\src\\components\\feedback\\ContactSupport.js",["381","382","383","384","385"],"C:\\Users\\Assistech\\mishor\\inclunav\\src\\components\\dashboard\\Dashboard.js",[],"C:\\Users\\Assistech\\mishor\\inclunav\\src\\components\\dashboard\\global\\GlobalView.js",["386","387","388","389","390","391","392","393","394","395","396","397","398","399","400","401","402","403","404","405","406","407","408","409","410","411","412","413","414","415","416","417","418","419","420","421","422","423","424","425","426","427","428","429","430","431","432","433","434","435","436","437","438","439","440","441","442","443","444","445","446","447","448","449","450","451","452","453","454","455","456","457","458","459","460","461","462","463","464","465","466","467","468","469","470","471","472","473","474","475","476","477","478","479","480","481","482","483","484","485","486"],"import React from \"react\";\r\nimport Modal from \"react-modal\";\r\nimport { Link } from \"react-router-dom\";\r\nimport config from \"../../../config\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  floorList,\r\n  imgDetails,\r\n  getAllBuildingElements,\r\n  venueList,\r\n  buildingList,\r\n  getGpsLocation,\r\n  globalNavigation,\r\n  getUserPortfolio,\r\n  osmRoutes,\r\n  pickupPoints,\r\n  navContent,\r\n  refPoint\r\n} from \"../../../store/actions/index\";\r\nimport BottomBar from \"./BottomBar\";\r\nimport Instructions from \"./Instructions\";\r\nimport {\r\n  getHaversineDistance,\r\n  distance,\r\n  obtaincoordinates,\r\n  findInstructions,\r\n  simplifyPath\r\n} from \"./module\";\r\nimport {\r\n  Map as MapContainer,\r\n  Marker,\r\n  Popup,\r\n  TileLayer,\r\n  GeoJSON\r\n} from \"react-leaflet\";\r\nimport { Typeahead } from \"react-bootstrap-typeahead\";\r\nimport \"react-bootstrap-typeahead/css/Typeahead.css\";\r\nimport L from \"leaflet\";\r\nimport hash from \"object-hash\";\r\nimport \"../../navStyles.css\";\r\n\r\nconst customStyles = {\r\n  content: {\r\n    top: \"50%\",\r\n    left: \"50%\",\r\n    right: \"auto\",\r\n    bottom: \"auto\",\r\n    marginRight: \"-50%\",\r\n    transform: \"translate(-50%, -50%)\",\r\n    background: \"#27282D\",\r\n    width: \"75%\"\r\n  },\r\n  overlay: { zIndex: 9999 }\r\n};\r\n\r\n/**\r\n * @id  N1.1.1\r\n * @author Anirudh Khammampati & Sai Kumar Reddy\r\n * @description Create graph node\r\n */\r\n\r\nvar special = ['base2','base1','ground','first', 'second', 'third', 'fourth', 'fifth', 'sixth', 'seventh', 'eighth', 'ninth', 'tenth', 'eleventh', 'twelvth', 'thirteenth', 'fourteenth', 'fifteenth', 'sixteenth', 'seventeenth', 'eighteenth', 'nineteenth'];\r\n\r\n// import {Graph} from \"./Graph\";\r\nclass Graph { \r\n  // defining vertex array and \r\n  // adjacent list \r\n  constructor(noOfVertices) \r\n  { \r\n      this.noOfVertices = noOfVertices; \r\n      this.AdjList = new Map(); \r\n      this.Adjweights = new Map();\r\n  } \r\n\r\n  // functions to be implemented \r\n\r\n  // addVertex(v) \r\n  addVertex(v) \r\n  { \r\n      // initialize the adjacent list with a \r\n      // null array \r\n      this.AdjList.set(v, []); \r\n      this.Adjweights.set(v,[]);\r\n  } \r\n  hasvertex(v){\r\n    return this.AdjList.has(v);\r\n  }\r\n  edges(v){\r\n    return this.AdjList.get(v);\r\n  }\r\n  addEdge(v, w, wt,undir) \r\n  { \r\n      if(undir){\r\n\r\n        // get the list for vertex v and put the \r\n        // vertex w denoting edge between v and w \r\n        this.AdjList.get(v).push(w); \r\n        this.Adjweights.get(v).push(wt);\r\n        // Since graph is undirected, \r\n        // add an edge from w to v also \r\n        this.AdjList.get(w).push(v); \r\n        this.Adjweights.get(w).push(wt);\r\n      }\r\n      else{\r\n        this.AdjList.get(v).push(w); \r\n        this.Adjweights.get(v).push(wt);\r\n      }\r\n  }\r\n\r\n  // Prints the vertex and adjacency list \r\n  printGraph() \r\n  { \r\n      // get all the vertices \r\n      var get_keys = this.AdjList.keys(); \r\n\r\n    \r\n      // iterate over the vertices \r\n      for (var i of get_keys)  \r\n  { \r\n          // great the corresponding adjacency list \r\n          // for the vertex \r\n          var get_values = this.AdjList.get(i);\r\n\r\n          var val = this.Adjweights.get(i); \r\n          var conc = \"\"; \r\n          var conc2 = \"\"; \r\n    \r\n          // iterate over the adjacency list \r\n          // concatenate the values into a string \r\n          for (var j of get_values) \r\n              conc += j + \" \"; \r\n          for (var j of val) \r\n            conc2 += j + \" \";\r\n          // print the vertex and its adjacency list \r\n      } \r\n  }\r\n} \r\n/**\r\n * @id  N1.1.2\r\n * @author Pankaj Singh\r\n * @description Global center of osm\r\n */\r\nconst center = { lat: 28.6139, lng: 77.209 };\r\n/**\r\n * @id  N1.1.3\r\n * @author Pankaj Singh\r\n * @description OSM Marker List\r\n */\r\nlet female_toileticon = L.divIcon({\r\n  className: \"custom-div-icon\",\r\n  html:\r\n    \"<div style='background-color:#4b85bb;' class='marker-pin'></div><i class='fa fa-female awesome'>\",\r\n  iconSize: [30, 42],\r\n  iconAnchor: [15, 42],\r\n  popupAnchor: [0, -30]\r\n});\r\n\r\nlet male_toileticon = L.divIcon({\r\n  className: \"custom-div-icon\",\r\n  html:\r\n    \"<div style='background-color:#4b85bb;' class='marker-pin'></div><i class='fa fa-male awesome'>\",\r\n  iconSize: [30, 42],\r\n  iconAnchor: [15, 42],\r\n  popupAnchor: [0, -30]\r\n});\r\n\r\nlet lifticon = L.divIcon({\r\n  className: \"custom-div-icon\",\r\n  html:\r\n    \"<div style='background-color:#4b85bb;' class='marker-pin'></div><i class='fa fa-street-view awesome'>\",\r\n  iconSize: [30, 42],\r\n  iconAnchor: [15, 42],\r\n  popupAnchor: [0, -30]\r\n});\r\nlet watericon = L.divIcon({\r\n  className: \"custom-div-icon\",\r\n  html:\r\n    \"<div style='background-color:#4b85bb;' class='marker-pin'></div><i class='fa fa-glass awesome'>\",\r\n  iconSize: [30, 42],\r\n  iconAnchor: [15, 42],\r\n  popupAnchor: [0, -30]\r\n});\r\nlet stairicon = L.divIcon({\r\n  className: \"custom-div-icon\",\r\n  html:\r\n    \"<div style='background-color:#4b85bb;' class='marker-pin'></div><i class='fa fa-align-left awesome'>\",\r\n  iconSize: [30, 42],\r\n  iconAnchor: [15, 42],\r\n  popupAnchor: [0, -30]\r\n});\r\n\r\nlet source = L.divIcon({\r\n  className: \"custom-div-icon\",\r\n  html:\r\n    \"<div style='background-color:#4b85bb;' class='marker-pin'></div><i class='fas fa-crosshairs awesome'>\",\r\n  iconSize: [30, 42],\r\n  iconAnchor: [15, 42],\r\n  popupAnchor: [0, -30]\r\n});\r\n\r\nlet destination = L.divIcon({\r\n  className: \"custom-div-icon\",\r\n  html:\r\n    \"<div style='background-color:#4b85bb;' class='marker-pin'></div><i class='fa fa-map-pin awesome'>\",\r\n  iconSize: [30, 42],\r\n  iconAnchor: [15, 42],\r\n  popupAnchor: [0, -30]\r\n});\r\n\r\nlet doticon = L.divIcon({\r\n  className: \"custom-div-icon\",\r\n  html: \"<div  class='marker-pin1'></div>\",\r\n  iconSize: [30, 42],\r\n  iconAnchor: [15, 42],\r\n  popupAnchor: [0, -30]\r\n});\r\n\r\nvar myStyle = {\r\n  //Style to display the non-walkable linestrings\r\n  color: \"#000000\",\r\n  weight: 3,\r\n  opacity: 0.7\r\n};\r\n/**\r\n * @id  N1.1.34\r\n * @author Pankaj Singh\r\n * @description Marker\r\n */\r\nvar myStyle_background = {\r\n  //Style to display the background tile\r\n  fillColor: \"#d9d0c9\",\r\n  fillOpacity: 1,\r\n  color: \"#d9d0c9\",\r\n  weight: 2,\r\n  opacity: 0.1,\r\n  border: \"none\",\r\n  width: \"200px\",\r\n  height: \"200px\"\r\n};\r\n\r\nclass GlobalView extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      venueList: [],\r\n      open : true,\r\n      buildingList: [],\r\n      flrList: [],\r\n      selectedVenue: \"Select Venue\",\r\n      selectedBuilding: \"\",\r\n      geoJSON: [],\r\n      pathgeoJSON: [],\r\n      geoJSONPoly: [],\r\n      showpath: false,\r\n      landmark: [],\r\n      landMarks:[],\r\n      polygons:[],\r\n      selectNavigation: false,\r\n      srcFlrInstructions:[],\r\n      dstFlrInstructions:[],\r\n      backgroundPoly: {\r\n        // background layer for SIT building\r\n        type: \"FeatureCollection\",\r\n        features: [\r\n          {\r\n            type: \"Feature\",\r\n            properties: {},\r\n            geometry: {\r\n              type: \"Polygon\",\r\n              coordinates: [\r\n                [\r\n                  [77.19015095013468, 28.545269361046977],\r\n                  [77.19040173667757, 28.54534708573104],\r\n                  [77.19028371948092, 28.54564396115854],\r\n                  [77.19003561514704, 28.545566236693578],\r\n                  [77.19015095013468, 28.545269361046977]\r\n                ]\r\n              ]\r\n            }\r\n          }\r\n        ]\r\n      },\r\n      floor: \"\",\r\n      srcName: \"Source\",\r\n      srcData: [],\r\n      dstName: \"Destination\",\r\n      dstData: [],\r\n      showServices: false,\r\n      venueMarker: center,\r\n      floorSelect: false,\r\n      showMarker: false,\r\n      showInstructions: false,\r\n      instructions: [],\r\n      venueNavigation: [],\r\n      globalRefPointsList:[],\r\n      buildingCluster:[],\r\n      buildingPolyCluster:[],\r\n      srcFloorSp:[],\r\n      dstFloorSp:[],\r\n      srcFloorPoly:[],\r\n      dstFloorPoly:[],\r\n      srcFloorLandMark:[],\r\n      dstFloorLandMark:[],\r\n      floorList:[],\r\n      navigationStrt:false,\r\n      samefloor:true,\r\n      currentFloor:\"\",\r\n      zoom: 18\r\n    };\r\n    this.shortestPathVar = [];\r\n    // minpath var \r\n    this.grids_all=[];\r\n    this.grids=[];\r\n    this.visited=[];\r\n    this.shortestpath =[];\r\n    this.minimumcost=[];\r\n    this.leaves=[];\r\n    this.graph = null;\r\n    this.flrconn = [];\r\n    this.num_floors=0;\r\n    this.pt = 0;\r\n    \r\n    this.landMarks = [];\r\n    this.polygons = [];\r\n    this.distLandmark = [];\r\n    this.venueLandmark = [];\r\n    this.buildingPoly = [];\r\n    this.srcFloorSp = [];\r\n    this.dstFloorSp = [];\r\n    this.srcFloorPoly = [];\r\n    this.dstFloorPoly = [];\r\n    this.srcFloorLandmark = [];\r\n    this.dstFloorLandmark = [];\r\n    this.srcFlrInstructions = [];\r\n    this.dstFlrInstructions = [];\r\n  }\r\n\r\n\r\n  mod() {\r\n\r\n\r\n    return (\r\n      <div>\r\n        <Modal\r\n          isOpen={this.state.open}\r\n          // onAfterOpen = {afterOpenModal}\r\n          onRequestClose={this.onCloseModal}\r\n          style={customStyles}\r\n          contentLabel=\"Example Modal\"\r\n          // open = {this.state.open} onClose={this.onCloseModal}\r\n        >\r\n          <div className=\"row\">\r\n            <div className=\"col-12 text-center mt-4\">\r\n              <img\r\n                width=\"25\"\r\n                height=\"25\"\r\n                src=\"assets/images/saved_address.svg\"\r\n                alt=\"vew details\"\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"col-12 text-white text-center\">\r\n            </div>\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"col-12 text-white text-center font-weight-bold\">\r\n              <p className=\"h4\"> Please choose the Required Path </p>\r\n            </div>\r\n          </div>\r\n\r\n          {this.state.showOption ? (\r\n            <div\r\n              className=\"d-flex-column justify-content-center bg-white rounded\"\r\n              style={{ padding: \"1px\" }}\r\n            >\r\n              <div\r\n                className=\"save-address-box row text-white mt-1 mb-2 ml-1 row\"\r\n                onClick={() => {\r\n\r\n                }}\r\n              >\r\n                <div className=\"col-2 my-auto\">\r\n                </div>\r\n                <div className=\"col-10 my-auto\">Shortest Path</div>\r\n              </div>\r\n              <div\r\n                className=\"save-address-box row text-white mt-1 mb-2 ml-1 row\"\r\n                onClick={() => {\r\n                  this.setState({\r\n                    type: \"Home\"\r\n                  });\r\n                }}\r\n              >\r\n                <div className=\"col-2 my-auto\">\r\n                </div>\r\n                <div className=\"col-10 my-auto\">Simplest Path</div>\r\n              </div>\r\n              <div\r\n                className=\"save-address-box row text-white mb-2 ml-1\"\r\n                onClick={() => {\r\n                  this.setState({\r\n                    type: \"Home\"\r\n                  });\r\n                }}\r\n              >\r\n                <div className=\"col-2 my-auto\">\r\n\r\n                </div>\r\n                <div className=\"col-10 my-auto\">Safest Path</div>\r\n              </div>\r\n              \r\n              <div\r\n                className=\"save-address-box row text-white mb-2 ml-1\"\r\n                onClick={() => {\r\n                  this.setState({\r\n                    showOption: false\r\n                  });\r\n                }}\r\n              >\r\n                <div className=\"col-2 my-auto\">\r\n                </div>\r\n                <div className=\"col-10 my-auto\">Accesible Path</div>\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control w-100\"\r\n              placeholder=\"Enter Custom Name\"\r\n              value={this.state.type}\r\n              onChange={e => {\r\n                this.setState({\r\n                  type: e.target.value\r\n                });\r\n              }}\r\n            />\r\n          )}\r\n\r\n          <div className=\"row w-100 m-0 pb-5 mt-2\">\r\n            <div className=\"col-6\">\r\n            </div>\r\n            <div className=\"col-6\">\r\n              <button\r\n                className={\r\n                  \"btn btn-language-dark btn-cancel-text mx-auto btn-block btn-default font-weight-bold h2\"\r\n                }\r\n                onClick={() => {\r\n                  this.onCloseModal();\r\n                }}\r\n                style={{\r\n                  width: \"84px\",\r\n                  height: \"48px\",\r\n                  float: \"right\"\r\n                }}\r\n              >\r\n                CANCEL\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </Modal>\r\n        </div>)\r\n    }\r\n  /**\r\n   * @id  N1.1.2\r\n   * @author Pankaj Singh\r\n   * @description Initial rendering of component\r\n   */\r\n  componentDidMount() {\r\n    this.getVenueList();\r\n    if (window.navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(success => {\r\n        this.setState({\r\n          center: {\r\n            lat: success.coords.latitude,\r\n            lng: success.coords.longitude\r\n          },\r\n          currentPos: {\r\n            lat: success.coords.latitude,\r\n            lng: success.coords.longitude\r\n          }\r\n        });\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * @id  N1.1.3\r\n   * @author Pankaj Singh\r\n   * @description Get venue list\r\n   */\r\n  getVenueList = (coordinates = null) => {\r\n    this.props.venueList(() => {\r\n      this.setState({\r\n        venueList: this.props.vnList.data\r\n      });\r\n    });\r\n  };\r\n  /**\r\n   * @id  N1.1.4\r\n   * @author Pankaj Singh\r\n   * @param venueName\r\n   * @description Select venue\r\n   */\r\n  selectedVenue = (venueName, coordinates = null) => {\r\n    this.setState(\r\n      {\r\n        selectedVenue: venueName,\r\n        venueMarker: { lat: coordinates[0], lng: coordinates[1] }\r\n      },\r\n      () => {\r\n        this.getBuildingList(venueName);\r\n      }\r\n    );\r\n  };\r\n  /**\r\n   * @id  N1.1.5\r\n   * @param venueName\r\n   * @author Pankaj Singh\r\n   * @description get building list\r\n   */\r\n  getBuildingList = (venueName, coordinates = null) => {\r\n    this.props.buildingList({ venueName: venueName }, () => {\r\n      this.setState(\r\n        {\r\n          buildingList: this.props.bldList.data,\r\n          selectNavigation:true\r\n        },\r\n        () => {\r\n          let lat = this.state.buildingList[0].lat;\r\n          let lng = this.state.buildingList[0].lng;\r\n          const map = this.leafletMap.leafletElement;\r\n          let bldList = this.state.buildingList;\r\n          var globalRef = [];\r\n          this.globalList(bldList,venueName,globalRef);\r\n          map.flyTo(new L.LatLng(lat, lng), map.getZoom(), {\r\n            animate: true,\r\n            duration: 1\r\n          });\r\n        }\r\n      );\r\n    });\r\n  };\r\n\r\n    /**\r\n   * @id  N1.1.10\r\n   * @author Pankaj Singh\r\n   * @param bldList\r\n   * @param venueName\r\n   * @description get all landmark within venue\r\n   */\r\n  globalList = (bldList, venueName,globalRef) => {\r\n    bldList.forEach((element, i) => {\r\n      this.mapReferencePoint(element,element.buildingName,globalRef)\r\n    });\r\n  };\r\n\r\n      /**\r\n   * @id  N1.1.6\r\n   * @author Ushaswini Chintha\r\n   * @param floor\r\n   * @description Get global reference point of ground floor of a building\r\n   */\r\n  mapReferencePoint = (element,buildingName,globalRef)=>{\r\n    let { selectedVenue, dstData } = this.state;\r\n    this.props.refPoint(\r\n      selectedVenue,\r\n      buildingName,\r\n      \"ground\",\r\n      () => {\r\n        globalRef.push({buildingName:buildingName,refPoints:this.props.globalCoords.coordinates})\r\n        this.setState(\r\n          {\r\n            glbCoords: this.props.globalCoords.coordinates\r\n          },\r\n          () => {\r\n            if(globalRef.length === this.state.buildingList.length){\r\n              this.setState({\r\n                globalRefPointsList:globalRef\r\n              },()=>{\r\n                let refPoints = this.state.globalRefPointsList;\r\n                refPoints.forEach(r=>{\r\n                  this.createBackgroudLayer(element,r.refPoints,r)\r\n                })\r\n              })\r\n            }\r\n          }\r\n        );\r\n      }\r\n    );\r\n  }\r\n  /**\r\n   * @id  N1.1.7\r\n   * @author Ushaswini Chintha\r\n   * @description Create Backround layer of building\r\n   */\r\n  createBackgroudLayer = (element,refPoints,r)=>{\r\n    let arr = refPoints.map(r => {\r\n      return [\r\n        parseFloat(r.globalRef.lng),\r\n        parseFloat(r.globalRef.lat)\r\n      ];\r\n    });\r\n    var poly = {\r\n      // background layer for SIT building\r\n      type: \"FeatureCollection\",\r\n      features: [\r\n        {\r\n          type: \"Feature\",\r\n          properties: {},\r\n          geometry: {\r\n            type: \"Polygon\",\r\n            coordinates: [\r\n              arr\r\n            ]\r\n          }\r\n        }\r\n      ]\r\n    };\r\n    const map = this.leafletMap.leafletElement;\r\n    L.geoJson(poly, { style: myStyle_background }).addTo(map);\r\n    this.setState({\r\n      backgroundPoly: poly\r\n    },()=>{\r\n      let lists = this.state.globalRefPointsList;\r\n      // lists.forEach(r=>{\r\n        this.props.globalNavigation(\r\n          { venueName: this.state.selectedVenue, buildingName: r.buildingName },\r\n          () => {\r\n            let arr = [];\r\n            let arr1 = [];\r\n            this.saveAllLadmark(arr,arr1,element,this.state.buildingList,r.refPoints,r)\r\n          }\r\n        );\r\n      // })\r\n    });\r\n  }\r\n/**\r\n   * @id  N1.1.11\r\n   * @param arr\r\n   * @param element\r\n   * @param bldList\r\n   * @author Pankaj Singh\r\n   * @description get all landmakr withing venue\r\n  */\r\n  saveAllLadmark = (arr,arr1,element,bldList,globalCoords,r)=>{\r\n    let data = this.props.androidNav;\r\n    let building = r.buildingName;\r\n    this.props.floorList(\r\n      { venueName: this.state.selectedVenue, buildingName: building },\r\n      () => {\r\n        let flrList = this.props.flrList.data;\r\n        let length = flrList.length;\r\n        let sliced = data.slice(data.length - length)\r\n        data.splice(\r\n          data.length - length,\r\n          length\r\n        );\r\n        this.buildingPoly.push({building:building,data:sliced})\r\n        this.venueLandmark.push({building:building,data:data})\r\n        data.forEach((element)=> {\r\n          element.buildingName = building;\r\n        });\r\n        let grdData = []\r\n         data.forEach(r=>{\r\n          if(r.floor === \"ground\"){\r\n            grdData.push(r)\r\n          } \r\n        })\r\n        let grdDataPoly = []\r\n        for(let k=0;k<sliced.length;k++){\r\n            if(sliced[k].floor === \"ground\"){\r\n              grdDataPoly.push(sliced[k])\r\n            } \r\n        }\r\n        this.handleLocalGlobal(grdData,grdDataPoly,building,globalCoords)\r\n        arr.push(data);\r\n        this.distLandmark.push(data)\r\n        if (this.distLandmark.length === bldList.length) {\r\n          var oldArray = this.distLandmark;\r\n          let buildingCluster = oldArray.map(r=>{\r\n            return {buildingName:r[0].buildingName,data:r}\r\n          })\r\n           var newArray = Array.prototype.concat.apply([], oldArray);\r\n           this.setState({\r\n            venueData:arr1,\r\n            venueNavigation: newArray,\r\n            buildingCluster:buildingCluster,\r\n            buildingPolyCluster:this.buildingPoly\r\n            // landMarks:landMarks,\r\n            // polygons:polygons\r\n            // redData: red_data,\r\n            // polyData: poly_data\r\n          });\r\n        }\r\n      }\r\n    );\r\n  }\r\n /**\r\n   * @id  N1.1.14\r\n   * @author Ushaswini Chintha\r\n   * @description convert local floor element and non walkables coordinates to global coordinates\r\n   */\r\n  handleLocalGlobal = (redData,polyData,buildingName,globalCoords,floor =null) => {\r\n    let crd = globalCoords;\r\n    var coords = []; // \"breadth\":\"154\",\"length\":\"173\" , conversion: *3.28084\r\n    this.coordHashMap(crd,coords)\r\n    // let { redData, polyData } = this.state;\r\n    let red_data = redData;\r\n    let poly_data = polyData;\r\n    //finding the point with lowest latitude and highest longitude\r\n    var least_lat = 0;\r\n    var high_lon = 0;\r\n    //finding the point with lowest latitude and highest longitude\r\n    least_lat = this.findLeastLat(coords,least_lat)\r\n    //evaluating high_lon\r\n    var c1 = least_lat === 3 ? 0 : least_lat + 1;\r\n    var c2 = least_lat === 0 ? 3 : least_lat - 1;\r\n    var high_lon = coords[c1].lon > coords[c2].lon ? c1 : c2;\r\n    ///lengths between given 4 global co-ordinates\r\n    var lengths = [];\r\n    this.betweenLength(coords,lengths)  \r\n    // building angle with equator or true horizontal\r\n   var out =  this.buildingAngle(coords,least_lat,high_lon)\r\n    // Vertical alignment or lift correction\r\n    var diff = []; //array to store offset of each floor\r\n    this.liftCorrection(red_data,diff)\r\n    // loop to calculate all the coordinates of local points\r\n    var local_coords = { localx: 0, localy: 0 };\r\n    this.coordGlblLandmark(red_data,diff,local_coords,coords,least_lat,high_lon,out)\r\n    //converting to geoJSON format\r\n    let geoJSON = {\r\n      type: \"FeatureCollection\",\r\n      features: []\r\n    };\r\n    this.geoJsonLandmark(red_data,geoJSON) \r\n    ///// nonWalkableGrids Calculations\r\n    var local_coords = { localx: 0, localy: 0 };\r\n    this.coordGlblPolygon(poly_data,local_coords,diff,coords,least_lat,high_lon,out)\r\n    //converting to geoJSON format\r\n    let geoJSON_poly = {\r\n      type: \"FeatureCollection\",\r\n      features: []\r\n    };\r\n    this.geoJSONPoly(poly_data,geoJSON_poly) \r\n    this.landMarks.push({buildingName:buildingName,geoJSON:geoJSON})\r\n    this.polygons.push({buildingName:buildingName,geoJSONPoly: geoJSON_poly})\r\n    if(this.state.dstName !== \"Destination\" && (this.state.dstData.floor === this.state.srcData.floor)){\r\n      this.setState({\r\n        landMarks:this.landMarks,\r\n        polygons:this.polygons,\r\n        showMarker:true,\r\n        geoJSON:this.landMarks\r\n      },()=>{\r\n        this.singleFloorNav(globalCoords)\r\n      })\r\n    }else if(this.state.dstName !== \"Destination\" && (this.state.dstData.floor !== this.state.srcData.floor)){\r\n      if(floor === this.state.srcData.floor){\r\n        this.srcFloorPoly = geoJSON_poly\r\n        this.srcFloorLandmark = geoJSON\r\n      }else{\r\n        this.dstFloorPoly = geoJSON_poly\r\n        this.dstFloorLandmark = geoJSON\r\n      }\r\n    }\r\n    if(!this.state.navigationStrt && this.landMarks.length === this.state.buildingList.length){\r\n      this.setState({\r\n        landMarks:this.landMarks,\r\n        polygons:this.polygons\r\n      })\r\n    }\r\n    // this.setState({\r\n    //   // geoJSON: geoJSON,\r\n    //   // geoJSONPoly: geoJSON_poly,\r\n    \r\n    //   currentPos: {\r\n    //     lat: geoJSON.features[0].properties.latitude,\r\n    //     lng: geoJSON.features[0].properties.longitude\r\n    //   }\r\n    // },()=>{\r\n    //   // this.singleFloorNav()\r\n    //   // this.callGlobal(shortestpath)\r\n    // });\r\n  };\r\n  /**\r\n   * @id  N1.1.6\r\n   * @param option\r\n   * @author Pankaj Singh\r\n   * @description option from venue details\r\n   */\r\n  sourceLabel = option => {\r\n    let resp = \"\";\r\n    if (option.element.type === \"Rooms\") {\r\n      resp = `${option.name}(${option.floor},${option.buildingName})`;\r\n    } else if (option.element.type === \"FloorConnection\") {\r\n      resp = `${option.properties.name}(${option.floor},${option.buildingName})`;\r\n    } else if (option.element.type === \"Services\") {\r\n      if (option.element.subType === \"beacons\") {\r\n        resp = ``;\r\n      } else {\r\n        resp = `${option.element.subType}(${option.floor},${option.buildingName})`;\r\n      }\r\n    } else {\r\n      resp = \"\";\r\n    }\r\n    return resp;\r\n  };\r\n  /**\r\n   * @id  N1.1.7\r\n   * @param option\r\n   * @author Pankaj Singh\r\n   * @description UI for menu of typeahead\r\n   */\r\n  renderSourceMenu = option => {\r\n    let resp = \"\";\r\n      if (option.element.type === \"Rooms\") {\r\n        resp = `${option.name}(${option.floor},${option.buildingName})`;\r\n      } else if (option.element.type === \"FloorConnection\") {\r\n        resp = `${option.properties.name}(${option.floor},${option.buildingName})`;\r\n      } else if (option.element.type === \"Services\") {\r\n        if (option.element.subType === \"beacons\") {\r\n          resp = ``;\r\n        } else {\r\n          resp = `${option.element.subType}(${option.floor},${option.buildingName})`;\r\n        }\r\n      } else {\r\n        resp = \"\";\r\n      }\r\n    if (resp) {\r\n      return (\r\n        <div className=\"mapped-data m-0 \" style={{ padding: \"0\" }}>\r\n          <div className=\"row w-100\">\r\n            <div className=\"col-2\">\r\n              <div>\r\n                <img\r\n                  src=\"/inclunav/assets/images/destination2.svg\"\r\n                  alt=\"destination\"\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"col-10\">\r\n              <div className=\"row\">\r\n                <div className=\"col-12\">{resp}</div>\r\n              </div>\r\n              <div className=\"row\">\r\n                <div className=\"col-12 text-capitalize\"></div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div></div>\r\n        </div>\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  };\r\n    /**\r\n   * @id  N1.1.8\r\n   * @author Pankaj Singh\r\n   * @description Set navigation on input field\r\n   */\r\n  setNavigation = () => {\r\n    let {srcData,dstData,selectedVenue} = this.state;\r\n      if(srcData.buildingName !== dstData.buildingName){\r\n        this.multiBldNav()\r\n      }else{\r\n        this.grids_all=[];\r\n        // this.createGraph()\r\n        let building = this.state.dstData.buildingName;\r\n        let flrData =  this.state.buildingCluster.filter(r=>r.buildingName === this.state.dstData.buildingName)[0].data;\r\n        let polyData =  this.state.buildingPolyCluster.filter(r=>r.building === this.state.dstData.buildingName)[0].data;\r\n        let refPoint =  this.state.globalRefPointsList.filter(r=>r.buildingName === this.state.dstData.buildingName)[0].refPoints;\r\n\r\n      if(srcData.floor !== dstData.floor){\r\n        this.multiFloorNav()\r\n      }else{        \r\n        let flrMarkData = []\r\n        flrData.forEach(r=>{\r\n          if(r.floor === this.state.dstData.floor){\r\n            flrMarkData.push(r)\r\n          } \r\n        })\r\n        let flrDataPoly = []\r\n        for(let k=0;k<polyData.length;k++){\r\n            if(polyData[k].floor === this.state.dstData.floor){\r\n              flrDataPoly.push(polyData[k])\r\n            } \r\n        }\r\n        this.landMarks = [];\r\n        this.polygons = []\r\n        this.handleLocalGlobal(flrMarkData,flrDataPoly,building,refPoint)\r\n        // this.props.refPoint(\r\n          // selectedVenue,\r\n          // this.state.dstData.buildingName,\r\n          // \"ground\",\r\n          // () => {\r\n            // this.props.globalNavigation(\r\n            //   { venueName: selectedVenue, buildingName: this.state.dstData.buildingName },\r\n            //   () => {\r\n            //     this.fltrNvgnData(this.state.dstData.floor)\r\n            //   }\r\n            // );\r\n        //   }\r\n        // );\r\n      }\r\n    }\r\n  };\r\n  /**\r\n   * @id  N1.1.9\r\n   * @author Pankaj Singh\r\n   * @description Building to building Navigation\r\n   */\r\n  multiBldNav = () => {\r\n    \r\n  };\r\n    /**\r\n   * @id  N1.1.10\r\n   * @author Pankaj Singh\r\n   * @description floor to floor navigation\r\n   */\r\n  multiFloorNav = () => {\r\n    this.props.getAllBuildingElements(\r\n      {\r\n        venueName: this.state.selectedVenue,\r\n        buildingName: this.state.dstData.buildingName\r\n      },\r\n      () => {\r\n    this.createGraph()\r\n      })\r\n  };\r\n    /**\r\n   * @id  N1.1.11\r\n   * @author Ushaswini Chintha\r\n   * @param floor\r\n   * @description Filter out landmark and nonwalkable from  building data\r\n   */\r\n  fltrNvgnData = (floor)=>{\r\n    let data = this.props.androidNav;\r\n    const floors = [...new Set(data.map(s => s.floor))];\r\n    //polygon data or nonwalkables of all floors\r\n    var poly_data = data\r\n      .slice(data.length - floors.length, data.length)\r\n      .filter(r => {\r\n        return r.floor === floor;\r\n      });\r\n    //reduced data without non walkables\r\n    var red_data = data.slice(0, data.length - floors.length).filter(r => {\r\n      return r.floor === floor;\r\n    });\r\n    this.setState(\r\n      {\r\n        floor: floors[0],\r\n        floors: floors,\r\n        redData: red_data,\r\n        polyData: poly_data\r\n      },\r\n      () => {\r\n        this.handleLocalGlobal();\r\n        // this.mapReferencePoint()\r\n        // this.singleFloorNav()\r\n    }\r\n    );\r\n  }\r\n\r\n\r\n \r\n  /**\r\n   * @id  N1.1.6\r\n   * @author Pankaj Singh\r\n   * @description get floor list\r\n   */\r\n  getData = (building) => {\r\n    let data = { venueName: this.state.selectedVenue, buildingName: building };\r\n    this.props.floorList(data, () => {\r\n      let flrList = this.props.flrList.data;\r\n      this.setState({\r\n        flrList: flrList,\r\n        selectedBuilding: building\r\n      });\r\n    });\r\n  };\r\n\r\n  /**\r\n   * @id  N1.1.12\r\n   * @author Pankaj Singh\r\n   * @description get get complete building data thart\r\n   */\r\n  getCompleteData = floor => {\r\n    let { selectedVenue, selectedBuilding } = this.state;\r\n    this.props.globalNavigation(\r\n      { venueName: selectedVenue, buildingName: selectedBuilding },\r\n      () => {\r\n        this.fltrNvgnData(floor)\r\n      }\r\n    );\r\n  };\r\n\r\n\r\n\r\n  /**\r\n   * @id  N1.1.17\r\n   * @author Ushaswini Chintha\r\n   * @description Create Coordinate hasmap\r\n   */\r\n  coordHashMap = (crd,coords)=>{\r\n    coords[0] = {\r\n      lat: parseFloat(crd[0].globalRef.lat),\r\n      lon: parseFloat(crd[0].globalRef.lng),\r\n      localx: parseInt(crd[0].localRef.lat),\r\n      localy: parseInt(crd[0].localRef.lng)\r\n    };\r\n    coords[1] = {\r\n      lat: parseFloat(crd[3].globalRef.lat),\r\n      lon: parseFloat(crd[3].globalRef.lng),\r\n      localx: parseInt(crd[3].localRef.lng),\r\n      localy: parseInt(crd[3].localRef.lat)\r\n    };\r\n    coords[2] = {\r\n      lat: parseFloat(crd[2].globalRef.lat),\r\n      lon: parseFloat(crd[2].globalRef.lng),\r\n      localx: parseInt(crd[2].localRef.lng),\r\n      localy: parseInt(crd[2].localRef.lat)\r\n    };\r\n    coords[3] = {\r\n      lat: parseFloat(crd[1].globalRef.lat),\r\n      lon: parseFloat(crd[1].globalRef.lng),\r\n      localx: parseInt(crd[1].localRef.lng),\r\n      localy: parseInt(crd[1].localRef.lat)\r\n    };\r\n  }\r\n    /**\r\n   * @id  N1.1.18\r\n   * @author Ushaswini Chintha\r\n   * @description Create Coordinate hasmap\r\n   */\r\n  findLeastLat = (coords,leastLat)=>{\r\n    for (let i = 0; i < coords.length; i++) {\r\n      if (coords[i].lat == coords[leastLat].lat) {\r\n        //handling two points with equal lat\r\n        if (coords[i].lon > coords[leastLat].lon) {\r\n          leastLat = i;\r\n        }\r\n      } else if (coords[i].lat < coords[leastLat].lat) {\r\n        leastLat = i;\r\n      }\r\n    }\r\n    return leastLat\r\n  }\r\n  /**\r\n   * @id  N1.1.19\r\n   * @author Ushaswini Chintha\r\n   * @description Create Coordinate hasmap\r\n   */\r\n  betweenLength = (coords,lengths)=>{\r\n    for (let i = 0; i < coords.length; i++) {\r\n      var temp1;\r\n      if (i == coords.length - 1) {\r\n        temp1 = getHaversineDistance(coords[i], coords[0]);\r\n      } else {\r\n        temp1 = getHaversineDistance(coords[i], coords[i + 1]);\r\n      }\r\n      lengths.push(temp1);\r\n    }\r\n  }\r\n    /**\r\n   * @id  N1.1.20\r\n   * @author Ushaswini Chintha\r\n   * @description buildingAngle\r\n   */\r\n  buildingAngle = (coords,leastLat,highLon)=>{\r\n    let b = getHaversineDistance(coords[leastLat], coords[highLon]);\r\n    const horizontal = obtaincoordinates(coords[leastLat], 0, b);\r\n    let c = getHaversineDistance(coords[leastLat], horizontal);\r\n    let a = getHaversineDistance(coords[highLon], horizontal);\r\n    let out =\r\n      (Math.acos((b * b + c * c - a * a) / (2 * b * c)) * 180) / Math.PI;\r\n      return out\r\n  }\r\n/**\r\n   * @id  N1.1.22\r\n   * @author Ushaswini Chintha\r\n   * @description lift correction\r\n   */\r\n  liftCorrection = (red_data,diff)=>{\r\n    var ground_lift = red_data.filter(x => {\r\n      return x.element.subType === \"lift\" && x.floor === \"ground\";\r\n    });\r\n    if (ground_lift.length != 0) {\r\n      var nth_lift = 0; //loop to find which lift is across more floors\r\n      for (let i = 0; i < ground_lift.length; i++) {\r\n        var temp = red_data.filter(x => {\r\n          return (\r\n            x.element.subType === \"lift\" &&\r\n            x.properties.name === ground_lift[i].properties.name\r\n          );\r\n        });\r\n        if (\r\n          temp.length >=\r\n          red_data.filter(x => {\r\n            return (\r\n              x.element.subType === \"lift\" &&\r\n              x.properties.name === ground_lift[nth_lift].properties.name\r\n            );\r\n          }).length\r\n        ) {\r\n          nth_lift = i;\r\n        }\r\n      }\r\n      var lifts = red_data.filter(x => {\r\n        return (\r\n          x.element.subType === \"lift\" &&\r\n          x.properties.name === ground_lift[nth_lift].properties.name\r\n        );\r\n      });\r\n      for (let i = 0; i < lifts.length; i++) {\r\n        var temp = {};\r\n        temp.x = lifts[i].coordinateX - ground_lift[nth_lift].coordinateX;\r\n        temp.y = lifts[i].coordinateY - ground_lift[nth_lift].coordinateY;\r\n        temp.floor = lifts[i].floor;\r\n        diff.push(temp);\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * @id  N1.1.23\r\n   * @author Ushaswini Chintha\r\n   * @description lift correction\r\n   */\r\n  coordGlblLandmark = (red_data,diff,local_coords,coords,least_lat,high_lon,out)=>{\r\n    for (let i = 0; i < red_data.length; i++) {\r\n      if (diff.length > 1) {\r\n        //vertical correction across floors\r\n        var test = diff.filter(x => {\r\n          return x.floor === red_data[i].floor;\r\n        });\r\n        local_coords.localx = red_data[i].coordinateX - test[0].x;\r\n        local_coords.localy = red_data[i].coordinateY - test[0].y;\r\n      } else {\r\n        local_coords.localx = red_data[i].coordinateX;\r\n        local_coords.localy = red_data[i].coordinateY;\r\n      }\r\n      var l = distance(coords[least_lat], coords[high_lon]);\r\n      var m = distance(local_coords, coords[high_lon]);\r\n      var n = distance(coords[least_lat], local_coords);\r\n      var theta =\r\n        (Math.acos((l * l + n * n - m * m) / (2 * l * n)) * 180) / Math.PI;\r\n      if ((l * l + n * n - m * m) / (2 * l * n) > 1 || m == 0 || n == 0) {\r\n        theta = 0;\r\n      } //staright line case\r\n      let ang = theta + out;\r\n      var dist = distance(coords[least_lat], local_coords) * 0.3048; //to convert to meter\r\n      var ver = dist * Math.sin((ang * Math.PI) / 180.0);\r\n      var hor = dist * Math.cos((ang * Math.PI) / 180.0);\r\n      var final = obtaincoordinates(coords[least_lat], ver, hor);\r\n      red_data[i].properties.latitude = final.lat;\r\n      red_data[i].properties.longitude = final.lon;\r\n    }\r\n  }\r\n  /**\r\n   * @id  N1.1.24\r\n   * @author Ushaswini Chintha\r\n   * @description conver geojson landmark\r\n   */\r\n  geoJsonLandmark = (red_data,geoJSON)=>{\r\n    for (let i = 0; i < red_data.length; i++) {\r\n      var p = red_data[i];\r\n      if (p.name === \"\") {\r\n        //to deal with empty name field\r\n        p.name = p.properties.name;\r\n      }\r\n      geoJSON.features.push({\r\n        type: \"Feature\",\r\n        properties: {\r\n          name: p.name,\r\n          floor: p.floor,\r\n          type: p.element.subType,\r\n          floorElement: p.element.type,\r\n          localx: p.coordinateX,\r\n          localy: p.coordinateY,\r\n          ...p.properties\r\n        },\r\n        geometry: {\r\n          type: \"Point\",\r\n          coordinates: [p.properties.longitude, p.properties.latitude]\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @id  N1.1.25\r\n   * @author Ushaswini Chintha\r\n   * @description generate global coordinates for non walkable polygon\r\n   */\r\n  coordGlblPolygon = (poly_data,local_coords,diff,coords,least_lat,high_lon,out)=>{\r\n    for (let k = 0; k < poly_data.length; k++) {\r\n      var temp2 = [];\r\n      var floor_length = poly_data[k].properties.floorLength;\r\n      for (let j = 0; j < poly_data[k].properties.clickedPoints.length; j++) {\r\n        var line = poly_data[k].properties.clickedPoints[j];\r\n        var numbers = line.split(\",\").map(Number);\r\n        var temp1 = [];\r\n        for (let i = 0; i < numbers.length; i++) {\r\n          local_coords.localx = numbers[i] % floor_length;\r\n          local_coords.localy = numbers[i] / floor_length;\r\n\r\n          //for vertical allignment across floors\r\n          if (diff.length > 1) {\r\n            var test = diff.filter(x => {\r\n              return x.floor == poly_data[k].floor;\r\n            });\r\n            local_coords.localx = local_coords.localx - test[0].x;\r\n            local_coords.localy = local_coords.localy - test[0].y;\r\n          }\r\n          var l = distance(coords[least_lat], coords[high_lon]);\r\n          var m = distance(local_coords, coords[high_lon]);\r\n          var n = distance(coords[least_lat], local_coords);\r\n          var theta =\r\n            (Math.acos((l * l + n * n - m * m) / (2 * l * n)) * 180) / Math.PI;\r\n          if ((l * l + n * n - m * m) / (2 * l * n) > 1 || m == 0 || n == 0) {\r\n            theta = 0;\r\n          } //staright line case\r\n          let ang = theta + out;\r\n          var dist = distance(coords[least_lat], local_coords) * 0.3048; //to convert to meter\r\n          var ver = dist * Math.sin((ang * Math.PI) / 180.0);\r\n          var hor = dist * Math.cos((ang * Math.PI) / 180.0);\r\n          var final = obtaincoordinates(coords[least_lat], ver, hor);\r\n          var temp = [];\r\n          temp.push(final.lon, final.lat);\r\n          temp1.push(temp);\r\n        }\r\n        temp2.push(temp1);\r\n      }\r\n      poly_data[k][\"global\"] = temp2;\r\n    }\r\n  }\r\n  /**\r\n   * @id  N1.1.26\r\n   * @author Ushaswini Chintha\r\n   * @description geojson for polygon\r\n   */\r\n  geoJSONPoly = (poly_data,geoJSON_poly)=>{\r\n    for (let j = 0; j < poly_data.length; j++) {\r\n      for (let i = 0; i < poly_data[j].global.length; i++) {\r\n        geoJSON_poly.features.push({\r\n          type: \"Feature\",\r\n          properties: {\r\n            floor: poly_data[j].floor\r\n          },\r\n          geometry: {\r\n            type: \"LineString\",\r\n            coordinates: poly_data[j].global[i]\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * @id  N1.1.11\r\n   * @author Ushaswini Chintha\r\n   * @description Call Handling\r\n   */\r\n  handleCall = (e, position) => {\r\n    if (String(position.properties.contactNo) === \"null\") {\r\n      /*to handle null values*/\r\n      e.preventDefault();\r\n      alert(` No contact number associated`);\r\n    } else {\r\n      window.location.href = \"tel:\" + position.properties.contactNo;\r\n    }\r\n  };\r\n  /**\r\n   * @id  N1.1.12\r\n   * @author Ushaswini Chintha\r\n   * @description Internet Browsing\r\n   */\r\n  handleInternet = (e, position) => {\r\n    if (String(position.properties.url) === \"null\") {\r\n      /*to handle null values*/\r\n      e.preventDefault();\r\n      alert(` No website associated`);\r\n    } else {\r\n      window.open(position.properties.url, \"_blank\" /*Open in a new window.*/);\r\n    }\r\n  };\r\n  /**\r\n   * @id  N1.1.13\r\n   * @author Ushaswini Chintha\r\n   * @description Whatsapp Messaging\r\n   */\r\n  handleWhatsapp = (e, position) => {\r\n    if (String(position.properties.contactNo) == \"null\") {\r\n      /*to handle null values*/\r\n      e.preventDefault();\r\n      alert(` No whatsapp number associated`);\r\n    } else {\r\n      window.open(\r\n        \"https://api.whatsapp.com/send?phone=\" + position.properties.contactNo,\r\n        \"_blank\" /*Open in a new window.*/\r\n      );\r\n    }\r\n  };\r\n  /**\r\n   * @id  N1.1.14\r\n   * @author Ushaswini Chintha\r\n   * @description Send Mail\r\n   */\r\n  handleEmail = (e, position) => {\r\n    if (String(position.properties.email) == \"null\") {\r\n      /*to handle null values*/\r\n      e.preventDefault();\r\n      alert(` No Email associated`);\r\n    } else {\r\n      window.location.href = `mailto: ${position.properties.email}`;\r\n    }\r\n  };\r\n  /**\r\n   * @id  N1.1.15\r\n   * @author Ushaswini Chintha\r\n   * @description Floor Element Info Details\r\n   */\r\n  handleInfo = (e, position) => {\r\n    const info =\r\n      \"\\n\" +\r\n      \"Name :  \" +\r\n      position.properties.name +\r\n      \"\\n\" +\r\n      \"Floor num. :  \" +\r\n      position.properties.floor +\r\n      \"\\n\" +\r\n      \"Contact num. :  \" +\r\n      position.properties.contactNo +\r\n      \"\\n\" +\r\n      \"Timings :  \" +\r\n      position.properties.startTime +\r\n      \" - \" +\r\n      position.properties.endTime;\r\n    e.preventDefault();\r\n    alert(` ${info}`);\r\n  };\r\n\r\n\r\n  singleFloorNav = (globalCoords)=>{\r\n\t\r\n   this.props.getAllBuildingElements(\r\n      {\r\n        venueName: this.state.selectedVenue,\r\n        buildingName: this.state.dstData.buildingName\r\n      },\r\n      () => {\r\n        \r\n        // this.setState(\r\n        //   {\r\n        //     list: lists\r\n        //   },\r\n        //   () => {\r\n          this.mapBuildingData()\r\n            let data = { venueName: this.state.selectedVenue, buildingName: this.state.dstData.buildingName };\r\n            this.props.floorList(data, () => {\r\n              let flrList = this.props.flrList.data;\r\n\t\t\r\n              this.setState({\r\n                flrList:flrList\r\n              },()=>{\r\n\t\t\r\n                this.handleSubmit(globalCoords);\r\n\r\n              })\r\n            });\r\n        //   }\r\n        // );\r\n      }\r\n    );\r\n  }\r\n\r\n  createGraph =  ()=>{\r\n    let building = this.state.dstData.buildingName;\r\n    let flrList = []\r\n    let flrData =  this.state.buildingCluster.filter(r=>r.buildingName === this.state.dstData.buildingName)[0].data;\r\n    let polyData =  this.state.buildingPolyCluster.filter(r=>r.building === this.state.dstData.buildingName)[0].data;\r\n    let refPoint =  this.state.globalRefPointsList.filter(r=>r.buildingName === this.state.dstData.buildingName)[0].refPoints;\r\n    polyData.forEach((r)=>{\r\n      flrList.push(r.floor)\r\n    })  \r\n    let srcFlrMarkData = []\r\n    let dstFlrMarkData = []\r\n    flrData.forEach(r=>{\r\n      if(r.floor === this.state.srcData.floor){\r\n        srcFlrMarkData.push(r)\r\n      }\r\n      if(r.floor === this.state.dstData.floor){\r\n        dstFlrMarkData.push(r)\r\n      } \r\n    })\r\n    let srcFlrDataPoly = []\r\n    let dstFlrDataPoly = []\r\n    for(let k=0;k<polyData.length;k++){\r\n        if(polyData[k].floor === this.state.srcData.floor){\r\n          srcFlrDataPoly.push(polyData[k])\r\n        }\r\n        if(polyData[k].floor === this.state.dstData.floor){\r\n          dstFlrDataPoly.push(polyData[k])\r\n        } \r\n    }\r\n    this.handleLocalGlobal(srcFlrMarkData,srcFlrDataPoly,building,refPoint,this.state.srcData.floor)\r\n    this.handleLocalGlobal(dstFlrMarkData,dstFlrDataPoly,building,refPoint,this.state.dstData.floor)\r\n    this.mapBuildingData()\r\n        this.setState({\r\n          floorList:flrList,\r\n          srcFloorPoly:this.srcFloorPoly,\r\n          geoJSONPoly:this.srcFloorPoly,\r\n          dstFloorPoly:this.dstFloorPoly,\r\n          srcFloorLandMark:this.srcFloorLandmark,\r\n          geoJSON:this.srcFloorLandmark,\r\n          dstFloorLandMark:this.dstFloorLandmark,\r\n          currentFloor:this.state.srcData.floor\r\n        },()=>{\r\n          this.findpath(refPoint)\r\n        });\r\n  }\r\n\r\n\r\n  mapBuildingData = ()=>{\r\n    let nodes = this.props.navigationInfo;\r\n    this.grids_all = [];\r\n    let lists = [];\r\n    let num_vert = 0;\r\n    let fc = new Map();\r\n    for (let i = 0; i < nodes.length; i++) {\r\n      if (nodes[i].properties.floorElement === \"FloorConnection\") {\r\n        num_vert++;\r\n        var v = nodes[i].properties.type + \",\" + nodes[i].properties.name;\r\n        var val =\r\n          nodes[i].properties.floor + \",\" + nodes[i].properties.node;\r\n        if (fc.has(v) === false) {\r\n          fc.set(v, [val]);\r\n        } else {\r\n          fc.get(v).push(val);\r\n        }\r\n      }\r\n    }\r\n    this.graph = new Graph(num_vert + 2);\r\n    for (let i = 0; i < nodes.length; i++) {\r\n      var sel = nodes[i].properties;\r\n      lists.push(sel);\r\n      if (nodes[i].properties.floorElement === \"FloorConnection\") {\r\n        var val =\r\n          nodes[i].properties.floor + \",\" + nodes[i].properties.node;\r\n        this.graph.addVertex(val);\r\n      }\r\n      if (nodes[i].properties.floorElement === \"Floor\") {\r\n        if (nodes[i].properties.length == 8) {\r\n          var v = nodes[i].properties.frConn[0].split(\",\");\r\n          var flrmatrix = nodes[i].properties.flr_dist_matrix[0].split(\",\");\r\n          var len = v.length / 2;\r\n          if (v.length % 2 === 0) {\r\n            for (var j = 0; j < v.length; j = j + 2) {\r\n              var val =\r\n                parseInt(nodes[i].properties.length) * parseInt(v[j + 1]) +\r\n                parseInt(v[j]);\r\n              var vert1 = nodes[i].properties.floor + \",\" + val;\r\n              for (var k = j + 2; k < v.length; k = k + 2) {\r\n                val =\r\n                  parseInt(nodes[i].properties.length) *\r\n                    parseInt(v[k + 1]) +\r\n                  parseInt(v[k]);\r\n                var vert2 = nodes[i].properties.floor + \",\" + val;\r\n                this.graph.addEdge(\r\n                  vert1,\r\n                  vert2,\r\n                  flrmatrix[len * (j / 2) + k / 2],\r\n                  true\r\n                );\r\n              }\r\n            }\r\n          } else {\r\n          }\r\n        }\r\n        this.grids_all.push(nodes[i]);\r\n      }\r\n    }\r\n    let getKeys = fc.keys();\r\n    for (let i of getKeys) {\r\n      var get_values = fc.get(i);\r\n      var cnt = 0;\r\n      var prev = null;\r\n      for (var j of get_values) {\r\n        if (cnt > 0) {\r\n          this.graph.addEdge(prev, j, 0, true);\r\n          prev = j;\r\n        }\r\n        if (cnt === 0) {\r\n          prev = j;\r\n        }\r\n        cnt++;\r\n      }\r\n    }\r\n  }\r\n\r\n  handleSubmit = (globalCoords) => {\r\n    let { srcData,srcName, dstData,dstName, dstfloorL, dstfloorB } = this.state;\r\n    let srcVal = \"\";\r\n    let dstVal = \"\";\r\n    let srcfloor = \"\";\r\n    let dstfloor = \"\";\r\n    for (let k = 0; k < this.props.navigationInfo.length; k++) {\r\n      if (\r\n        this.props.navigationInfo[k].properties.floorElement !== undefined &&\r\n        this.props.navigationInfo[k].properties.floorElement === \"Rooms\"\r\n      ) {\r\n        if (srcData.name === this.props.navigationInfo[k].properties.roomName) {\r\n          srcVal = this.props.navigationInfo[k].properties.node;\r\n          srcfloor = this.props.navigationInfo[k].properties.floor;\r\n          dstfloor = this.props.navigationInfo[k].properties.floor;\r\n        }\r\n        if (dstData.name === this.props.navigationInfo[k].properties.roomName) {\r\n          dstVal = this.props.navigationInfo[k].properties.node;\r\n        }\r\n      }\r\n    }\r\n    let flrList = this.state.buildingPolyCluster.filter((r, i) => {\r\n      return r.building === this.state.dstData.buildingName;\r\n    })[0].data;\r\n        \r\n    let dstFlrDt = flrList.filter((r, i) => {\r\n      return r.floor === this.state.dstData.floor;\r\n    });\r\n    let srcfloorL = dstFlrDt[0].properties.floorLength;\r\n    let srcfloorB = dstFlrDt[0].properties.floorBreadth;\r\n    if (srcVal != null && dstVal != null) {\r\n      let dest_x = this.state.dstData.coordinateX;\r\n      let dest_y = this.state.dstData.coordinateY;\r\n     \r\n      if (srcfloor === dstfloor) {\r\n        this.callwhile(\r\n          srcfloor,\r\n          srcVal,\r\n          srcfloorL,\r\n          srcfloorB,\r\n          dest_x,\r\n          dest_y,\r\n          true,\r\n          \"myCanvassrc\",\r\n          globalCoords\r\n        );\r\n        this.setState({\r\n          samefloor: true\r\n        });\r\n      } else {\r\n        // this.setState({\r\n        //   samefloor: false,\r\n        //   buildingView: true\r\n        // });\r\n        // this.findpath();\r\n      }\r\n    } else {\r\n    }\r\n  };\r\n  /**\r\n   * @id  N1.1.17\r\n   * @author Pankaj Singh\r\n   * @description Find index of floor from floor list array\r\n   */\r\n  findFloor = (key, array) => {\r\n    if (array !== undefined) {\r\n      for (let i = 0; i < array.length; i++) {\r\n        if (array[i].type) {\r\n          if (array[i].geomtery.type === \"Polygon\") {\r\n            if (array[i].properties.floor === key) {\r\n              return i;\r\n            }\r\n          }\r\n        }\r\n        if (array[i].floor === key) {\r\n          return i;\r\n        }\r\n      }\r\n    }\r\n    return -1;\r\n  };\r\n  reset_var() {\r\n    this.grids = [];\r\n    this.visited = [];\r\n    this.shortestpath = [];\r\n    this.minimumcost = [];\r\n    this.leaves = [];\r\n  }\r\n  /**\r\n   *@id test 3  \r\n   *@author Jahnavi Methukumalli\r\n   *@description Find the safest path between source and destination\r\n   */\r\n\r\n   findAccessPath = (paths, srcfloor) => {\r\n\t\r\n\tvar weights = [1,1,1,1,1,1];\r\n\tvar score = [];\r\n\tvar protrusion=[];\r\n\tvar epi = 0;\r\n\tfor(let i=0; i<paths.length; i++){\r\n\t\tvar points = paths[i];\r\n\t\tvar pro = [0,0,0,0,0,0];\r\n\t\t//stairs\r\n\t\tfor(let j=0;j<parseInt(this.flrconn.length);j++){\r\n\t\t\tvar cord = [parseInt(this.flrconn[j][0]),parseInt(this.flrconn[j][1])];\r\n\t\t\tif(points.includes(cord)){\r\n\t\t\t\tpro[0] = pro[0]+1;\t\r\n\t\t\t}\t\t\t\r\n\t\t\r\n\t\t}\r\n\t\t//turn\r\n\t\tfor(let j=1;j<points.length-1;j++){\r\n\t\t\tvar a = points[j-1][0] - points[j][0];\r\n\t\t\tvar b = points[j][1] - points[j+1][1];\r\n\t\t\tvar c = points[j-1][1] - points[j][1];\r\n\t\t\tvar d = points[j][0] - points[j+1][0];\r\n\r\n\t\t\tif(a*b != c*d){\r\n\t\t\t\tpro[1] = pro[1]+1;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t//protrusion\r\n\t\tfor (let j=0;j<protrusion.length;j++){\r\n\t\t\tfor (let k=0;j<points.length;k++){\r\n\t\t\t\tvar dist = Math.sqrt((points[k][0]-protrusion[j][0])*(points[k][0]-protrusion[j][0]) +\r\n\t\t\t\t\t(points[k][1]-protrusion[j][1])*(points[k][1]-protrusion[j][1]));\r\n\t\t\t\tif(dist<epi){\r\n\t\t\t\t\tpro[2] = pro[2]+1;\r\n\t\t\t\t}\t\t\t\t\r\n\r\n\t\t\t}\r\n\r\n\t\t}\t\t\r\n\t\t\t\r\n\t\tvar pathscr = 0;\r\n\t\tfor(let j=0;j<6;j++){\r\n\t\t\tpathscr = pathscr + (weights[j]*pro[j]);\r\n\t\t}\r\n\t\tscore.push(pathscr);\r\n\t}\r\n\tvar min = Number.MAX_VALUE();\r\n\tvar index = -1;\r\n\tfor(let i=0;i<score.length;i++){\r\n\t\tif(score[i]<min){\r\n\t\t\tmin = score[i];\r\n\t\t\tindex = i;\r\n\t\t}\r\n\t\r\n\t}\r\n\t \r\n\treturn paths[index];\r\n   }\r\n\t\r\n   \r\n    \r\n  /**\r\n   *@id test 2  \r\n   *@author Jahnavi Methukumalli\r\n   *@description Find the safest path between source and destination\r\n   */\r\n\r\n   findSafePath = (paths, srcfloor) => {\r\n\t\r\n\tvar weights = [1,1,1,1,1,1];\r\n\tvar score = [];\r\n\tfor(let i=0; i<paths.length; i++){\r\n\t\tvar points = paths[i];\r\n\t\tvar props = [0,0,0,0,0,0];\r\n\t\tvar protrusion = [];\r\n\t\tvar epi=0;\r\n\t\t//stairs\r\n\t\tfor(let j=0;j<parseInt(this.flrconn.length);j++){\r\n\t\t\tvar cord = [parseInt(this.flrconn[j][0]),parseInt(this.flrconn[j][1])];\r\n\t\t\tif(points.includes(cord)){\r\n\t\t\t\tprops[0] = props[0]+1;\t\r\n\t\t\t}\t\t\t\r\n\t\t\r\n\t\t}\r\n\t\t//turn\r\n\t\tfor(let j=1;j<points.length-1;j++){\r\n\t\t\tvar a = points[j-1][0] - points[j][0];\r\n\t\t\tvar b = points[j][1] - points[j+1][1];\r\n\t\t\tvar c = points[j-1][1] - points[j][1];\r\n\t\t\tvar d = points[j][0] - points[j+1][0];\r\n\r\n\t\t\tif(a*b != c*d){\r\n\t\t\t\tprops[1] = props[1]+1;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t//protrusion\r\n\t\tfor (let j=0;j<protrusion.length;j++){\r\n\t\t\tfor (let k=0;j<points.length;k++){\r\n\t\t\t\tvar dist = Math.sqrt((points[k][0]-protrusion[j][0])*(points[k][0]-protrusion[j][0]) +\r\n\t\t\t\t\t(points[k][1]-protrusion[j][1])*(points[k][1]-protrusion[j][1]));\r\n\t\t\t\tif(dist<epi){\r\n\t\t\t\t\tprops[2] = props[2]+1;\r\n\t\t\t\t}\t\t\t\t\r\n\r\n\t\t\t}\r\n\r\n\t\t}\t\t\t\r\n\t\t\t\r\n\t\tvar pathscr = 0;\r\n\t\tfor(let j=0;j<6;j++){\r\n\t\t\tpathscr = pathscr + (weights[j]*props[j]);\r\n\t\t}\r\n\t\tscore[i] = pathscr;\r\n\t}\r\n\tvar min = Number.MAX_VALUE();\r\n\tvar index = -1;\r\n\tfor(let i=0;i<score.length;i++){\r\n\t\tif(score[i]<min){\r\n\t\t\tmin = score[i];\r\n\t\t\tindex = i;\r\n\t\t}\r\n\t\r\n\t}\r\n\t \r\n\treturn paths[index];\r\n\t\r\n   }\r\n\r\n   /** \r\n    *  @id test2\r\n    * @author Jahnavi Methukumalli\r\n    * @description Find simplest path between source and dest\r\n    * \r\n   */\r\n    callsimplest(shortestpath, srcVal, dest_x , dest_y,  ){\r\n      \r\n\r\n\r\n    }\r\n  /**\r\n   * @id test 1\r\n   * @author Jahnavi Methukumalli\r\n   * @description Find simplest path between source and destination(A*)  \r\n   */\r\n\r\n  callwhile_h = (srcfloor, srcVal, m, n, dest_x, dest_y, single, canvasid, globalCoords = null) => {\r\n\r\n   var closed = [];\r\n   \r\n   for (let i=0 ; i<m ; i++){\r\n      var row = [],\r\n         row1 = [],\r\n         row2 = [],\r\n         row3 = [],\r\n         row4 = [];\r\n      for (let j=0 ; j<n ; j++){\r\n        row.push(1);\r\n        row1.push(-1);\r\n        row3.push(Number.MAX_VALUE);\r\n        var row5 = [];\r\n        row4.push(row5);\r\n      }\r\n      this.shortestpath(row4);\r\n      this.grids.push(row);\r\n      this.visited.push(row1);\r\n      this.minimumcost.push(row3);\r\n   }\r\n\r\n   var ind1 = this.findFloor(srcfloor, this.grids_all);\r\n   if(ind1 !== -1 && this.grids_all[ind1].properties.grid_1 != null){\r\n      for(let i=0 ; i < this.grids_all[ind1].properties.grid_1.length; i++){\r\n        var nodes = this.grid_all[ind1].properties.grid_1[i].split(\",\");\r\n        for(let j=0 ; j<nodes.length ; j++){\r\n          var val = nodes[j];\r\n          var x = val % m;\r\n          var y = parseInt(val/m);\r\n\r\n          this.grids[x][y] = 0;\r\n        }\r\n      }\r\n   }\r\n\r\n   var src_x = srcVal % m ;\r\n   var src_y = parseInt(srcVal/m);\r\n   this.leaves.push([src_x,src_y]);\r\n   this.shortestpath[src_x][src_y].push([src_x,src_y]);\r\n   this.minimumcost[src_x][src_y] = 0;\r\n   while (this.leaves.length > 0){\r\n      var min = Number.MAX_VALUE;\r\n      var q;\r\n      var ind;\r\n      for (let i = 0; i<this.leaves.length;i++){\r\n        if(min > this.minimumcost[this.leaves[i][0]][this.leaves[i][1]]){\r\n          min = this.minimumcost[this.leaves[i][0]][this.leaves[i][1]];\r\n          q = this.leaves[i];\r\n\r\n        }\r\n      }\r\n      this.visited[q[0]][q[1]] = 1;\r\n      if(single == true){\r\n          if(q[0] == dest_x && q[1] == dest_y){\r\n              break;\r\n          }\r\n      }else {\r\n          var check = true;\r\n          for (let i=0 ; i< parseInt(this.flrconn.lenght); i++){\r\n            if(this.visited[parseInt(this.flrconn[i][0])][parseInt(this.flrconn[i][1])] == -1){\r\n              check = false;\r\n            }\r\n          }\r\n          if(check == true){\r\n            for (var ch = 0; ch < parseInt(this.flrconn.length); ch++) {\r\n              var vert = srcfloor + \",\" + srcVal + \",\" + \"virtual\";\r\n              console.log(\"verjsdh1\",vert)\r\n              this.graph.addEdge(\r\n                vert,\r\n                this.flrconn[ch][2],\r\n                this.minimumcost[parseInt(this.flrconn[ch][0])][\r\n                  parseInt(this.flrconn[ch][1])\r\n                ],\r\n                true\r\n              );\r\n            }\r\n             this.reset_var();\r\n             break;           \r\n          }\r\n      }\r\n      this.leaves.splice(ind,1);\r\n      for (let i = q[0]-1; i<=q[0]+1 ;i++){\r\n        for(let j = q[1]-1; j<=q[1]+1 ; j++){\r\n          if(i>=0 && i<m || j>=0 && j<n){\r\n            if(this.visited[i][j]==-1 && this.grids[i][j] == 1){\r\n              //A* main part to release closed list and open lists   \r\n              \r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n   }\r\n\r\n  }\r\n\r\n  /**\r\n   * @id  N1.1.18\r\n   * @author Anirudh Khammampati & Sai Kumar Reddy\r\n   * @description Find shortest path between source and destination\r\n   */\r\n  callwhile = (srcfloor, srcVal, m, n, dest_x, dest_y, single, canvasid,globalCoords = null) => {\r\n    var min = Number.MAX_VALUE;\r\n    var minleave = [];\r\n    var var_i;\r\n    var notthere;\r\n    for (let i = 0; i < m; i++) {\r\n      var row = [],\r\n        row1 = [],\r\n        row3 = [],\r\n        row4 = [];\r\n      for (let j = 0; j < n; j++) {\r\n        row.push(1);\r\n        row1.push(-1);\r\n        row3.push(Number.MAX_VALUE);\r\n        var row5 = [];\r\n        row4.push(row5);\r\n      }\r\n      this.shortestpath.push(row4);\r\n\t\t\r\n      this.grids.push(row);\r\n      this.visited.push(row1);\r\n      this.minimumcost.push(row3);\r\n    }\r\n    var ind1 = this.findFloor(srcfloor, this.grids_all);\r\n    if (ind1 !== -1 && this.grids_all[ind1].properties.grid_1 != null) {\r\n      for (let i = 0; i < this.grids_all[ind1].properties.grid_1.length; i++) {\r\n        var nodes = this.grids_all[ind1].properties.grid_1[i].split(\",\");\r\n        for (let j = 0; j < nodes.length; j++) {\r\n          var val = nodes[j];\r\n          var x = val % m;\r\n          var y = parseInt(val / m);\r\n\r\n          this.grids[x][y] = 0;\r\n        }\r\n      }\r\n    }\r\n    var src_x = srcVal % m;\r\n    var src_y = parseInt(srcVal / m);\r\n    this.leaves.push([src_x, src_y]);\r\n    this.shortestpath[src_x][src_y].push([src_x, src_y]);\r\n    this.minimumcost[src_x][src_y] = 0;\r\n    while (this.leaves.length > 0) {\r\n      min = Number.MAX_VALUE;\r\n      for (let i = 0; i < this.leaves.length; i++) {\r\n        if (min > this.minimumcost[this.leaves[i][0]][this.leaves[i][1]]) {\r\n          min = this.minimumcost[this.leaves[i][0]][this.leaves[i][1]];\r\n          minleave = this.leaves[i];\r\n          var_i = i;\r\n        }\r\n      }\r\n      this.visited[minleave[0]][minleave[1]] = 1;\r\n      if (single == true) {\r\n        if (minleave[0] == dest_x && minleave[1] == dest_y) {\r\n          break;\r\n        }\r\n      } else {\r\n        var check = true;\r\n        //console.log(this.flrconn);\r\n        for (var ch = 0; ch < parseInt(this.flrconn.length); ch++) {\r\n          if (\r\n            this.visited[parseInt(this.flrconn[ch][0])][\r\n              parseInt(this.flrconn[ch][1])\r\n            ] == 1\r\n          ) {\r\n          } else {\r\n            check = false;\r\n          }\r\n        }\r\n        if (check == true) {\r\n          for (var ch = 0; ch < parseInt(this.flrconn.length); ch++) {\r\n            var vert = srcfloor + \",\" + srcVal + \",\" + \"virtual\";\r\n            console.log(\"verjsdh1\",vert)\r\n            console.log(this.flrconn[ch][2],this.minimumcost[parseInt(this.flrconn[ch][0])][\r\n              parseInt(this.flrconn[ch][1])]);\r\n            this.graph.addEdge(\r\n              vert,\r\n              this.flrconn[ch][2],\r\n              this.minimumcost[parseInt(this.flrconn[ch][0])][\r\n                parseInt(this.flrconn[ch][1])\r\n              ],\r\n              true\r\n            );\r\n          }\r\n          this.reset_var();\r\n          break;\r\n        }\r\n      }\r\n      this.leaves.splice(var_i, 1);\r\n      for (var j = minleave[0] - 1; j <= minleave[0] + 1; j++) {\r\n        for (var k = minleave[1] - 1; k <= minleave[1] + 1; k++) {\r\n          if (j >= 0 && j < m && k >= 0 && k < n) {\r\n            if (this.visited[j][k] == -1 && this.grids[j][k] == 1) {\r\n              if (\r\n                this.minimumcost[j][k] >\r\n                this.minimumcost[minleave[0]][minleave[1]] +\r\n                  Math.sqrt((minleave[0]-j)*(minleave[0]-j)+(minleave[1]-k)*(minleave[1]-k))\r\n\t\t//Math.abs(j-dest_x)+Math.abs(k-dest_y)\r\n              ) {\r\n                this.minimumcost[j][k] =\r\n                  this.minimumcost[minleave[0]][minleave[1]] +\r\n                  Math.sqrt((minleave[0]-j)*(minleave[0]-j)+(minleave[1]-k)*(minleave[1]-k));\r\n               //  +Math.abs(j-dest_x)+Math.abs(k-dest_y);\r\n                this.shortestpath[j][k] = this.shortestpath[minleave[0]][\r\n                  minleave[1]\r\n                ].concat([[j, k]]);\r\n                notthere = 1;\r\n                for (var p = 0; p < this.leaves.length; p++) {\r\n                  if (this.leaves[p][0] == j && this.leaves[p][1] == k) {\r\n                    notthere = 0;\r\n                  }\r\n                }\r\n                if (notthere == 1) {\r\n                  this.leaves.push([j, k]);\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (single == true) {\r\n    let sp = this.shortestpath[dest_x][dest_y];\r\n    console.log(sp);\r\n      let mypoints = sp.map(r => {\r\n        return { x: r[0], y: r[1] };\r\n      });\r\n      console.log(mypoints);\r\n      sp = JSON.stringify(sp);\r\n      var refinedpaths = simplifyPath(mypoints, 2);\r\n      var sp1 = refinedpaths.map(r =>{return[r.x,r.y]});\r\n      console.log(sp1);\r\n      sp1 = JSON.stringify(sp1);\r\n      let { selectedVenue, selectedBuilding } = this.state;\r\n      \r\n      // this.props.globalNavigation(\r\n        // { venueName: selectedVenue, buildingName: this.state.dstData.buildingName },\r\n        // () => {\r\n          this.callGlobal(sp1,srcfloor,globalCoords);\r\n          // this.fltrNvgnData(floor)\r\n        // }\r\n      // );\r\n      let flrData =  this.state.buildingCluster.filter(r=>r.buildingName === this.state.dstData.buildingName)[0].data;\r\n        let allElements = flrData;\r\n      if(this.state.srcData.floor === this.state.dstData.floor){\r\n        let instructions = findInstructions(\r\n            sp,\r\n            refinedpaths,\r\n            allElements,\r\n            srcfloor\r\n        );\r\n        this.setState({\r\n          instructions:instructions\r\n        })\r\n      }else{\r\n        let instructions = findInstructions(\r\n          sp,\r\n          refinedpaths,\r\n          allElements,\r\n          srcfloor\r\n      );\r\n      \r\n      if(srcfloor === this.state.srcData.floor){\r\n        this.srcFlrInstructions = instructions;\r\n        this.setState({\r\n          instructions:instructions\r\n        })\r\n      }else{\r\n        this.dstFlrInstructions = instructions\r\n      }\r\n      }\r\n      // this.setState({\r\n      //   instructions: instructions\r\n      // });\r\n    }\r\n    this.reset_var()\r\n  };\r\n  /**\r\n   * @id  N1.1.19\r\n   * @author Pankaj Singh\r\n   * @description Load coordinates on osm\r\n   */\r\n  callGlobal = (shortestpath,srcfloor = null,globalCoords = null) => {\r\n    let crd = this.props.globalCoords.coordinates;\r\n    if(globalCoords){\r\n      crd = globalCoords\r\n    }\r\n\r\n    var coords = []; // \"breadth\":\"154\",\"length\":\"173\" , conversion: *3.28084\r\n    let sp = JSON.parse(shortestpath);\r\n    this.defineCoords(crd, coords);\r\n    //finding the point with lowest latitude and highest longitude\r\n    var least_lat = 0;\r\n    var high_lon = 0;\r\n    //finding the point with lowest latitude and highest longitude\r\n    for (let i = 0; i < coords.length; i++) {\r\n      \r\n      if (coords[i].lat == coords[least_lat].lat) {\r\n        //handling two points with equal lat\r\n        if (coords[i].lon > coords[least_lat].lon) {\r\n          least_lat = i;\r\n        }\r\n      } else if (coords[i].lat < coords[least_lat].lat) {\r\n        least_lat = i;\r\n      }\r\n    }\r\n    //evaluating high_lon\r\n    var c1 = least_lat == 3 ? 0 : least_lat + 1;\r\n    var c2 = least_lat == 0 ? 3 : least_lat - 1;\r\n    var high_lon = coords[c1].lon > coords[c2].lon ? c1 : c2;\r\n    console.log(c1);\r\n    console.log(c2);\r\n    console.log(coords[c1].lat);\r\n    console.log(coords[c2].lon);\r\n    ///lengths between given 4 global co-ordinates\r\n    var lengths = [];\r\n    for (let i = 0; i < coords.length; i++) {\r\n      var temp1;\r\n      if (i == coords.length - 1) {\r\n        temp1 = getHaversineDistance(coords[i], coords[0]);\r\n      } else {\r\n        temp1 = getHaversineDistance(coords[i], coords[i + 1]);\r\n      }\r\n      lengths.push(temp1);\r\n    }\r\n    // building angle with equator or true horizontal\r\n    var b = getHaversineDistance(coords[least_lat], coords[high_lon]);\r\n    const horizontal = obtaincoordinates(coords[least_lat], 0, b);\r\n    var c = getHaversineDistance(coords[least_lat], horizontal);\r\n    var a = getHaversineDistance(coords[high_lon], horizontal);\r\n    var out =\r\n      (Math.acos((b * b + c * c - a * a) / (2 * b * c)) * 180) / Math.PI;\r\n    // Vertical alignment or lift correction\r\n    var diff = []; //array to store offset of each floor\r\n    // loop to calculate all the coordinates of local points\r\n    var local_coords = { localx: 0, localy: 0 };\r\n    var myarr = JSON.parse(shortestpath);\r\n    //finding min and max latitude and longitude for the path\r\n    var max_lat = Number.MIN_SAFE_INTEGER;\r\n    var max_long = Number.MIN_SAFE_INTEGER;\r\n    var min_lat = Number.MAX_VALUE;\r\n    var min_long = Number.MAX_VALUE;\r\n    \r\n    for (let i = 0; i < sp.length; i++) {\r\n      if (diff.length > 1) {\r\n        //vertical correction across floors\r\n        local_coords.localx = sp[i][0];\r\n        local_coords.localy = sp[i][1];\r\n      } else {\r\n        local_coords.localx = sp[i][0];\r\n        local_coords.localy = sp[i][1];\r\n      }\r\n      var l = distance(coords[least_lat], coords[high_lon]);\r\n      var m = distance(local_coords, coords[high_lon]);\r\n      var n = distance(coords[least_lat], local_coords);\r\n      var theta =\r\n        (Math.acos((l * l + n * n - m * m) / (2 * l * n)) * 180) / Math.PI;\r\n      if ((l * l + n * n - m * m) / (2 * l * n) > 1 || m == 0 || n == 0) {\r\n        theta = 0;\r\n      } //staright line case\r\n      let ang = theta + out;\r\n      var dist = distance(coords[least_lat], local_coords) * 0.3048; //to convert to meter\r\n      var ver = dist * Math.sin((ang * Math.PI) / 180.0);\r\n      var hor = dist * Math.cos((ang * Math.PI) / 180.0);\r\n      var final = obtaincoordinates(coords[least_lat], ver, hor);\r\n    \r\n      myarr[i][0] = final.lat;\r\n      myarr[i][1] = final.lon;\r\n      if(max_lat<myarr[i][0]) max_lat = myarr[i][0];\r\n      if(max_long<myarr[i][1])max_long = myarr[i][1];\r\n      if(min_lat>myarr[i][0])min_lat = myarr[i][0];\r\n      if(min_long>myarr[i][1])min_long = myarr[i][1];\r\n     }\r\n\t  var mid_lat = (min_lat + max_lat)/2;\r\n\t  var mid_long = (min_long+max_long)/2;\r\n\r\n\t  var corner1 = L.latLng(min_lat+0.0001,min_long+0.0001);\r\n    var corner2 = L.latLng(max_lat+0.0001,max_long+0.0001);\r\n    var myBounds = L.latLngBounds(corner1,corner2);\r\n\t  var map = this.leafletMap.leafletElement;\r\n    \r\n     //console.log(myBounds.getNorthEast());\r\n    //console.log(min_lat);\r\n    //console.log(max_lat);\r\n    map.flyTo(new L.latLng(mid_lat,mid_long),21.6);\r\n    console.log(map.getZoom());\r\n\t  //map.flyToBounds(myBounds);\r\n    console.log(map.getZoom());\r\n    //map.flyTo(new L.LatLng(mid_lat+0.00002,mid_long+0.00001),22.5, {animation : true, duration :1});\r\n\t  //console.log(min_long);\r\n\t  //console.log(min_lat);\r\n    console.log(map.getZoom());\r\n\r\n        \r\n    //converting to geoJSON format\r\n    let geoJSON = {\r\n      type: \"FeatureCollection\",\r\n      features: []\r\n    };\r\n    // myarr.shift();\r\n    // myarr.pop();\r\n    // myarr.pop();\r\n\r\n    for (let i = 0; i < myarr.length; i++) {\r\n      var p = myarr[i];\r\n      geoJSON.features.push({\r\n        type: \"Feature\",\r\n        geometry: {\r\n          type: \"Polygon\",\r\n          coordinates: [p[0], p[1]]\r\n        }\r\n      });\r\n    }\r\n\r\n    if(this.state.srcData.floor !== this.state.dstData.floor){\r\n      if(srcfloor === this.state.srcData.floor){\r\n        this.srcFloorSp = geoJSON\r\n      }else{\r\n        this.dstFloorSp = geoJSON\r\n      }\r\n    }else{\r\n      this.setState(\r\n        {\r\n          showpath: true,\r\n          // showMarker: false,\r\n          zoom: 19,\r\n          pathgeoJSON: geoJSON\r\n        },\r\n        () => {\r\n          // var southWest = L.latLng(src[1], src[0]),\r\n            // northEast = L.latLng(dst[1], dst[0]),\r\n            // bounds = L.latLngBounds(southWest, northEast);\r\n          // map.fitBounds(bounds);\r\n        }\r\n      );\r\n    }\r\n    \r\n\r\n    \r\n  };\r\n\r\n  defineCoords = (crd, coords) => {\r\n    coords[0] = {\r\n      lat: parseFloat(crd[0].globalRef.lat),\r\n      lon: parseFloat(crd[0].globalRef.lng),\r\n      localx: parseInt(crd[0].localRef.lat),\r\n      localy: parseInt(crd[0].localRef.lng)\r\n    };\r\n    coords[1] = {\r\n      lat: parseFloat(crd[3].globalRef.lat),\r\n      lon: parseFloat(crd[3].globalRef.lng),\r\n      localx: parseInt(crd[3].localRef.lng),\r\n      localy: parseInt(crd[3].localRef.lat)\r\n    };\r\n    coords[2] = {\r\n      lat: parseFloat(crd[2].globalRef.lat),\r\n      lon: parseFloat(crd[2].globalRef.lng),\r\n      localx: parseInt(crd[2].localRef.lng),\r\n      localy: parseInt(crd[2].localRef.lat)\r\n    };\r\n    coords[3] = {\r\n      lat: parseFloat(crd[1].globalRef.lat),\r\n      lon: parseFloat(crd[1].globalRef.lng),\r\n      localx: parseInt(crd[1].localRef.lng),\r\n      localy: parseInt(crd[1].localRef.lat)\r\n    };\r\n  };\r\n\r\n  handleVenueChange = e => {\r\n    this.setState(\r\n      {\r\n        buildingList: [],\r\n        flrList: [],\r\n        selectedBuilding: \"\",\r\n        floorSelect: false,\r\n        selectNavigation: false,\r\n        geoJSON: [],\r\n        geoJSONPoly: []\r\n      },\r\n      () => {\r\n        this.selectedVenue(e[0].venueName, e[0].coordinates);\r\n      }\r\n    );\r\n  };\r\n /**\r\n   * @id  N1.1.19\r\n   * @author Pankaj Singh\r\n   * @description Load coordinates on osm\r\n   */\r\n  findpath = () => {\r\n    let srcVal = \"\";\r\n    let dstVal = \"\";\r\n    let srcfloor = \"\";\r\n    let dstfloor = \"\";\r\n    let srcFloorL = \"\";\r\n    let srcFloorB = \"\";\r\n    let dstFloorL = \"\";\r\n    let dstFloorB = \"\";\r\n    let building = this.state.dstData.buildingName;\r\n    let flrData =  this.state.buildingCluster.filter(r=>r.buildingName === this.state.dstData.buildingName)[0].data;\r\n    let polyData =  this.state.buildingPolyCluster.filter(r=>r.building === this.state.dstData.buildingName)[0].data;\r\n    let refPoint =  this.state.globalRefPointsList.filter(r=>r.buildingName === this.state.dstData.buildingName)[0].refPoints;        \r\n    // let i = parseInt(gridY) * floorL + parseInt(gridX);\r\n    // let flrMarkData = []\r\n    //        flrData.forEach(r=>{\r\n    //         if(r.floor === this.state.dstData.floor){\r\n    //           flrMarkData.push(r)\r\n    //         } \r\n    //       })\r\n          let flrDataPoly = []\r\n          for(let k=0;k<polyData.length;k++){\r\n              if(polyData[k].floor === this.state.dstData.floor){\r\n                dstFloorL = polyData[k].properties.floorLength\r\n                dstFloorB = polyData[k].properties.floorBreadth\r\n              } \r\n              if(polyData[k].floor === this.state.srcData.floor){\r\n                srcFloorL = polyData[k].properties.floorLength\r\n                srcFloorB = polyData[k].properties.floorBreadth\r\n              }\r\n          }\r\n          let {srcData,dstData} = this.state\r\n          let srcNode = parseInt(srcData.coordinateY) * srcFloorL + parseInt(srcData.coordinateX);\r\n          let dstNode = parseInt(dstData.coordinateY) * dstFloorL + parseInt(dstData.coordinateX);          \r\n          for(let k=0;k<flrData.length;k++){\r\n            if(flrData[k].floor === this.state.dstData.floor){\r\n              dstVal = flrData[k].properties.node \r\n            } \r\n            if(flrData[k].floor === this.state.srcData.floor){\r\n              srcVal = flrData[k].properties.node \r\n            }\r\n        }\r\n    // let i = parseInt(gridY) * floorL + parseInt(gridX);\r\n    var srcvert = this.state.srcData.floor + \",\" + srcNode + \",\" + \"virtual\";\r\n    var dstvert = this.state.dstData.floor + \",\" + dstNode + \",\" + \"virtual\";\r\n    if (this.graph.hasvertex(srcvert)) {\r\n    } else {\r\n      this.graph.addVertex(srcvert);\r\n      this.flrconn = [];\r\n      this.flrind = [];\r\n      console.log(this.state.srcData.floor);\r\n      for(let k=0;k<flrData.length;k++){\r\n        if (\r\n          flrData[k].floor === this.state.srcData.floor &&\r\n          flrData[k].element.type === \"FloorConnection\"\r\n        ) {\r\n          // var vert = flrData[k].properties.node\r\n          var vert = flrData[k].floor + \",\" + flrData[k].properties.node ;\r\n          this.flrconn.push([flrData[k].coordinateX , flrData[k].coordinateY, vert]);\r\n          this.flrind.push([k,vert]);\r\n          console.log(this.flrconn);\r\n\r\n        }\r\n    }\r\n      this.callwhile(\r\n        this.state.srcData.floor,\r\n        srcNode,\r\n        srcFloorL,\r\n        srcFloorB,\r\n        null,\r\n        null,\r\n        false,\r\n        null\r\n      );\r\n    }\r\n    if (this.graph.hasvertex(dstvert)) {\r\n    } else {\r\n      this.graph.addVertex(dstvert);\r\n      this.flrconn = [];\r\n    \r\n      for(let k=0;k<flrData.length;k++){\r\n        if(flrData[k].floor === this.state.dstData.floor &&\r\n          flrData[k].element.type === \"FloorConnection\"){\r\n            var vert = flrData[k].floor + \",\" + flrData[k].properties.node ;\r\n            this.flrind.push([k,vert]);\r\n          this.flrconn.push([flrData[k].coordinateX , flrData[k].coordinateY, vert]);\r\n        }\r\n    }\r\n    console.log(this.flrconn);\r\n    console.log(this.flrind);\r\n      this.callwhile(\r\n        this.state.dstData.floor,\r\n        dstNode,\r\n        dstFloorL,\r\n        dstFloorB,\r\n        null,\r\n        null,\r\n        false,\r\n        null\r\n      );\r\n    }\r\n    this.specialcallwhile(\r\n      this.state.srcData.floor,\r\n      srcvert,\r\n      this.state.dstData.floor,\r\n      dstvert,refPoint\r\n    );\r\n  }\r\n\r\n  specialcallwhile(srcfloor,srcvert,dstfloor,dstvert,refPoint,pt){\r\n    console.log(\"srcfloor,srcvert,dstfloor,dstvert\",srcfloor,srcvert,dstfloor,dstvert,refPoint)\r\n    var min = Number.MAX_VALUE;\r\n    var minleave=null;\r\n    var var_i;\r\n    var notthere;\r\n    let shortestpath = new Map();\r\n    let visited = new Map();\r\n    let minimumcost = new Map();\r\n    let leaves =[];\r\n    let flrData =  this.state.buildingCluster.filter(r=>r.buildingName === this.state.dstData.buildingName)[0].data;\r\n    var get_keys = this.graph.AdjList.keys();\r\n    for(var i of get_keys){\r\n      minimumcost.set(i,min);\r\n      visited.set(i,false);\r\n    }\r\n    leaves.push(srcvert);\r\n    shortestpath.set(srcvert,[srcvert]);\r\n    minimumcost.set(srcvert,0);\r\n    // this.graph.printGraph()\r\n    while(leaves.length > 0){\r\n      // alert(\"stop \"+leaves.length);\r\n      min = Number.MAX_VALUE;\r\n      for(let i=0;i<leaves.length;i++){\r\n        if(min > minimumcost.get(leaves[i])){\r\n          min = minimumcost.get(leaves[i]);\r\n          minleave = leaves[i];\r\n          var_i = i;\r\n        }\r\n      }\r\n      visited.set(minleave,true);\r\n        if(minleave == dstvert){\r\n          // alert(\" i \"+JSON.stringify(shortestpath.get(dstvert)));\r\n          break;\r\n        }\r\n      leaves.splice(var_i, 1);\r\n          var get_values = this.graph.AdjList.get(minleave);\r\n          var get_dist = this.graph.Adjweights.get(minleave);\r\n          var flag =0;\r\n          for (var jj=0;jj<get_values.length;jj++) {\r\n            var j = get_values[jj];\r\n            console.log(j);\r\n\r\n            var l = j.split(\",\");\r\n            var neighbour = false;\r\n            if(l.length==2){\r\n              neighbour=true;\r\n            }\r\n            else if(l.length==3){\r\n              if(j==dstvert){\r\n                neighbour=true;\r\n              }\r\n            }\r\n            console.log(pt);\r\n            if(this.pt==1){\r\n            var dataind = 0;\r\n            for(var kk=0; kk<this.flrind.length;kk++){\r\n                if(String(this.flrind[kk][1]).localeCompare(String(j))==0){\r\n                  dataind = kk;\r\n                }\r\n            }\r\n            console.log(dataind);\r\n            console.log(this.flrind[dataind]);\r\n            console.log(flrData[this.flrind[dataind][0]].element.subType);\r\n            if(visited.get(j) == false && neighbour && flrData[this.flrind[dataind][0]].element.subType===\"lift\"){\r\n              console.log(j);\r\n              //console.log(minleave);\r\n              if(minimumcost.get(j) > minimumcost.get(minleave) + get_dist[jj] ){\r\n               // console.log(j);\r\n                minimumcost.set(j,minimumcost.get(minleave) + get_dist[jj]);\r\n                var dum = [];\r\n                dum = shortestpath.get(minleave);\r\n                dum = dum.concat([j]);\r\n                shortestpath.set(j ,dum);\r\n                \r\n                notthere = 1;\r\n                for(var p=0;p<leaves.length;p++){\r\n                  if(leaves[p] == j){\r\n                    notthere = 0;\r\n                  }\r\n                }\r\n                if(notthere == 1){\r\n                  \r\n                  leaves.push(j);\r\n                  \r\n                }\r\n              }\r\n              \r\n            \r\n            }\r\n          }else{\r\n\r\n            if(visited.get(j) == false && neighbour){\r\n              console.log(j);\r\n              //console.log(minleave);\r\n              if(minimumcost.get(j) > minimumcost.get(minleave) + get_dist[jj] ){\r\n               // console.log(j);\r\n                minimumcost.set(j,minimumcost.get(minleave) + get_dist[jj]);\r\n                var dum = [];\r\n                dum = shortestpath.get(minleave);\r\n                dum = dum.concat([j]);\r\n                shortestpath.set(j ,dum);\r\n                \r\n                notthere = 1;\r\n                for(var p=0;p<leaves.length;p++){\r\n                  if(leaves[p] == j){\r\n                    notthere = 0;\r\n                  }\r\n                }\r\n                if(notthere == 1){\r\n                  \r\n                  leaves.push(j);\r\n                  \r\n                }\r\n              }\r\n              \r\n            \r\n            }\r\n\r\n\r\n\r\n\r\n\r\n          }\r\n            \r\n          }\r\n    }\r\n    this.createcanvas(shortestpath.get(dstvert),false,refPoint);\r\n  }\r\n\r\n  createcanvas( list, samefloor,refPoint) {\r\n    if (samefloor === false) {  \r\n      let ans = new Map();\r\n      for (var i = 0; i < list.length; i++) {\r\n        var e = list[i].split(\",\");\r\n        if (ans.has(e[0])) {\r\n          ans.get(e[0]).push(e[1]);\r\n        } else {\r\n          ans.set(e[0], [e[1]]);\r\n        }\r\n      }\r\n\r\n      var get_keys = ans.keys();\r\n      let clist = [];\r\n      let floorLlist = [];\r\n      var cnt = 0;\r\n      for (var i of get_keys) {\r\n        var ind1 = this.findFloor(i, this.props.flrList);\r\n        var ind = this.findFloor(i, this.grids_all);\r\n        floorLlist.push(this.grids_all[ind].properties.length);\r\n        clist.push({\r\n          id: cnt,\r\n          scale: 10,\r\n          floorL: this.grids_all[ind].properties.length,\r\n          floorB: this.grids_all[ind].properties.breadth,\r\n          fileName: this.grids_all[ind].properties.fileName,\r\n          floor: this.grids_all[ind].properties.floor\r\n        });\r\n        cnt++;\r\n      }\r\n      this.callimage(0, ans, cnt, clist, floorLlist,refPoint);\r\n    }\r\n  }\r\n\r\n  callimage(cnt, ans, count, clist, floorLlist,refPoint) {\r\n    let floorList = [this.state.srcData.floor, this.state.dstData.floor];\r\n    for (let jj = 0; jj < floorList.length; jj++) {\r\n      for (let ii = 0; ii < clist.length; ii++) {\r\n        if (floorList[jj] === clist[ii].floor) {\r\n          let i = clist[ii].floor;\r\n          let me = this;\r\n          let get_val = ans.get(i);\r\n              var id = \"canvas\" + ii;\r\n              // me.loadMultiFloorNonwalkable(id)\r\n              var index = me.findFloor(i, me.grids_all);\r\n              var m = parseInt(me.grids_all[index].properties.length);\r\n              var n = parseInt(me.grids_all[index].properties.breadth);\r\n              for (var j = 0; j < get_val.length - 1; j++) {\r\n                var dest_x = get_val[j + 1] % m;\r\n                var dest_y = parseInt(get_val[j + 1] / m);\r\n                console.log(\"i, get_val[j], m, n, dest_x, dest_y, true, id\",i, get_val[j], m, n, dest_x, dest_y, true, id)\r\n                me.callwhile(i, get_val[j], m, n, dest_x, dest_y, true, id,refPoint);\r\n              }\r\n              var node_count = 0;\r\n              for (var j of get_val) {\r\n                if (ii === count - 1) {\r\n                  if (node_count === get_val.length - 1) {\r\n                     //me.color_canvas_spl(j, id, \"green\", floorLlist[ii]);\r\n                  } else {\r\n                     //me.color_canvas_spl(j, id, \"yellow\", floorLlist[ii]);\r\n                  }\r\n                } else {\r\n                  if (node_count === 0 && ii === 0) {\r\n                     //me.color_canvas_spl(j, id, \"red\", floorLlist[ii]);\r\n                  } else {\r\n                     //me.color_canvas_spl(j, id, \"yellow\", floorLlist[ii]);\r\n                  }\r\n                }\r\n                node_count++;\r\n              }\r\n\r\n        }\r\n      }\r\n    }\r\n    console.log(\"this.srcFloorSp,this.dstFloorSp\")\r\n    this.setState({\r\n      srcFloorSp:this.srcFloorSp,\r\n      dstFloorSp:this.dstFloorSp,\r\n      pathgeoJSON:this.srcFloorSp,\r\n      srcFlrInstructions:this.srcFlrInstructions,\r\n      dstFlrInstructions:this.dstFlrInstructions,\r\n      showpath:true\r\n    })\r\n  }\r\n\r\n  callmark(ans, floorLlist) {\r\n    var get_keys = ans.keys();\r\n    var cnt = 0;\r\n    for (var i of get_keys) {\r\n      var canvasid = \"canvas\" + cnt;\r\n      var get_val = ans.get(i);\r\n      for (var j of get_val) {\r\n        this.color_canvas_spl(j, canvasid, \"blue\", floorLlist[cnt]);\r\n      }\r\n      cnt++;\r\n    }\r\n  }\r\n  render() {\r\n    let srtdFlr = [];\r\n\r\n    special.forEach((r1, i) => {\r\n                this.state.floorList &&\r\n              this.state.floorList.forEach(r2=>{\r\n                  if( r1 === r2){\r\n                      srtdFlr.push(r1)\r\n                  } \r\n                })\r\n              })\r\n    return (\r\n      <React.Fragment>\r\n        {/*Instruction Component */}\r\n        <div hidden={!this.state.showInstructions}>\r\n          <Instructions\r\n            dstAddress={this.state.dstAddress}\r\n            globalTime={this.state.globalTime}\r\n            globalDistance={this.state.globalDistance}\r\n            currentLocation={this.state.currentLocation}\r\n            handleBuildingView={this.handleBuildingView}\r\n            instructionSet={this.state.instructions}\r\n            buildingView={this.state.buildingView}\r\n            sourceLocation={this.state.currentLocation}\r\n            dstLocation={this.state.dstAddress}\r\n            dstName={this.state.dstName}\r\n            srcName={this.state.srcName}\r\n            handleInstr={() => {\r\n              this.setState({\r\n                showInstructions: false\r\n              });\r\n            }}\r\n          />\r\n        </div>\r\n        <div className=\"landing-height\" hidden={this.state.showInstructions}>\r\n          {/** Search Bar */}\r\n          <div\r\n            className=\"src-dst fixed-top\"\r\n            id=\"src-bar\"\r\n            style={{\r\n              height: this.state.selectNavigation === true ? \"167px\" : \"57px\"\r\n            }}\r\n          >\r\n            <div className=\"row w-100  mx-auto\">\r\n              <div className=\"col-12 p-0\">\r\n                <Typeahead\r\n                  required\r\n                  placeholder={`${this.state.selectedVenue}`}\r\n                  filterBy={[\"venueName\"]}\r\n                  labelKey={option => {\r\n                    return `${option.venueName.split(/(?=[A-Z])/).join(\" \")}`;\r\n                  }}\r\n                  onChange={e => {\r\n                    if (e.length > 0) {\r\n                      this.handleVenueChange(e);\r\n                    }\r\n                  }}\r\n                  disabled={false}\r\n                  id=\"source\"\r\n                  value={this.state.selectedVenue}\r\n                  options={this.state.venueList}\r\n                  name=\"list\"\r\n                  className=\"mb-2 form-control-dashboard mt-1\"\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"mx-auto hr-line\" />\r\n            {this.state.selectNavigation === true ? (\r\n              <React.Fragment>\r\n                <div className=\"row w-100  mx-auto mt-3\">\r\n                  <div className=\"col-12 p-0\">\r\n                    <button\r\n                      className=\"btn-nvgtn text-white\"\r\n                      onClick={() => {\r\n                        this.props.navContent(\"SELECT DESTINATION\", () => {});\r\n                      }}\r\n                    >\r\n                      <img\r\n                        className=\"float-left mt-2 mr-2\"\r\n                        src=\"/inclunav/assets/images/profile.svg\"\r\n                        alt=\"user location\"\r\n                      />\r\n                      <Typeahead\r\n                        required\r\n                        placeholder={`Select Source`}\r\n                        filterBy={[\"name\"]}\r\n                        labelKey={option => {\r\n                          let resp = this.sourceLabel(option);\r\n                          return resp;\r\n                        }}\r\n                        renderMenuItemChildren={option => {\r\n                          return this.renderSourceMenu(option);\r\n                        }}\r\n                        onChange={e => {\r\n                          if (e.length > 0) {\r\n                            \r\n                            this.setState({\r\n                              srcName:e[0].name + \" \" + e[0].floor + \" \" + e[0].buildingName,\r\n                              srcData: e[0]\r\n                            });\r\n                          }\r\n                        }}\r\n                        disabled={false}\r\n                        id=\"source\"\r\n                        value={this.state.srcName}\r\n                        options={this.state.venueNavigation}\r\n                        name=\"list\"\r\n                        className=\"mb-2 form-control-dashboard mt-1\"\r\n                      />\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n                <div className=\"mx-auto hr-line\" />\r\n                <div className=\"row w-100 mx-auto\">\r\n                  <div className=\"col-12 p-0\">\r\n                    <button\r\n                      className=\"btn-nvgtn text-white\"\r\n                      onClick={() => {\r\n                        this.props.navContent(\"SELECT DESTINATION\", () => {});\r\n                      }}\r\n                    >\r\n                      <img\r\n                        className=\"float-left mt-2 mr-2 my-auto\"\r\n                        src=\"/inclunav/assets/images/navigation.svg\"\r\n                        alt=\"select destination\"\r\n                      />\r\n                      <Typeahead\r\n                        required\r\n                        placeholder={`Select Destination`}\r\n                        filterBy={[\"name\"]}\r\n                        labelKey={option => {\r\n                          let resp = this.sourceLabel(option);\r\n                          return resp;\r\n                        }}\r\n                        renderMenuItemChildren={option => {\r\n                          return this.renderSourceMenu(option);\r\n                        }}\r\n                        onChange={e => {\r\n                          if (e.length > 0) {\r\n                            this.setState(\r\n                              {\r\n                                dstName: e[0].name + \" \" + e[0].floor + \" \" + e[0].buildingName,\r\n                                dstData: e[0],\r\n                                navigationStrt:true,\r\n                                samefloor:e[0].floor !== this.state.srcData.floor?false:true\r\n                              },\r\n                              () => {\r\n                                // this.mapReferencePoint()\r\n                                // this.handleLocalGlobal();\r\n                                this.pt=0;\r\n                                this.setNavigation();\r\n                              }\r\n                            );\r\n                          }\r\n                        }}\r\n                        disabled={false}\r\n                        id=\"source\"\r\n                        value={this.state.dstName}\r\n                        options={this.state.venueNavigation}\r\n                        name=\"list\"\r\n                        className=\"mb-2 form-control-dashboard mt-1\"\r\n                      />\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n                <div className=\"mx-auto hr-line\" />\r\n                <div className=\"row w-100 mx-auto\">\r\n                  <div className=\"col-2\">\r\n                    <button\r\n                      className=\"btn btn-direction  mx-auto btn-block btn-default btn-lg font-weight-bold  h2\"\r\n                      onClick={() => {\r\n                        this.pt=0;\r\n                        this.setNavigation();\r\n                      }}\r\n                    >\r\n                      Shortest\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"col-2\">\r\n                    <button\r\n                      className=\"btn btn-direction  mx-auto btn-block btn-default btn-lg font-weight-bold  h2\"\r\n                      onClick={() => {\r\n                        this.pt=0;\r\n                        this.setNavigation();\r\n                      }}\r\n                    >\r\n                      Simplest\r\n                    </button>\r\n                  </div>\r\n\r\n                  <div className=\"col-2\">\r\n                    <button\r\n                      className=\"btn btn-direction  mx-auto btn-block btn-default btn-lg font-weight-bold  h2\"\r\n                      onClick={() => {\r\n                        this.pt=1;\r\n                        this.setNavigation();\r\n                      }}\r\n                    >\r\n                      Accesible\r\n                    </button>\r\n                  </div>\r\n      \r\n                  <div className=\"col-2\">\r\n                    <button\r\n                      className=\"btn btn-direction  mx-auto btn-block btn-default btn-lg font-weight-bold  h2\"\r\n                      onClick={() => {\r\n                        this.pt=1;\r\n                        this.setNavigation();\r\n                      }}\r\n                    >\r\n                      Safest\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </React.Fragment>\r\n            ) : null}\r\n          </div>\r\n\r\n          <div\r\n            class=\"btn-group-vertical glbl-btn mr-2\"\r\n            role=\"group\"\r\n            aria-label=\"First group\"\r\n          >\r\n            {srtdFlr &&\r\n              srtdFlr.map((r, i) => {\r\n                return (\r\n                  <button\r\n                    type=\"button\"\r\n                    // className={\"btn btn-secondary\"}                    \r\n                    className={this.state.currentFloor ===r?\"btn btn-secondary active active1\":\"btn btn-secondary\"}\r\n                    onClick={() => {\r\n                      this.setState({\r\n                        currentFloor:r\r\n                      },()=>{\r\n                        if(this.state.srcData.floor === this.state.currentFloor){\r\n                          this.setState({\r\n                            pathgeoJSON:this.srcFloorSp,\r\n                            geoJSON:this.state.srcFloorLandMark,\r\n                            instructions:this.state.srcFlrInstructions\r\n                          })\r\n                        }else{\r\n                          this.setState({\r\n                            pathgeoJSON:this.dstFloorSp,\r\n                            geoJSON:this.state.dstFloorLandMark,\r\n                            instructions:this.state.dstFlrInstructions\r\n                          })\r\n                          // srcFloorSp:,\r\n                          // dstFloorSp:,\r\n                          // pathgeoJSON:this.srcFloorSp,\r\n                        }\r\n                      })\r\n                    }}\r\n                  >\r\n                    L{i}\r\n                  </button>\r\n                );\r\n              })}\r\n          </div>\r\n\r\n          <div\r\n            class=\"btn-group-vertical glbl-hm-btn mr-2\"\r\n            role=\"group\"\r\n            aria-label=\"First group\"\r\n          >\r\n            <button\r\n              type=\"button\"\r\n              class=\"btn btn-secondary\"\r\n              onClick={() => {\r\n                this.props.history.push(\"/navigate\");\r\n              }}\r\n            >\r\n              <i className=\"fa fa-home\" />\r\n            </button>\r\n          </div>\r\n          <MapContainer\r\n            style={{ height: \"100vh\" }}\r\n            center={center}\r\n            zoom={this.state.zoom}\r\n            ref={m => {\r\n              this.leafletMap = m;\r\n            }}\r\n            onZoomEnd={e => {\r\n              // Zoom in & out control\r\n              if (e.target._zoom < 21.2) {\r\n                //remove all layers from map\r\n                this.setState({\r\n                  showpath: false\r\n                });\r\n              }\r\n              if (e.target._zoom < 20) {\r\n                //remove all layers from map\r\n                this.setState({\r\n                  showMarker: false,\r\n                  showpath: false\r\n                });\r\n              }\r\n              if (e.target._zoom < 20) {\r\n                //remove all layers from map\r\n                this.setState({\r\n                  showServices: false\r\n                });\r\n              } else {\r\n              }\r\n              //adding non-room layers beyond 20 zoom\r\n              if (e.target._zoom > 19 && !this.state.showpath) {\r\n                this.setState({\r\n                  showMarker: true\r\n                });\r\n              }\r\n\r\n              if (e.target._zoom > 21.2 && !this.state.showpath) {\r\n                this.setState({\r\n                  showpath: true\r\n                });\r\n              }\r\n\r\n              if (e.target._zoom > 20 && !this.state.showpath) {\r\n                this.setState({\r\n                  showServices: true\r\n                });\r\n              } else {\r\n              }\r\n            }}\r\n          >\r\n            <TileLayer\r\n              attribution=\"&copy; <a href='https://osm.org/copyright'>OpenStreetMap</a> contributors\"\r\n              url={\"http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"}\r\n              maxZoom={25}\r\n              maxNativeZoom={19}\r\n            />\r\n            {this.state.floorSelect ? null : (\r\n              <React.Fragment>\r\n                {this.state.buildingList &&\r\n                  this.state.buildingList.map(r => {\r\n                    return (\r\n                      <Marker\r\n                        position={{ lat: r.lat, lng: r.lng }}\r\n                        onClick={this.getData.bind(this, r.buildingName)}\r\n                      >\r\n                        <Popup position={{ lat: r.lat, lng: r.lng }}>\r\n                          Building Name:\r\n                          <pre>{r.buildingName}</pre>\r\n                        </Popup>\r\n                      </Marker>\r\n                    );\r\n                  })}\r\n              </React.Fragment>\r\n            )}\r\n            {this.state.showMarker ? (\r\n              <React.Fragment>\r\n                {this.state.geoJSON.features &&\r\n                  this.state.geoJSON.features.map((position, idx) => {\r\n                    switch (position.properties.floorElement) {\r\n                      case \"Rooms\":\r\n                        return (\r\n                          <Marker\r\n                            position={[\r\n                              position.geometry.coordinates[1],\r\n                              position.geometry.coordinates[0]\r\n                            ]}\r\n                          >\r\n                            <Popup>\r\n                              <span className=\"font-weight-bold\">\r\n                                {position.properties.name}\r\n                              </span>\r\n                              <div\r\n                                class=\"btn-group btn-block\"\r\n                                role=\"group\"\r\n                                aria-label=\"Basic example\"\r\n                              >\r\n                                <button\r\n                                  class=\"btn btn-primary\"\r\n                                  onClick={e => {\r\n                                    this.handleCall(e, position);\r\n                                  }}\r\n                                >\r\n                                  <i class=\"fa fa-phone\"></i>\r\n                                </button>\r\n                                <button\r\n                                  class=\"btn btn-primary\"\r\n                                  onClick={e => {\r\n                                    this.handleInternet(e, position);\r\n                                  }}\r\n                                >\r\n                                  <i class=\"fa fa-globe\"></i>\r\n                                </button>\r\n                                <button\r\n                                  class=\"btn btn-primary\"\r\n                                  onClick={e => {\r\n                                    this.handleWhatsapp(e, position);\r\n                                  }}\r\n                                >\r\n                                  <i class=\"fa fa-whatsapp\"></i>\r\n                                </button>\r\n                                <button\r\n                                  class=\"btn btn-primary\"\r\n                                  onClick={e => {\r\n                                    this.handleEmail(e, position);\r\n                                  }}\r\n                                >\r\n                                  <i class=\"fa fa-envelope\"></i>\r\n                                </button>\r\n                                <button\r\n                                  class=\"btn btn-primary\"\r\n                                  onClick={e => {\r\n                                    this.handleInfo(e, position);\r\n                                  }}\r\n                                >\r\n                                  <i class=\"fa fa-info\"></i>\r\n                                </button>\r\n                                <button class=\"btn btn-primary\">\r\n                                  <i class=\"fa fa-plus-square\"></i>\r\n                                </button>\r\n                              </div>\r\n                            </Popup>\r\n                          </Marker>\r\n                        );\r\n                      case \"Services\":\r\n                        if (this.state.showServices) {\r\n                          switch (position.properties.type) {\r\n                            case \"drinkingWater\":\r\n                              return (\r\n                                <Marker\r\n                                  position={[\r\n                                    position.geometry.coordinates[1],\r\n                                    position.geometry.coordinates[0]\r\n                                  ]}\r\n                                  icon={watericon}\r\n                                >\r\n                                  <Popup>\r\n                                    <span>{position.properties.name}</span>\r\n                                  </Popup>\r\n                                </Marker>\r\n                              );\r\n                            case \"restRoom\":\r\n                              switch (position.properties.washroomType) {\r\n                                case \"Male\":\r\n                                  return (\r\n                                    <Marker\r\n                                      position={[\r\n                                        position.geometry.coordinates[1],\r\n                                        position.geometry.coordinates[0]\r\n                                      ]}\r\n                                      icon={male_toileticon}\r\n                                    >\r\n                                      <Popup>\r\n                                        <span>{position.properties.name}</span>\r\n                                      </Popup>\r\n                                    </Marker>\r\n                                  );\r\n                                case \"Female\":\r\n                                  return (\r\n                                    <Marker\r\n                                      position={[\r\n                                        position.geometry.coordinates[1],\r\n                                        position.geometry.coordinates[0]\r\n                                      ]}\r\n                                      icon={female_toileticon}\r\n                                    >\r\n                                      <Popup>\r\n                                        <span>{position.properties.name}</span>\r\n                                      </Popup>\r\n                                    </Marker>\r\n                                  );\r\n                                default:\r\n                                  return (\r\n                                    <Marker\r\n                                      position={[\r\n                                        position.geometry.coordinates[1],\r\n                                        position.geometry.coordinates[0]\r\n                                      ]}\r\n                                    >\r\n                                      <Popup>\r\n                                        <span>{position.properties.name}</span>\r\n                                      </Popup>\r\n                                    </Marker>\r\n                                  );\r\n                              }\r\n                            default:\r\n                              return null;\r\n                          }\r\n                        }\r\n                        break;\r\n                      case \"FloorConnection\":\r\n                        switch (position.properties.type) {\r\n                          case \"stairs\":\r\n                            return (\r\n                              <Marker\r\n                                position={[\r\n                                  position.geometry.coordinates[1],\r\n                                  position.geometry.coordinates[0]\r\n                                ]}\r\n                                icon={stairicon}\r\n                              >\r\n                                <Popup>\r\n                                  <span>{position.properties.name}</span>\r\n                                </Popup>\r\n                              </Marker>\r\n                            );\r\n                          case \"lift\":\r\n                            return (\r\n                              <Marker\r\n                                position={[\r\n                                  position.geometry.coordinates[1],\r\n                                  position.geometry.coordinates[0]\r\n                                ]}\r\n                                icon={lifticon}\r\n                              >\r\n                                <Popup>\r\n                                  <span>{position.properties.name}</span>\r\n                                </Popup>\r\n                              </Marker>\r\n                            );\r\n                          default:\r\n                            return null;\r\n                        }\r\n                      default:\r\n                        return null;\r\n                    }\r\n                  })}\r\n              </React.Fragment>\r\n            ) : null}\r\n            \r\n            {/* <GeoJSON\r\n              key={hash(this.state.geoJSONPoly)}\r\n              data={this.state.geoJSONPoly}\r\n            /> */}\r\n\r\n            {this.state.samefloor && this.state.polygons && this.state.polygons.map(r=>{\r\n              return <GeoJSON\r\n              key={hash(r.geoJSONPoly)}\r\n              data={r.geoJSONPoly}\r\n            />\r\n            })}\r\n            {!this.state.samefloor?\r\n             <GeoJSON\r\n              key={hash(this.state.currentFloor === this.state.srcData.floor? this.state.srcFloorPoly:this.state.dstFloorPoly)}\r\n              data={this.state.currentFloor === this.state.srcData.floor? this.state.srcFloorPoly:this.state.dstFloorPoly}\r\n            />:\r\n            null\r\n            }\r\n            {/* {this.state.showpath ? (\r\n              <React.Fragment>\r\n                <Marker\r\n                  position={[\r\n                    this.state.srcData.geometry.coordinates[1],\r\n                    this.state.srcData.geometry.coordinates[0]\r\n                  ]}\r\n                  icon={source}\r\n                >\r\n                  <Popup>\r\n                    <span className=\"font-weight-bold\">\r\n                      {this.state.srcData.properties.name}\r\n                    </span>\r\n                    <div\r\n                      class=\"btn-group btn-block\"\r\n                      role=\"group\"\r\n                      aria-label=\"Basic example\"\r\n                    >\r\n                      <button\r\n                        class=\"btn btn-primary\"\r\n                        onClick={e => {\r\n                          this.handleCall(e, [\r\n                            this.state.srcData.geometry.coordinates[1],\r\n                            this.state.srcData.geometry.coordinates[0]\r\n                          ]);\r\n                        }}\r\n                      >\r\n                        <i class=\"fa fa-phone\"></i>\r\n                      </button>\r\n                      <button\r\n                        class=\"btn btn-primary\"\r\n                        onClick={e => {\r\n                          this.handleInternet(e, [\r\n                            this.state.srcData.geometry.coordinates[1],\r\n                            this.state.srcData.geometry.coordinates[0]\r\n                          ]);\r\n                        }}\r\n                      >\r\n                        <i class=\"fa fa-globe\"></i>\r\n                      </button>\r\n                      <button\r\n                        class=\"btn btn-primary\"\r\n                        onClick={e => {\r\n                          this.handleWhatsapp(e, [\r\n                            this.state.srcData.geometry.coordinates[1],\r\n                            this.state.srcData.geometry.coordinates[0]\r\n                          ]);\r\n                        }}\r\n                      >\r\n                        <i class=\"fa fa-whatsapp\"></i>\r\n                      </button>\r\n                      <button class=\"btn btn-primary\">\r\n                        <i class=\"fa fa-envelope\"></i>\r\n                      </button>\r\n                      <button\r\n                        class=\"btn btn-primary\"\r\n                        onClick={e => {\r\n                          this.handleInfo(e, [\r\n                            this.state.srcData.geometry.coordinates[1],\r\n                            this.state.srcData.geometry.coordinates[0]\r\n                          ]);\r\n                        }}\r\n                      >\r\n                        <i class=\"fa fa-info\"></i>\r\n                      </button>\r\n                      <button class=\"btn btn-primary\">\r\n                        <i class=\"fa fa-plus-square\"></i>\r\n                      </button>\r\n                    </div>\r\n                  </Popup>\r\n                </Marker>\r\n                <Marker\r\n                  position={[\r\n                    this.state.dstData.geometry.coordinates[1],\r\n                    this.state.dstData.geometry.coordinates[0]\r\n                  ]}\r\n                  icon={destination}\r\n                >\r\n                  <Popup>\r\n                    <span className=\"font-weight-bold\">\r\n                      {this.state.srcData.properties.name}\r\n                    </span>\r\n                    <div\r\n                      class=\"btn-group btn-block\"\r\n                      role=\"group\"\r\n                      aria-label=\"Basic example\"\r\n                    >\r\n                      <button\r\n                        class=\"btn btn-primary\"\r\n                        onClick={e => {\r\n                          this.handleCall(e, [\r\n                            this.state.dstData.geometry.coordinates[1],\r\n                            this.state.dstData.geometry.coordinates[0]\r\n                          ]);\r\n                        }}\r\n                      >\r\n                        <i class=\"fa fa-phone\"></i>\r\n                      </button>\r\n                      <button\r\n                        class=\"btn btn-primary\"\r\n                        onClick={e => {\r\n                          this.handleInternet(e, [\r\n                            this.state.dstData.geometry.coordinates[1],\r\n                            this.state.dstData.geometry.coordinates[0]\r\n                          ]);\r\n                        }}\r\n                      >\r\n                        <i class=\"fa fa-globe\"></i>\r\n                      </button>\r\n                      <button\r\n                        class=\"btn btn-primary\"\r\n                        onClick={e => {\r\n                          this.handleWhatsapp(e, [\r\n                            this.state.dstData.geometry.coordinates[1],\r\n                            this.state.dstData.geometry.coordinates[0]\r\n                          ]);\r\n                        }}\r\n                      >\r\n                        <i class=\"fa fa-whatsapp\"></i>\r\n                      </button>\r\n                      <button class=\"btn btn-primary\">\r\n                        <i class=\"fa fa-envelope\"></i>\r\n                      </button>\r\n                      <button\r\n                        class=\"btn btn-primary\"\r\n                        onClick={e => {\r\n                          this.handleInfo(e, [\r\n                            this.state.dstData.geometry.coordinates[1],\r\n                            this.state.dstData.geometry.coordinates[0]\r\n                          ]);\r\n                        }}\r\n                      >\r\n                        <i class=\"fa fa-info\"></i>\r\n                      </button>\r\n                      <button class=\"btn btn-primary\">\r\n                        <i class=\"fa fa-plus-square\"></i>\r\n                      </button>\r\n                    </div>\r\n                  </Popup>\r\n                </Marker>\r\n              </React.Fragment>\r\n            ) : null} */}\r\n\r\n            {this.state.showpath &&\r\n              this.state.pathgeoJSON.features &&\r\n              this.state.pathgeoJSON.features.map((position, idx) => {\r\n                return (\r\n                  <Marker\r\n                    position={[\r\n                      position.geometry.coordinates[0],\r\n                      position.geometry.coordinates[1]\r\n                    ]}\r\n                    icon={doticon}\r\n                  ></Marker>\r\n                );\r\n              })}\r\n          </MapContainer>\r\n          <BottomBar\r\n            srcName={this.state.srcName}\r\n            dstName={this.state.dstName}\r\n            dstData={this.state.dstData}\r\n            handleInstr={() => {\r\n              this.setState({\r\n                showInstructions: true\r\n              });\r\n            }}\r\n          />\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    getImage: state.imgDetails,\r\n    allNodes: state.getAllElem,\r\n    flrList: state.floorList,\r\n    userProfile: state.userPortfolio,\r\n    navigationInfo: state.navigationInfo,\r\n    vnList: state.venueList,\r\n    bldList: state.buildingList,\r\n    gpsLocation: state.gpsLocation,\r\n    androidNav: state.globalNavigation,\r\n    globalRoutes: state.osmRoutes,\r\n    pickupPoint: state.pickupPoints,\r\n    currentTab: state.navContent,\r\n    globalCoords: state.refPoint\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n  floorList,\r\n  imgDetails,\r\n  getAllBuildingElements,\r\n  venueList,\r\n  buildingList,\r\n  getGpsLocation,\r\n  globalNavigation,\r\n  getUserPortfolio,\r\n  osmRoutes,\r\n  pickupPoints,\r\n  navContent,\r\n  refPoint\r\n})(GlobalView);\r\n","C:\\Users\\Assistech\\mishor\\inclunav\\src\\components\\dashboard\\navigation\\Konva.js",["487","488","489","490","491","492","493","494","495","496","497","498","499","500","501","502","503","504","505","506","507","508","509","510","511","512","513","514","515","516","517","518","519","520","521","522","523","524","525","526","527","528","529","530","531","532","533","534","535","536","537","538","539","540","541","542","543","544","545","546","547","548","549","550","551","552","553","554","555","556","557","558","559","560","561","562","563","564","565","566","567","568","569","570","571","572","573","574","575","576","577","578","579","580","581","582","583","584","585","586","587","588","589","590"],"import React, { Component } from 'react';\r\nimport { render } from 'react-dom';\r\n\r\nimport {\r\n    Map as MapContainer,\r\n    Marker,\r\n    Popup,\r\n    TileLayer,\r\n  } from \"react-leaflet\";\r\n  import L from \"leaflet\";\r\n  import \"leaflet-control-geocoder/dist/Control.Geocoder.js\";\r\n  import config from \"../../../config\";\r\n  import { connect } from \"react-redux\";\r\n  import {\r\n    floorList,\r\n    imgDetails,\r\n    getAllBuildingElements,\r\n    venueList,\r\n    buildingList,\r\n    getGpsLocation,\r\n    androidNavigation,\r\n    getUserPortfolio\r\n  } from \"../../../store/actions/index\";\r\n  import { Typeahead } from \"react-bootstrap-typeahead\";\r\n  import \"react-bootstrap-typeahead/css/Typeahead.css\";\r\n  import \"leaflet-routing-machine\";\r\n  import \"lrm-graphhopper\";\r\n  import Instructions from \"./Instructions\";\r\n  import NavigationDetails from './NavigationDetails';\r\n  import GlobalDetails from './GlobalDetails';\r\n  import InstructionTab from './InstructionTab';\r\n  import SourceMenu from \"./SourceMenu\";\r\n  import DestinationMenu from \"./DestinationMenu\";\r\n\r\nimport { Stage, Layer,Star, Rect, Text } from 'react-konva';\r\nimport Konva from 'konva';\r\n\r\nclass Graph {\r\n    constructor(noOfVertices) {\r\n      this.noOfVertices = noOfVertices;\r\n      this.AdjList = new Map();\r\n      this.Adjweights = new Map();\r\n    }\r\n    addVertex(v) {\r\n      this.AdjList.set(v, []);\r\n      this.Adjweights.set(v, []);\r\n    }\r\n    hasvertex(v) {\r\n      return this.AdjList.has(v);\r\n    }\r\n    edges(v) {\r\n      return this.AdjList.get(v);\r\n    }\r\n    addEdge(v, w, wt, undir) {\r\n      if (undir) {\r\n        this.AdjList.get(v).push(w);\r\n        this.Adjweights.get(v).push(wt);\r\n        this.AdjList.get(w).push(v);\r\n        this.Adjweights.get(w).push(wt);\r\n      } else {\r\n        this.AdjList.get(v).push(w);\r\n        this.Adjweights.get(v).push(wt);\r\n      }\r\n    }\r\n  \r\n    printGraph() {\r\n      var get_keys = this.AdjList.keys();\r\n      for (var i of get_keys) {\r\n        var get_values = this.AdjList.get(i);\r\n        var val = this.Adjweights.get(i);\r\n        var conc = \"\";\r\n        var conc2 = \"\";\r\n        for (let j of get_values) {\r\n          conc = conc + j + \" \";\r\n        }\r\n        for (let j of val) {\r\n          conc2 = conc2 + j + \" \";\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n\r\nclass ColoredRect extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          center: { lat: 28.6139, lng: 77.209 },\r\n          currentPos: { lat: 28.6139, lng: 77.209 },\r\n          gpsLocation: \"\",\r\n          buildingAddress: \"\",\r\n          zoomLevel: \"18\",\r\n          showStrtMenu: false,\r\n          showDstMenu: false,\r\n          //\r\n          buildingName: \"\",\r\n          srcName: \"Select Source\",\r\n          srcfloor: \"none\",\r\n          dstfloor: \"none\",\r\n          list: [],\r\n          dstName: \"Select Destination\",\r\n          srcVal: null,\r\n          dstVal: null,\r\n          scale: 2.4,\r\n          srcfloorL: null,\r\n          srcfloorB: null,\r\n          dstfloorL: null,\r\n          dstfloorB: null,\r\n          samefloor: true,\r\n          canvaslist: [],\r\n          ind: 0,\r\n          sideDrawerOpen: false,\r\n          isLoading: false,\r\n          sidebarLeft: false,\r\n          imgName: null,\r\n          value: \"\",\r\n          suggestions: [],\r\n          dstValue: \"\",\r\n          dstSuggestions: [],\r\n          venueName: \"\",\r\n          venueList: [],\r\n          buildingList: [],\r\n          buildingView: false,\r\n          pathCaption: [],\r\n          pathFloor: [],\r\n          currentStep: 0,\r\n          srcReadOnly: false,\r\n          dstReadOnly: false,\r\n          currentLocation: \"\",\r\n          locationList: [],\r\n          selectedSrcLocation: { buildingName: \"Building\", venueName: \"Venue\" },\r\n          selectedDstLocation: { buildingName: \"Building\", venueName: \"Venue\" },\r\n          srcBuildingLocation: { buildingName: \"\", venueName: \"\" },\r\n          dstBuildingLocation: { buildingName: \"\", venueName: \"\" },\r\n          srcFloorList: [],\r\n          dstFloorList: [],\r\n          selectedDestination: \"Select Destination\",\r\n          dstAddress: \"Select Destination\",\r\n          canvasWidth: null,\r\n          canvasHeight: null,\r\n          tmpSrcLocation: {},\r\n          tmpDstLocation: {},\r\n          floorAngle: 0,\r\n          pathAngle:0,\r\n          next: true,\r\n          showDirections: false,\r\n          pathArray: [],\r\n          srtdInstruction: [],\r\n          srtdFlr: [],\r\n          toggle: false,\r\n          osmRoutes: null,\r\n          globalDistance: 0,\r\n          globalTime: 0,\r\n          showInstructions: false,\r\n          zoom:false,\r\n          language:'en',\r\n          visionType:'vision',\r\n          height:'<5ft',\r\n          ageGroup:'adult',\r\n          walkingType:'walk',\r\n          pause:false,\r\n          firstFlrInstruction:[],\r\n          secondFlrInstruction:[],\r\n          firstFlr:'',\r\n          secondFlr:'',\r\n          currentFloor:'',\r\n          instructionReady:false,\r\n          color: 'green',\r\n          pathPoints:[]\r\n\r\n        };\r\n        this.shortestPathVar = [];\r\n        this.grids_all = [];\r\n        this.grids = [];\r\n        this.visited = [];\r\n        this.shortestpath = [];\r\n        this.minimumcost = [];\r\n        this.leaves = [];\r\n        this.graph = null;\r\n        this.flrconn = [];\r\n        this.num_floors = 0;\r\n        this.animateRef = false;\r\n        this.instructions = [];\r\n        this.show = 0;\r\n        this.actualAngle = 0;\r\n        this.croppedRegion = {};\r\n      }\r\n    \r\n      componentDidMount() {\r\n        // if (window.navigator.geolocation) {\r\n        //   navigator.geolocation.getCurrentPosition(success => {\r\n          let success  =  {coords:{ latitude: 28.6139, longitude: 77.209 }}\r\n            let coordinates = [success.coords.latitude, success.coords.longitude];\r\n            this.props.getGpsLocation(\r\n              { lat: success.coords.latitude, lng: success.coords.longitude },\r\n              () => {\r\n                this.getUserDetails()\r\n                var cvWidth = Math.max(\r\n                  document.getElementById(\"myCanvassrc\").clientWidth,\r\n                  window.innerWidth || 0\r\n                );\r\n                var cvHeight = Math.max(\r\n                  document.getElementById(\"myCanvassrc\").clientHeight,\r\n                  window.innerHeight || 0\r\n                );\r\n    \r\n                var srcBar = document.getElementById(\"src-bar\");\r\n                var navHeight = document.getElementById(\"nav-height\");\r\n                var element = document.getElementById(\"myCanvassrc\");\r\n                var topPos = element.getBoundingClientRect().top;\r\n                let realHeight =\r\n                  cvHeight - (srcBar.clientHeight + navHeight.clientHeight);\r\n    \r\n                this.setState(\r\n                  {\r\n                    // currentLocation: this.props.gpsLocation.display_name,\r\n                    currentLocation: \"IIT Delhi\",\r\n                    canvasWidth: cvWidth,\r\n                    canvasHeight: realHeight,\r\n                    center: {\r\n                      lat: success.coords.latitude,\r\n                      lng: success.coords.longitude\r\n                    },\r\n                    currentPos: {\r\n                      lat: success.coords.latitude,\r\n                      lng: success.coords.longitude\r\n                    }\r\n                  },\r\n                  () => {\r\n                    const map = this.leafletMap.leafletElement;\r\n                    let lat = success.coords.latitude;\r\n                    let lng = success.coords.longitude;\r\n                    map.flyTo(\r\n                      new L.LatLng(\r\n                        success.coords.latitude,\r\n                        success.coords.longitude\r\n                      ),\r\n                      map.getZoom(),\r\n                      {\r\n                        animate: true,\r\n                        duration: 0.5\r\n                      }\r\n                    );\r\n                  }\r\n                );\r\n              }\r\n            );\r\n            this.getVenueList(coordinates);\r\n        //   });\r\n        // } else {\r\n        //   // x.innerHTML = \"Geolocation is not supported by this browser.\";\r\n        // }\r\n      }\r\n    \r\n      getUserDetails = ()=>{\r\n        let id = localStorage.getItem('id');\r\n          let token = localStorage.getItem('token');\r\n          this.props.getUserPortfolio({id,token},()=>{\r\n            // console.log(\"user profile\",this.props.userProfile)\r\n            if(this.props.userProfile.success === false){\r\n              localStorage.clear();\r\n              this.props.history.push('/')\r\n            }else{\r\n              let data = this.props.userProfile.properties\r\n              this.setState({\r\n                language:data.language,\r\n                visionType:data.visionType,\r\n                height:data.height,\r\n                ageGroup:data.ageGroup,\r\n                walkingType:data.navigationMode\r\n              })          \r\n            }\r\n          })\r\n      }\r\n    \r\n      fetchLocation = (venueName, buildingName, point) => {\r\n        let data = { venueName, buildingName };\r\n        this.props.floorList(data, () => {\r\n          let flrListData = this.props.flrList.data;\r\n          let prevData = this.state.center;\r\n          this.setState(\r\n            {\r\n              center: { lat: flrListData[0].lat, lng: flrListData[0].lng },\r\n              currentPos: { lat: flrListData[0].lat, lng: flrListData[0].lng },\r\n              [point]: {\r\n                venueName,\r\n                buildingName,\r\n                lat: flrListData[0].lat,\r\n                lng: flrListData[0].lng,\r\n                floorAngle:parseInt(flrListData[0].buildingOrientation)\r\n              }\r\n            },\r\n            () => {\r\n              this.props.getAllBuildingElements(data, () => {\r\n                const map = this.leafletMap.leafletElement;\r\n                map.flyTo(\r\n                  new L.LatLng(flrListData[0].lat, flrListData[0].lng),\r\n                  map.getZoom(),\r\n                  {\r\n                    animate: true,\r\n                    duration: 0.5\r\n                  }\r\n                );\r\n                let nodes = this.props.navigationInfo;\r\n                let lists = [];\r\n                for (let i = 0; i < nodes.length; i++) {\r\n                  var sel = nodes[i].properties;\r\n                  lists.push(sel);\r\n                }\r\n    \r\n                const uniqueLists = Array.from(\r\n                  new Set(\r\n                    lists.map(o => {\r\n                      if (o.floorElement === \"Rooms\") {\r\n                        return o.coordinates;\r\n                      } else if (o.floorElement === \"FloorConnection\") {\r\n                        return o.coordinates;\r\n                      } else if (o.floorElement === \"Services\") {\r\n                        return o.coordinates;\r\n                      } else if (o.floorElement === \"RestRooms\") {\r\n                        return o.coordinates;\r\n                      } else {\r\n                        // return o.coordinates\r\n                      }\r\n                    })\r\n                  )\r\n                ).map(id => {\r\n                  return lists.find(a => a.coordinates === id);\r\n                });\r\n                let freeBeacon = uniqueLists.map(r=>{\r\n                  if(r.floorElement === \"Services\"){\r\n                    if(r.type === \"Beacons\" ){\r\n                      return null\r\n                    }else{\r\n                      return r\r\n                    }\r\n                  }else{\r\n                    return r\r\n                  } \r\n                })\r\n    \r\n                let freeData = freeBeacon.filter( (el)=> {\r\n                  return el != null;\r\n                });\r\n                freeData.sort((a, b)=> {\r\n                  if(a.floorElement === \"Rooms\"){\r\n                    if(a.roomName !== undefined){\r\n                      return a.roomName < b.roomName ? -1 : (a.roomName > b.roomName ? 1 : 0);\r\n                    }else{\r\n                      return a.name < b.name ? -1 : (a.name > b.name ? 1 : 0);\r\n                    }\r\n                  }else{\r\n                    return a.type < b.type ? -1 : (a.type > b.type ? 1 : 0);\r\n                  }\r\n                });\r\n                if (point === \"srcBuildingLocation\") {\r\n                  this.setState({\r\n                    srcFloorList: freeData\r\n                  });\r\n                } else if (point === \"dstBuildingLocation\") {\r\n                  let me = this;\r\n                  let srcLat = this.state.srcBuildingLocation.lat;\r\n                  let srcLng = this.state.srcBuildingLocation.lng;\r\n                  if (!srcLat && !srcLng){\r\n                    srcLat = prevData.lat;\r\n                    srcLng = prevData.lng;\r\n                  }\r\n    \r\n                  map.fitBounds(\r\n                    L.latLngBounds(\r\n                      L.latLng(srcLat, srcLng),\r\n                      L.latLng(flrListData[0].lat, flrListData[0].lng)\r\n                    )\r\n                  );\r\n                  this.setState({\r\n                    dstFloorList: freeData,\r\n                    zoomLevel: \"10\"\r\n                  });\r\n                }\r\n              });\r\n            }\r\n          );\r\n        });\r\n      };\r\n    \r\n      getVenueList = (coordinates = null) => {\r\n        this.props.venueList(() => {\r\n          this.setState(\r\n            {\r\n              venueList: this.props.vnList.data\r\n            },\r\n            () => {\r\n              this.findNearVenue(coordinates);\r\n            }\r\n          );\r\n        });\r\n      };\r\n    \r\n      findNearVenue = coordinates => {\r\n        let { venueList } = this.state;\r\n        let distList = venueList.map(r => {\r\n          return this.getDistance(coordinates, r);\r\n        });\r\n        let arr = [];\r\n        let list = this.state.venueList.map((r, i) => {\r\n          if (r.buildingList) {\r\n            let dt = r.buildingList.map(k => {\r\n              arr.push({\r\n                venueName: r.venueName,\r\n                buildingName: k,\r\n                venueDistance: distList[i].distance\r\n              });\r\n              return {\r\n                venueName: r.venueName,\r\n                buildingName: k,\r\n                venueDistance: distList[i].distance\r\n              };\r\n            });\r\n            return dt;\r\n          } else {\r\n            arr.push({\r\n              venueName: r.venueName,\r\n              buildingName: \"\",\r\n              venueDistance: distList[i].distance\r\n            });\r\n            return {\r\n              venueName: r.venueName,\r\n              buildingName: \"\",\r\n              venueDistance: distList[i].distance\r\n            };\r\n          }\r\n        });\r\n        var lowest = Number.POSITIVE_INFINITY;\r\n        var highest = Number.NEGATIVE_INFINITY;\r\n        var tmp;\r\n        let nearLocation;\r\n        for (var i = distList.length - 1; i >= 0; i--) {\r\n          tmp = distList[i].distance;\r\n          if (tmp < lowest) {\r\n            nearLocation = distList[i];\r\n            lowest = tmp;\r\n          }\r\n          if (tmp > highest) highest = tmp;\r\n        }\r\n        let listArr = this.state.locationList.map(r => {\r\n          let k = distList.map(d => {\r\n            if (d.venueName === r.venueName) {\r\n              return { r, distance: d.distance };\r\n            }\r\n          });\r\n        });\r\n        let sortedArr = this.quickSort(arr);\r\n        if (lowest < 1) {\r\n          this.setState(\r\n            {\r\n              currentVenue: nearLocation,\r\n              locationList: arr\r\n            },\r\n            () => {\r\n              this.getBuildingList(nearLocation.venueName, coordinates);\r\n            }\r\n          );\r\n        } else {\r\n          this.setState({\r\n            currentVenue: {\r\n              address: \"\",\r\n              coordinates: [],\r\n              dateCreated: \"\",\r\n              distance: 2,\r\n              id: 35,\r\n              liveStatus: true,\r\n              organization: \"\",\r\n              venueName: \"\"\r\n            },\r\n            selectedLocation: { venueName: \"Venue\", buildingName: \"Building\" },\r\n            locationList: arr,\r\n            currentBuilding: {\r\n              address: \"\",\r\n              buildingName: \"\",\r\n              coordinates: [],\r\n              distance: 2,\r\n              lat: 0,\r\n              lng: 0\r\n            }\r\n          });\r\n        }\r\n      };\r\n    \r\n      quickSort = arr => {\r\n        if (arr.length < 2) {\r\n          return arr;\r\n        }\r\n        let pivot = arr[0];\r\n        let lesserVal = [];\r\n        let greaterVal = [];\r\n        for (let k = 0; k < arr.length; k++) {\r\n          if (arr[k].venueDistance < pivot.venueDistance) {\r\n            lesserVal.push(arr[k]);\r\n          } else {\r\n            greaterVal.push(arr[k]);\r\n          }\r\n        }\r\n      };\r\n    \r\n      getBuildingList = (venueName, coordinates) => {\r\n        this.props.buildingList({ venueName: venueName }, () => {\r\n          this.setState(\r\n            {\r\n              buildingList: this.props.bldList.data\r\n            },\r\n            () => {\r\n              if (this.state.buildingList.length > 0) {\r\n                this.findNearBuilding(coordinates);\r\n              } else {\r\n                this.setState({\r\n                  selectedLocation: { venueName: venueName, buildingName: \"\" }\r\n                });\r\n              }\r\n            }\r\n          );\r\n        });\r\n      };\r\n    \r\n      findNearBuilding = coordinates => {\r\n        let { buildingList } = this.state;\r\n        let distList = buildingList.map(r => {\r\n          let p = [r.lat, r.lng];\r\n          r.coordinates = p;\r\n          return this.getDistance(coordinates, r);\r\n        });\r\n        var lowest = Number.POSITIVE_INFINITY;\r\n        var highest = Number.NEGATIVE_INFINITY;\r\n        var tmp;\r\n        let nearLocation;\r\n        for (var i = distList.length - 1; i >= 0; i--) {\r\n          tmp = distList[i].distance;\r\n          if (tmp < lowest) {\r\n            nearLocation = distList[i];\r\n            lowest = tmp;\r\n          }\r\n          if (tmp > highest) highest = tmp;\r\n        }\r\n        if (lowest < 50) {\r\n          this.setState(\r\n            {\r\n              currentBuilding: nearLocation,\r\n              selectedLocation: {\r\n                venueName: this.state.currentVenue.venueName,\r\n                buildingName: nearLocation.buildingName\r\n              }\r\n            },\r\n            () => {\r\n              this.setNavigation(this.state.selectedLocation);\r\n              this.fetchLocation(\r\n                this.state.selectedLocation.venueName,\r\n                this.state.selectedLocation.buildingName\r\n              );\r\n            }\r\n          );\r\n        }\r\n      };\r\n    \r\n      rad = function(x) {\r\n        return (x * Math.PI) / 180;\r\n      };\r\n    \r\n      getDistance = function(p1, p2) {\r\n        var R = 6378137; // Earth’s mean radius in meter\r\n        var dLat = this.rad(p2.coordinates[0] - p1[0]);\r\n        var dLong = this.rad(p2.coordinates[1] - p1[1]);\r\n        var a =\r\n          Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n          Math.cos(this.rad(p1[0])) *\r\n            Math.cos(this.rad(p2.coordinates[0])) *\r\n            Math.sin(dLong / 2) *\r\n            Math.sin(dLong / 2);\r\n        var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n        var d = (R * c) / 1000;\r\n        p2.distance = d;\r\n        return p2; // returns the distance in km\r\n      };\r\n    \r\n      setNavigation = data => {\r\n                                        // this.props.androidNavigation(data, () => {\r\n                                    // })\r\n        this.grids_all = [];\r\n        this.props.getAllBuildingElements(data, () => {\r\n          let nodes = this.props.navigationInfo;\r\n          let lists = [];\r\n          let num_vert = 0;\r\n          let fc = new Map();\r\n          for (let i = 0; i < nodes.length; i++) {\r\n            if (nodes[i].properties.floorElement === \"FloorConnection\") {\r\n              num_vert++;\r\n              var v = nodes[i].properties.type + \",\" + nodes[i].properties.name;\r\n              var val = nodes[i].properties.floor + \",\" + nodes[i].properties.node;\r\n              if (fc.has(v) === false) {\r\n                fc.set(v, [val]);\r\n              } else {\r\n                fc.get(v).push(val);\r\n              }\r\n            }\r\n          }\r\n          this.graph = new Graph(num_vert + 2);\r\n          for (let i = 0; i < nodes.length; i++) {\r\n            var sel = nodes[i].properties;\r\n            lists.push(sel);\r\n            if (nodes[i].properties.floorElement === \"FloorConnection\") {\r\n              var val = nodes[i].properties.floor + \",\" + nodes[i].properties.node;\r\n              this.graph.addVertex(val);\r\n            }\r\n    \r\n            if (nodes[i].properties.floorElement === \"Floor\") {\r\n              if (nodes[i].properties.length == 8) {\r\n                var v = nodes[i].properties.frConn[0].split(\",\");\r\n                var flrmatrix = nodes[i].properties.flr_dist_matrix[0].split(\",\");\r\n                var len = v.length / 2;\r\n                if (v.length % 2 === 0) {\r\n                  for (var j = 0; j < v.length; j = j + 2) {\r\n                    var val =\r\n                      parseInt(nodes[i].properties.length) * parseInt(v[j + 1]) +\r\n                      parseInt(v[j]);\r\n                    var vert1 = nodes[i].properties.floor + \",\" + val;\r\n                    for (var k = j + 2; k < v.length; k = k + 2) {\r\n                      val =\r\n                        parseInt(nodes[i].properties.length) * parseInt(v[k + 1]) +\r\n                        parseInt(v[k]);\r\n                      var vert2 = nodes[i].properties.floor + \",\" + val;\r\n                      this.graph.addEdge(\r\n                        vert1,\r\n                        vert2,\r\n                        flrmatrix[len * (j / 2) + k / 2],\r\n                        true\r\n                      );\r\n                    }\r\n                  }\r\n                } else {\r\n                }\r\n              }\r\n              this.grids_all.push(nodes[i]);\r\n            }\r\n          }\r\n    \r\n          let getKeys = fc.keys();\r\n    \r\n          for (let i of getKeys) {\r\n            var get_values = fc.get(i);\r\n            var cnt = 0;\r\n            var prev = null;\r\n            for (var j of get_values) {\r\n              if (cnt > 0) {\r\n                this.graph.addEdge(prev, j, 0, true);\r\n                prev = j;\r\n              }\r\n              if (cnt === 0) {\r\n                prev = j;\r\n              }\r\n              cnt++;\r\n            }\r\n          }\r\n          // if(this.state.srcfloor === this.state.dstfloor){\r\n    \r\n          this.setState({\r\n            // canvasWidth: cvWidth,\r\n            // canvasHeight: height_of_canvas,\r\n            list: lists\r\n          });\r\n          // }\r\n        });\r\n      };\r\n    \r\n      toggle = (type, value) => event => {\r\n        this.setState(state => {\r\n          return {\r\n            [type]: value\r\n          };\r\n        });\r\n      };\r\n    \r\n      findFloor = (key, array) => {\r\n        if (array !== undefined) {\r\n          for (let i = 0; i < array.length; i++) {\r\n            if (array[i].type) {\r\n              if (array[i].geomtery.type === \"Polygon\") {\r\n                if (array[i].properties.floor === key) {\r\n                  return i;\r\n                }\r\n              }\r\n            }\r\n            if (array[i].floor === key) {\r\n              return i;\r\n            }\r\n          }\r\n        }\r\n        return -1;\r\n      };\r\n    \r\n      color_canvas_spl = (i, canvasid, color, srcfloorL) => {\r\n    \r\n        let { scale } = this.state;\r\n    \r\n        if(color === \"red\"){\r\n          let srcDiv = document.getElementById(\"srcImage\");\r\n          let canvas = document.getElementById(canvasid);\r\n          let context = canvas.getContext(\"2d\");\r\n    \r\n          var wrh = this.state.dstfloorL / this.state.dstfloorB;\r\n          var newWidth = this.state.canvasWidth;\r\n          var newHeight = newWidth / wrh;\r\n          if (newHeight > this.state.canvasHeight) {\r\n            newHeight = this.state.canvasHeight;\r\n            newWidth = newHeight * wrh;\r\n          }\r\n    \r\n          let gpx,gpy;\r\n          if(canvasid === \"canvas0\"){\r\n            gpx = newWidth / this.state.srcfloorL;\r\n            gpy = newHeight / this.state.srcfloorB;  \r\n          }else{\r\n            gpx = newWidth / this.state.dstfloorL;\r\n            gpy = newHeight / this.state.dstfloorB;\r\n          }\r\n    \r\n          let pos_x = gpx * (i % srcfloorL);\r\n          let pos_y = gpy * parseInt(i / srcfloorL);\r\n          context.fillStyle = color;\r\n          // context.fillRect(pos_x, pos_y, scale, scale);  \r\n          context.drawImage(srcDiv, pos_x, pos_y, 10, 10);\r\n        }else if(color === \"yellow\"){\r\n          let lift = document.getElementById(\"lift\");\r\n          let stairs = document.getElementById(\"stairs\");\r\n          let canvas = document.getElementById(canvasid);\r\n          let context = canvas.getContext(\"2d\");\r\n          var wrh = this.state.dstfloorL / this.state.dstfloorB;\r\n          var newWidth = this.state.canvasWidth;\r\n          var newHeight = newWidth / wrh;\r\n          if (newHeight > this.state.canvasHeight) {\r\n            newHeight = this.state.canvasHeight;\r\n            newWidth = newHeight * wrh;\r\n          }\r\n          \r\n          let gpx,gpy;\r\n    \r\n          if(canvasid === \"canvas0\"){\r\n            gpx = newWidth / this.state.srcfloorL;\r\n            gpy = newHeight / this.state.srcfloorB;  \r\n          }else{\r\n            gpx = newWidth / this.state.dstfloorL;\r\n            gpy = newHeight / this.state.dstfloorB;\r\n          }\r\n    \r\n          let pos_x = gpx * (i % srcfloorL);\r\n          let pos_y = gpy * parseInt(i / srcfloorL);\r\n    \r\n          var rot = (Math.PI / 2) * 3;\r\n          var x = pos_x;\r\n          var y = pos_y;\r\n          var step = Math.PI / 5;\r\n          let frConnType = \"\";\r\n          let data = this.props.navigationInfo.map(r => {\r\n            return r.properties;\r\n          });\r\n          for (let k = 0; k < data.length; k++) {\r\n            if (data[k].node === i) {\r\n              frConnType = data[k].type;\r\n            }\r\n          }\r\n          if (frConnType === \"Stairs\") {\r\n            var half_scale = scale / 2;\r\n            pos_x = pos_x + half_scale;\r\n            pos_y = pos_y + half_scale;\r\n            context.drawImage(stairs, pos_x - 12.5, pos_y - 6.25, 25, 25);\r\n          } else if (frConnType === \"Lift\") {\r\n            var half_scale = scale / 2;\r\n            pos_x = pos_x + half_scale;\r\n            pos_y = pos_y + half_scale;\r\n            context.drawImage(lift, pos_x - 12, pos_y + 6.25, 25, 25);\r\n          }\r\n           \r\n        }else if(color === \"green\"){\r\n          let dstDiv = document.getElementById(\"dstImage\");\r\n          let { scale } = this.state;\r\n          let canvas = document.getElementById(canvasid);\r\n          let context = canvas.getContext(\"2d\");\r\n    \r\n          var wrh = this.state.dstfloorL / this.state.dstfloorB;\r\n          var newWidth = this.state.canvasWidth;\r\n          var newHeight = newWidth / wrh;\r\n          if (newHeight > this.state.canvasHeight) {\r\n            newHeight = this.state.canvasHeight;\r\n            newWidth = newHeight * wrh;\r\n          }\r\n    \r\n          let gpx,gpy;\r\n          if(canvasid === \"canvas0\"){\r\n            gpx = newWidth / this.state.srcfloorL;\r\n            gpy = newHeight / this.state.srcfloorB;  \r\n          }else{\r\n            gpx = newWidth / this.state.dstfloorL;\r\n            gpy = newHeight / this.state.dstfloorB;\r\n          }\r\n    \r\n          let pos_x = gpx * (i % srcfloorL);\r\n          let pos_y = gpy * parseInt(i / srcfloorL);\r\n          context.fillStyle = color;\r\n          // context.fillRect(pos_x, pos_y, scale, scale);  \r\n          context.drawImage(dstDiv, pos_x, pos_y, 10, 10);\r\n        }\r\n      };\r\n    \r\n      \r\n      color_canvas = (i, place, color) => {\r\n        let srcDiv = document.getElementById(\"srcImage\");\r\n        let dstDiv = document.getElementById(\"dstImage\");\r\n        if (place === \"srcmap\") {\r\n          let { srcfloorL, scale } = this.state;\r\n          var canvas = document.getElementById(\"myCanvassrc\");\r\n          var context = canvas.getContext(\"2d\");\r\n          // let gpx = this.state.canvasWidth / this.state.srcfloorL;\r\n          // let gpy = this.state.canvasHeight / this.state.srcfloorB;\r\n    \r\n          var wrh = this.state.srcfloorL / this.state.srcfloorB;\r\n          var newWidth = this.state.canvasWidth;\r\n          var newHeight = newWidth / wrh;\r\n          if (newHeight > this.state.canvasHeight) {\r\n            newHeight = this.state.canvasHeight;\r\n            newWidth = newHeight * wrh;\r\n          }\r\n    \r\n          let gpx = newWidth / this.state.srcfloorL;\r\n          let gpy = newHeight / this.state.srcfloorB;\r\n    \r\n          var posX = gpx * (i % srcfloorL);\r\n          var posY = gpy * parseInt(i / srcfloorL);\r\n          var halfScale = scale / 2;\r\n          posX = posX + halfScale;\r\n          posY = posY + halfScale;\r\n          if (color === \"green\") {\r\n            var half_scale = scale / 2;\r\n            posX = posX + half_scale;\r\n            posY = posY + half_scale;\r\n            context.globalAlpha = 1;\r\n            context.drawImage(dstDiv, posX - 15, posY - 25, 12, 15);\r\n          }else if(color === \"#bdbdbd\"){\r\n            let { dstfloorL, scale } = this.state;\r\n            var half_scale = scale / 2;\r\n            posX = posX + half_scale;\r\n            posY = posY + half_scale;\r\n            context.fillStyle = color;\r\n            context.globalAlpha = 1;\r\n            context.fillRect(posX, posY, scale, scale);  \r\n          } else {\r\n            var half_scale = scale / 2;\r\n            posX = posX + half_scale;\r\n            posY = posY + half_scale;\r\n            context.globalAlpha = 1;\r\n            context.drawImage(srcDiv, posX-9,posY, 15, 15);\r\n          }\r\n        } else {\r\n          let { dstfloorL, scale } = this.state;\r\n          let canvas = document.getElementById(\"myCanvasdst\");\r\n          let context = canvas.getContext(\"2d\");\r\n          let posX = scale * (i % dstfloorL);\r\n          let posY = scale * parseInt(i / dstfloorL);\r\n          context.fillStyle = color;\r\n          context.fillRect(posX, posY, scale, scale);\r\n        }\r\n      };\r\n    \r\n      find = (key, array) => {\r\n        if (array !== undefined) {\r\n          for (let i = 0; i < array.length; i++) {\r\n            if (parseInt(array[i].node) === key) {\r\n              return i;\r\n            }\r\n          }\r\n        }\r\n        return -1;\r\n      };\r\n    \r\n      find_fl = (key, array) => {\r\n        if (array !== undefined) {\r\n          for (let i = 0; i < array.length; i++) {\r\n            if (\r\n              parseInt(array[i].node) === key &&\r\n              array[i].floor == \"floorconnection\"\r\n            ) {\r\n              return i;\r\n            }\r\n          }\r\n        }\r\n        return -1;\r\n      };\r\n    \r\n      handleSubmit = () => {\r\n        let { srcVal, srcfloor, dstfloor, dstVal,dstfloorL,dstfloorB } = this.state;\r\n        if (srcVal != null && dstVal != null) {\r\n          var divimg = document.getElementById(\"mydiv1\");\r\n          var divcan = document.getElementById(\"mydiv\");\r\n          var len = divimg.childNodes.length;\r\n          for (var i = 0; i < len; i++) {\r\n            var elem = divimg.childNodes[0].remove();\r\n          }\r\n    \r\n          len = divcan.childNodes.length;\r\n          for (var i = 0; i < len; i++) {\r\n            var elem = divcan.childNodes[0].remove();\r\n          }\r\n    \r\n          if (srcfloor === dstfloor) {\r\n            var cvWidth = document.getElementById(\"myCanvassrc\").clientWidth;\r\n            let ratio = cvWidth / dstfloorL;\r\n            let height_of_canvas = ratio * dstfloorB;\r\n            let factor = Math.ceil(parseInt(cvWidth) / dstfloorL);\r\n    \r\n            this.setState({\r\n              samefloor: true,\r\n              scale:factor\r\n            });\r\n            \r\n            var img1 = new Image();\r\n            var img = document.getElementById(\"myImage\");\r\n            img1.src = img.src;\r\n            img1.hidden = true;\r\n            var color_canvas = this.color_canvas;\r\n            var me = this;\r\n            var dest_x = this.state.dstVal % this.state.dstfloorL;\r\n            var dest_y = parseInt(this.state.dstVal / this.state.dstfloorL);\r\n            let imgDiv = document.getElementById(\"myImage\");\r\n            this.imgDiv = imgDiv;\r\n            let angle = 0;\r\n    \r\n      // status of the pointer(s)\r\n      let pointerangle;\r\n    \r\n            var canvas = window.d3.select(\"canvas\").call(\r\n                window.d3\r\n                  .zoom()\r\n                  .scaleExtent([1, 8])\r\n                  .on(\"zoom\", zoom)\r\n              ),\r\n              context = canvas.node().getContext(\"2d\"),\r\n              width = canvas.property(\"width\"),\r\n              height = canvas.property(\"height\");\r\n            var active = window.d3.select(null);\r\n            var zoom1 = window.d3.zoom().on(\"zoom\", zoom);\r\n            var initialTransform = window.d3.zoomIdentity.translate(0, 0).scale(1);\r\n            function zoom() {\r\n              me.setState(\r\n                {\r\n                  animation: false,\r\n                  // pathCaption: [],\r\n                  pathFloor: [],\r\n                  pathArray: [],\r\n                  currentStep: 0,\r\n                  zoom: true\r\n                },\r\n                () => {\r\n                  var transform = window.d3.event.transform;\r\n                  context.save();\r\n                  context.clearRect(0, 0, width, height);\r\n                  context.translate(transform.x, transform.y);\r\n                  context.scale(transform.k, transform.k);\r\n                  draw();\r\n                  context.restore();\r\n                }\r\n              );\r\n            }\r\n            function draw() {\r\n              if (active.node() === this) return reset();\r\n              active.classed(\"active\", false);\r\n              active = window.d3.select(this).classed(\"active\", true);\r\n              var wrh = me.state.dstfloorL / me.state.dstfloorB;\r\n              var newWidth = width;\r\n              var newHeight = newWidth / wrh;\r\n              if (newHeight > height) {\r\n                newHeight = height;\r\n                newWidth = newHeight * wrh;\r\n              }\r\n              context.rotate(angle);\r\n              context.globalAlpha = 0.2;\r\n              context.drawImage(\r\n                img1,\r\n                0,\r\n                0,\r\n                img1.width,\r\n                img1.height,\r\n                0,\r\n                0,\r\n                newWidth,\r\n                newHeight\r\n              );\r\n              // me.loadNonwalkable(\"myCanvassrc\")\r\n              me.callwhile(\r\n                me.state.srcfloor,\r\n                me.state.srcVal,\r\n                me.state.srcfloorL,\r\n                me.state.srcfloorB,\r\n                dest_x,\r\n                dest_y,\r\n                true,\r\n                \"myCanvassrc\"\r\n              );\r\n              color_canvas(srcVal, \"srcmap\", \"red\");\r\n              color_canvas(dstVal, \"srcmap\", \"green\");\r\n            }\r\n    \r\n            function reset() {\r\n              active.classed(\"active\", false);\r\n              active = window.d3.select(null);\r\n              canvas\r\n                .transition()\r\n                .duration(750)\r\n                .call(zoom1.transform, initialTransform);\r\n            }\r\n            function timer(ms) {\r\n              return new Promise(res => setTimeout(res, ms));\r\n            }\r\n    \r\n            function zoomTo() {\r\n              let X = me.croppedRegion.maxX[0] - me.croppedRegion.minX[0];\r\n              let Y = me.croppedRegion.maxY[1] - me.croppedRegion.minY[1];\r\n              var wrh = me.state.dstfloorL / me.state.dstfloorB;\r\n              var newWidth = width;\r\n              var newHeight = newWidth / wrh;\r\n              if (newHeight > height) {\r\n                newHeight = height;\r\n                newWidth = newHeight * wrh;\r\n              }\r\n              let gpx = newWidth / me.state.srcfloorL;\r\n              let gpy = newHeight / me.state.srcfloorB;\r\n              let scale = Math.min(width / (X * gpx), height / (Y * gpy));\r\n              //Zoomed\r\n              let distX =\r\n                width / 2 - me.croppedRegion.minX[0] * gpx - (X / 2) * gpx;\r\n              let distY =\r\n                height / 2 - me.croppedRegion.minY[1] * gpy - (Y / 2) * gpy;\r\n              var transform = window.d3.zoomIdentity.translate(distX, distY);\r\n              // .scale(1.2)\r\n              // .translate(-4*X,-4*Y)\r\n              canvas\r\n                .transition()\r\n                .duration(750)\r\n                .call(zoom1.transform, transform);\r\n            }\r\n            img1.onload = function() {\r\n              draw();\r\n              zoomTo();\r\n            };\r\n          } else {\r\n            this.setState({\r\n              samefloor: false,\r\n              buildingView:true\r\n            });\r\n            this.findpath();\r\n          }\r\n        } else {\r\n        }\r\n      };\r\n    \r\n      loadNonwalkable = () => {\r\n        let { srcVal, srcfloor, dstfloor, dstVal } = this.state;\r\n        let navInfo = this.props.androidNav;\r\n        let floorData = navInfo.filter(r=>{\r\n          return r.floor === srcfloor\r\n        })\r\n        let polygons = floorData[0].properties.clickedPoints;\r\n        for (let i = 0; i < polygons.length; i++) {\r\n          let nodes = polygons[i].split(\",\");\r\n          var start = nodes[0];\r\n          for (let j = 1; j < nodes.length; j++) {\r\n            this.oldpath(start, nodes[j]);\r\n            this.color_canvas(start,\"srcmap\",\"#bdbdbd\");\r\n            start = nodes[j];\r\n          }\r\n          this.color_canvas(nodes[0],\"srcmap\", \"#bdbdbd\");\r\n        }\r\n      }\r\n    \r\n      loadMultiFloorNonwalkable = (id) => {\r\n        let { srcVal, srcfloor, dstfloor, dstVal } = this.state;\r\n        let navInfo = this.props.androidNav;\r\n        let floorData\r\n    \r\n        if(id ===\" canvas0\"){\r\n          floorData = navInfo.filter(r=>{\r\n            return r.floor === srcfloor\r\n          })\r\n        }else{\r\n          floorData = navInfo.filter(r=>{\r\n            return r.floor === dstfloor\r\n          })\r\n        }\r\n    \r\n        let polygons = floorData[0].properties.clickedPoints;\r\n        for (let i = 0; i < polygons.length; i++) {\r\n          let nodes = polygons[i].split(\",\");\r\n          var start = nodes[0];\r\n          for (let j = 1; j < nodes.length; j++) {\r\n            this.oldpathMulti(start, nodes[j],id);\r\n            // this.color_canvas(start,\"srcmap\",\"#bdbdbd\",id);\r\n            start = nodes[j];\r\n          }\r\n          // this.color_canvas(nodes[0],\"srcmap\", \"#bdbdbd\",id);\r\n        }\r\n      }\r\n    \r\n      oldpath = (x, y) => {\r\n        // x = coord_val  y=coord_val in normal\r\n        var a, b, c, d, e, f, g;\r\n        let { dstfloorL } = this.state;\r\n    \r\n        a = parseInt(x / dstfloorL);\r\n        b = x % dstfloorL;\r\n    \r\n        c = parseInt(y / dstfloorL);\r\n        d = y % dstfloorL;\r\n    \r\n        e = Math.floor((a + c) / 2);\r\n        f = Math.floor((b + d) / 2);\r\n        if ((e === a) & (f === b)) {\r\n          g = dstfloorL * c + b;\r\n          this.color_canvas(g,\"srcmap\",\"#bdbdbd\");\r\n        } else if ((e === c) & (f === d)) {\r\n          g = dstfloorL * a + d;\r\n          this.color_canvas(g,\"srcmap\",\"#bdbdbd\");\r\n        } else {\r\n          g = dstfloorL * e + f;\r\n          this.color_canvas(g,\"srcmap\",\"#bdbdbd\");\r\n          this.oldpath(g, x);\r\n          this.oldpath(g, y);\r\n        }\r\n      };\r\n    \r\n      color = (i,color,canvasid)=>{\r\n          let posX,posY,gpx,gpy\r\n          if(canvasid === \"canvas0\"){\r\n            let wrh = this.state.srcfloorL / this.state.srcfloorB;\r\n            let newWidth = this.state.canvasWidth;\r\n            let newHeight = newWidth / wrh;\r\n            if (newHeight > this.state.canvasHeight) {\r\n              newHeight = this.state.canvasHeight;\r\n              newWidth = newHeight * wrh;\r\n            }\r\n      \r\n            gpx = newWidth / this.state.srcfloorL;\r\n            gpy = newHeight / this.state.srcfloorB;\r\n      \r\n            posX = gpx * (i % this.state.srcfloorL);\r\n            posY = gpy * parseInt(i / this.state.srcfloorL);\r\n          }else{\r\n            let wrh = this.state.dstfloorL / this.state.dstfloorB;\r\n            let newWidth = this.state.canvasWidth;\r\n            let newHeight = newWidth / wrh;\r\n            if (newHeight > this.state.canvasHeight) {\r\n              newHeight = this.state.canvasHeight;\r\n              newWidth = newHeight * wrh;\r\n            }\r\n      \r\n            gpx = newWidth / this.state.dstfloorL;\r\n            gpy = newHeight / this.state.dstfloorB;\r\n      \r\n            posX = gpx * (i % this.state.srcfloorL);\r\n            posY = gpy * parseInt(i / this.state.srcfloorL);\r\n          }\r\n    \r\n          let canvas1 = document.getElementById(canvasid);\r\n          let context1 = canvas1.getContext(\"2d\");\r\n          context1.fillStyle = color;\r\n          context1.fillRect(posX, posY, 5, 5);  \r\n      }\r\n    \r\n      oldpathMulti = (x, y,id) => {\r\n        var a, b, c, d, e, f, g;\r\n        let { dstfloorL } = this.state;\r\n    \r\n        a = parseInt(x / dstfloorL);\r\n        b = x % dstfloorL;\r\n    \r\n        c = parseInt(y / dstfloorL);\r\n        d = y % dstfloorL;\r\n    \r\n        e = Math.floor((a + c) / 2);\r\n        f = Math.floor((b + d) / 2);\r\n        if ((e === a) & (f === b)) {\r\n          g = dstfloorL * c + b;\r\n          this.color(g,\"#bdbdbd\",id);\r\n        } else if ((e === c) & (f === d)) {\r\n          g = dstfloorL * a + d;\r\n          this.color(g,\"#bdbdbd\",id);\r\n        } else {\r\n          g = dstfloorL * e + f;\r\n          this.color(g,\"#bdbdbd\",id);\r\n          this.oldpathMulti(g, x,id);\r\n          this.oldpathMulti(g, y,id);\r\n        }\r\n      };\r\n    \r\n      findpath() {\r\n        var srcvert =\r\n          this.state.srcfloor + \",\" + this.state.srcVal + \",\" + \"virtual\";\r\n        var dstvert =\r\n          this.state.dstfloor + \",\" + this.state.dstVal + \",\" + \"virtual\";\r\n        if (this.graph.hasvertex(srcvert)) {\r\n        } else {\r\n          this.graph.addVertex(srcvert);\r\n          let nodes = this.props.navigationInfo;\r\n          this.flrconn = [];\r\n          for (var i = 0; i < nodes.length; i++) {\r\n            if (\r\n              nodes[i].properties.floor == this.state.srcfloor &&\r\n              nodes[i].properties.floorElement === \"FloorConnection\"\r\n            ) {\r\n              var coord = nodes[i].properties.coordinates.split(\",\");\r\n              var vert = nodes[i].properties.floor + \",\" + nodes[i].properties.node;\r\n              this.flrconn.push([coord[0], coord[1], vert]);\r\n            }\r\n          }\r\n          this.callwhile(\r\n            this.state.srcfloor,\r\n            this.state.srcVal,\r\n            this.state.srcfloorL,\r\n            this.state.srcfloorB,\r\n            null,\r\n            null,\r\n            false,\r\n            null\r\n          );\r\n        }\r\n    \r\n        if (this.graph.hasvertex(dstvert)) {\r\n        } else {\r\n          this.graph.addVertex(dstvert);\r\n          let nodes = this.props.navigationInfo;\r\n          this.flrconn = [];\r\n          for (var i = 0; i < nodes.length; i++) {\r\n            if (\r\n              nodes[i].properties.floor === this.state.dstfloor &&\r\n              nodes[i].properties.floorElement == \"FloorConnection\"\r\n            ) {\r\n              var coord = nodes[i].properties.coordinates.split(\",\");\r\n              var vert = nodes[i].properties.floor + \",\" + nodes[i].properties.node;\r\n              this.flrconn.push([coord[0], coord[1], vert]);\r\n            }\r\n          }\r\n          this.callwhile(\r\n            this.state.dstfloor,\r\n            this.state.dstVal,\r\n            this.state.dstfloorL,\r\n            this.state.dstfloorB,\r\n            null,\r\n            null,\r\n            false,\r\n            null\r\n          );\r\n        }\r\n        this.specialcallwhile(\r\n          this.state.srcfloor,\r\n          srcvert,\r\n          this.state.dstfloor,\r\n          dstvert\r\n        );\r\n      }\r\n    \r\n      specialcallwhile(srcfloor, srcvert, dstfloor, dstvert) {\r\n        var min = Number.MAX_VALUE;\r\n        var minleave = null;\r\n        var var_i;\r\n        var notthere;\r\n        let shortestpath = new Map();\r\n        let visited = new Map();\r\n        let minimumcost = new Map();\r\n        let leaves = [];\r\n        var get_keys = this.graph.AdjList.keys();\r\n        for (var i of get_keys) {\r\n          minimumcost.set(i, min);\r\n          visited.set(i, false);\r\n        }\r\n    \r\n        leaves.push(srcvert);\r\n        shortestpath.set(srcvert, [srcvert]);\r\n        minimumcost.set(srcvert, 0);\r\n        this.graph.printGraph();\r\n        while (leaves.length > 0) {\r\n          min = Number.MAX_VALUE;\r\n          for (let i = 0; i < leaves.length; i++) {\r\n            if (min > minimumcost.get(leaves[i])) {\r\n              min = minimumcost.get(leaves[i]);\r\n              minleave = leaves[i];\r\n              var_i = i;\r\n            }\r\n          }\r\n          visited.set(minleave, true);\r\n    \r\n          if (minleave === dstvert) {\r\n            // alert(\" i \"+JSON.stringify(shortestpath.get(dstvert)));\r\n            break;\r\n          }\r\n          leaves.splice(var_i, 1);\r\n          var get_values = this.graph.AdjList.get(minleave);\r\n          var get_dist = this.graph.Adjweights.get(minleave);\r\n          for (var jj = 0; jj < get_values.length; jj++) {\r\n            var j = get_values[jj];\r\n            var l = j.split(\",\");\r\n    \r\n            var neighbour = false;\r\n            if (l.length == 2) {\r\n              neighbour = true;\r\n            } else if (l.length == 3) {\r\n              if (j == dstvert) {\r\n                neighbour = true;\r\n              }\r\n            }\r\n            if (visited.get(j) == false && neighbour) {\r\n              if (minimumcost.get(j) > minimumcost.get(minleave) + get_dist[jj]) {\r\n                minimumcost.set(j, minimumcost.get(minleave) + get_dist[jj]);\r\n                var dum = [];\r\n                dum = shortestpath.get(minleave);\r\n                dum = dum.concat([j]);\r\n                shortestpath.set(j, dum);\r\n                notthere = 1;\r\n                for (var p = 0; p < leaves.length; p++) {\r\n                  if (leaves[p] == j) {\r\n                    notthere = 0;\r\n                  }\r\n                }\r\n                if (notthere == 1) {\r\n                  leaves.push(j);\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n        this.createcanvas(shortestpath.get(dstvert), false);\r\n      }\r\n      createcanvas(list, samefloor) {\r\n        if (samefloor === false) {\r\n          let ans = new Map();\r\n          for (var i = 0; i < list.length; i++) {\r\n            var e = list[i].split(\",\");\r\n    \r\n            if (ans.has(e[0])) {\r\n              ans.get(e[0]).push(e[1]);\r\n            } else {\r\n              ans.set(e[0], [e[1]]);\r\n            }\r\n          }\r\n          var get_keys = ans.keys();\r\n          let clist = [];\r\n          let floorLlist = [];\r\n          var cnt = 0;\r\n          for (var i of get_keys) {\r\n            var ind1 = this.findFloor(i, this.props.flrList);\r\n            var ind = this.findFloor(i, this.grids_all);\r\n            floorLlist.push(this.grids_all[ind].properties.length);\r\n            clist.push({\r\n              id: cnt,\r\n              scale: 10,\r\n              floorL: this.grids_all[ind].properties.length,\r\n              floorB: this.grids_all[ind].properties.breadth,\r\n              fileName: this.grids_all[ind].properties.fileName,\r\n              floor: this.grids_all[ind].properties.floor\r\n            });\r\n            cnt++;\r\n          }\r\n          this.setState({\r\n            canvaslist: clist\r\n          });\r\n          this.callimage(0, ans, cnt, clist, floorLlist);\r\n        }\r\n      }\r\n    \r\n      callmark(ans, floorLlist) {\r\n        var get_keys = ans.keys();\r\n        var cnt = 0;\r\n        for (var i of get_keys) {\r\n          var canvasid = \"canvas\" + cnt;\r\n          var get_val = ans.get(i);\r\n          for (var j of get_val) {\r\n            this.color_canvas_spl(j, canvasid, \"blue\", floorLlist[cnt]);\r\n          }\r\n          cnt++;\r\n        }\r\n      }\r\n    \r\n      callimage(cnt, ans, count, clist, floorLlist) {\r\n        let floorList = [this.state.srcfloor, this.state.dstfloor];\r\n        for (let jj = 0; jj < floorList.length; jj++) {\r\n          for (let ii = 0; ii < clist.length; ii++) {\r\n            if (floorList[jj] === clist[ii].floor) {\r\n              let i = clist[ii].floor;\r\n              let ind = this.findFloor(i, this.props.fList);\r\n              let ratio = this.state.canvasWidth / clist[ii].floorL;\r\n              let height_of_canvas = ratio * clist[ii].floorB;\r\n              let dsp;\r\n              if (clist[ii].floor === this.state.dstfloor) {\r\n                dsp = \"none\";\r\n              } else {\r\n                dsp = \"block\";\r\n              }\r\n              let canvas = window.d3\r\n                .select(\"#mydiv\")\r\n                .append(\"canvas\")\r\n                .attr(\"id\", \"canvas\" + ii)\r\n                .attr(\"style\", `border:1px solid;display:${dsp};`)\r\n                .attr(\"width\", this.state.canvasWidth)\r\n                .attr(\"height\", this.state.canvasHeight)\r\n                .call(\r\n                  window.d3\r\n                    .zoom()\r\n                    .scaleExtent([1, 8])\r\n                    .on(\"zoom\", multiCanvasZoom)\r\n                );\r\n    \r\n              let width = canvas.property(\"width\");\r\n              let height = canvas.property(\"height\");\r\n              let active = window.d3.select(null);\r\n              let zoom1 = window.d3.zoom().on(\"zoom\", multiCanvasZoom);\r\n              let initialTransform = window.d3.zoomIdentity\r\n                .translate(0, 0)\r\n                .scale(1);\r\n              let ctx = canvas.node().getContext(\"2d\");\r\n              let div = document.getElementById(\"mydiv1\");\r\n              let img1 = new Image();\r\n              img1.src = `${config.imgUrl}/${clist[ii].fileName}`;\r\n    \r\n              img1.hidden = true;\r\n              div.appendChild(img1);\r\n              let me = this;\r\n              let get_val = ans.get(i);\r\n              let loaded = false;\r\n              img1.onload = function() {\r\n                multiCanvas();\r\n                zoomTo()\r\n              };\r\n    \r\n              function multiCanvasZoom() {\r\n                me.setState(\r\n                  {\r\n                    zoom: true,\r\n                    // pathCaption: []\r\n                  },\r\n                  () => {\r\n                    var transform = window.d3.event.transform;\r\n                    ctx.save();\r\n                    ctx.clearRect(0, 0, width, height);\r\n                    ctx.translate(transform.x, transform.y);\r\n                    ctx.scale(transform.k, transform.k);\r\n                    loaded = false;\r\n                    multiCanvas();\r\n                    ctx.restore();\r\n                  }\r\n                );\r\n              }\r\n    \r\n              function multiCanvas() {\r\n                if (loaded === false) {\r\n                  var wrh = me.state.dstfloorL / me.state.dstfloorB;\r\n                  var newWidth = width;\r\n                  var newHeight = newWidth / wrh;\r\n                  if (newHeight > height) {\r\n                    newHeight = height;\r\n                    newWidth = newHeight * wrh;\r\n                  }\r\n                  ctx.globalAlpha = 0.2;\r\n    \r\n                  ctx.drawImage(\r\n                    img1,\r\n                    0,\r\n                    0,\r\n                    img1.width,\r\n                    img1.height,\r\n                    0,\r\n                    0,\r\n                    newWidth,\r\n                    newHeight\r\n                  );\r\n                  var id = \"canvas\" + ii;\r\n                  // me.loadMultiFloorNonwalkable(id)\r\n                  var index = me.findFloor(i, me.grids_all);\r\n                  var m = parseInt(me.grids_all[index].properties.length);\r\n                  var n = parseInt(me.grids_all[index].properties.breadth);\r\n                  for (var j = 0; j < get_val.length - 1; j++) {\r\n                    var dest_x = get_val[j + 1] % m;\r\n                    var dest_y = parseInt(get_val[j + 1] / m);\r\n                    me.callwhile(i, get_val[j], m, n, dest_x, dest_y, true, id);\r\n                  }\r\n                  var node_count = 0;\r\n                  for (var j of get_val) {\r\n                    if (ii === count - 1) {\r\n                      if (node_count === get_val.length - 1) {\r\n                        me.color_canvas_spl(j, id, \"green\", floorLlist[ii]);\r\n                      } else {\r\n                        me.color_canvas_spl(j, id, \"yellow\", floorLlist[ii]);\r\n                      }\r\n                    } else {\r\n                      if (node_count === 0 && ii === 0) {\r\n                        me.color_canvas_spl(j, id, \"red\", floorLlist[ii]);\r\n                      } else {\r\n                        me.color_canvas_spl(j, id, \"yellow\", floorLlist[ii]);\r\n                      }\r\n                    }\r\n                    node_count++;\r\n                  }\r\n                  loaded = true;\r\n                }\r\n              }\r\n    \r\n              function zoomTo() {\r\n                let X = me.croppedRegion.maxX[0] - me.croppedRegion.minX[0];\r\n                let Y = me.croppedRegion.maxY[1] - me.croppedRegion.minY[1];\r\n                var wrh = me.state.dstfloorL / me.state.dstfloorB;\r\n                var newWidth = width;\r\n                var newHeight = newWidth / wrh;\r\n                if (newHeight > height) {\r\n                  newHeight = height;\r\n                  newWidth = newHeight * wrh;\r\n                }\r\n                let gpx = newWidth / me.state.srcfloorL;\r\n                let gpy = newHeight / me.state.srcfloorB;\r\n                let scale = Math.min(width / (X * gpx), height / (Y * gpy));\r\n                //Zoomed\r\n                let distX =\r\n                  width / 2 - me.croppedRegion.minX[0] * gpx - (X / 2) * gpx;\r\n                let distY =\r\n                  height / 2 - me.croppedRegion.minY[1] * gpy - (Y / 2) * gpy;\r\n                var transform = window.d3.zoomIdentity.translate(distX, distY);\r\n                // .scale(1.2)\r\n                // .translate(-4*X,-4*Y)\r\n                canvas\r\n                  .transition()\r\n                  .duration(750)\r\n                  .call(zoom1.transform, transform);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    \r\n      callwhile(srcfloor, srcVal, m, n, dest_x, dest_y, single, canvasid) {\r\n        var min = Number.MAX_VALUE;\r\n        var minleave = [];\r\n        var var_i;\r\n        var notthere;\r\n        for (let i = 0; i < m; i++) {\r\n          var row = [],\r\n            row1 = [],\r\n            row3 = [],\r\n            row4 = [];\r\n          for (let j = 0; j < n; j++) {\r\n            row.push(1);\r\n            row1.push(-1);\r\n            row3.push(Number.MAX_VALUE);\r\n            var row5 = [];\r\n            row4.push(row5);\r\n          }\r\n          this.shortestpath.push(row4);\r\n          this.grids.push(row);\r\n          this.visited.push(row1);\r\n          this.minimumcost.push(row3);\r\n        }\r\n        var ind1 = this.findFloor(srcfloor, this.grids_all);\r\n        if (ind1 !== -1 && this.grids_all[ind1].properties.grid_1 != null) {\r\n          for (let i = 0; i < this.grids_all[ind1].properties.grid_1.length; i++) {\r\n            var nodes = this.grids_all[ind1].properties.grid_1[i].split(\",\");\r\n            for (let j = 0; j < nodes.length; j++) {\r\n              var val = nodes[j];\r\n              var x = val % m;\r\n              var y = parseInt(val / m);\r\n              this.grids[x][y] = 0;\r\n            }\r\n          }\r\n        }\r\n        var src_x = srcVal % m;\r\n        var src_y = parseInt(srcVal / m);\r\n        this.leaves.push([src_x, src_y]);\r\n        this.shortestpath[src_x][src_y].push([src_x, src_y]);\r\n        this.minimumcost[src_x][src_y] = 0;\r\n    \r\n        while (this.leaves.length > 0) {\r\n          min = Number.MAX_VALUE;\r\n          for (let i = 0; i < this.leaves.length; i++) {\r\n            if (min > this.minimumcost[this.leaves[i][0]][this.leaves[i][1]]) {\r\n              min = this.minimumcost[this.leaves[i][0]][this.leaves[i][1]];\r\n              minleave = this.leaves[i];\r\n              var_i = i;\r\n            }\r\n          }\r\n          this.visited[minleave[0]][minleave[1]] = 1;\r\n          if (single == true) {\r\n            if (minleave[0] == dest_x && minleave[1] == dest_y) {\r\n              break;\r\n            }\r\n          } else {\r\n            var check = true;\r\n            for (var ch = 0; ch < parseInt(this.flrconn.length); ch++) {\r\n              if (\r\n                this.visited[parseInt(this.flrconn[ch][0])][\r\n                  parseInt(this.flrconn[ch][1])\r\n                ] == 1\r\n              ) {\r\n              } else {\r\n                check = false;\r\n              }\r\n            }\r\n            if (check == true) {\r\n              for (var ch = 0; ch < parseInt(this.flrconn.length); ch++) {\r\n                var vert = srcfloor + \",\" + srcVal + \",\" + \"virtual\";\r\n                this.graph.addEdge(\r\n                  vert,\r\n                  this.flrconn[ch][2],\r\n                  this.minimumcost[parseInt(this.flrconn[ch][0])][\r\n                    parseInt(this.flrconn[ch][1])\r\n                  ],\r\n                  true\r\n                );\r\n              }\r\n              this.reset_var();\r\n              break;\r\n            }\r\n          }\r\n          this.leaves.splice(var_i, 1);\r\n          for (var j = minleave[0] - 1; j <= minleave[0] + 1; j++) {\r\n            for (var k = minleave[1] - 1; k <= minleave[1] + 1; k++) {\r\n              if (j >= 0 && j < m && k >= 0 && k < n) {\r\n                if (this.visited[j][k] == -1 && this.grids[j][k] == 1) {\r\n                  if (\r\n                    this.minimumcost[j][k] >\r\n                    this.minimumcost[minleave[0]][minleave[1]] +\r\n                      Math.sqrt(\r\n                        (minleave[0] - j) * (minleave[0] - j) +\r\n                          (minleave[1] - k) * (minleave[1] - k)\r\n                      )\r\n                  ) {\r\n                    this.minimumcost[j][k] =\r\n                      this.minimumcost[minleave[0]][minleave[1]] +\r\n                      Math.sqrt(\r\n                        (minleave[0] - j) * (minleave[0] - j) +\r\n                          (minleave[1] - k) * (minleave[1] - k)\r\n                      );\r\n                    this.shortestpath[j][k] = this.shortestpath[minleave[0]][\r\n                      minleave[1]\r\n                    ].concat([[j, k]]);\r\n                    notthere = 1;\r\n                    for (var p = 0; p < this.leaves.length; p++) {\r\n                      if (this.leaves[p][0] == j && this.leaves[p][1] == k) {\r\n                        notthere = 0;\r\n                      }\r\n                    }\r\n                    if (notthere == 1) {\r\n                      this.leaves.push([j, k]);\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n        if (single == true) {\r\n          let { scale } = this.state;\r\n    \r\n          var wrh = this.state.dstfloorL / this.state.dstfloorB;\r\n          var newWidth = this.state.canvasWidth;\r\n          var newHeight = newWidth / wrh;\r\n          if (newHeight > this.state.canvasHeight) {\r\n            newHeight = this.state.canvasHeight;\r\n            newWidth = newHeight * wrh;\r\n          }\r\n          let gpx,gpy;\r\n          if(canvasid === \"canvas0\"){\r\n            gpx = newWidth / this.state.srcfloorL;\r\n            gpy = newHeight / this.state.srcfloorB;  \r\n          }else{\r\n            gpx = newWidth / this.state.dstfloorL;\r\n            gpy = newHeight / this.state.dstfloorB;\r\n          }\r\n    \r\n          var canvas = document.getElementById(canvasid);\r\n          var context = canvas.getContext(\"2d\");\r\n    \r\n          if (canvas !== null) {\r\n            var context = canvas.getContext(\"2d\");\r\n          }\r\n    \r\n          let sp = this.shortestpath[dest_x][dest_y];\r\n    \r\n          let mypoints = sp.map(r => {\r\n            return { x: r[0], y: r[1] };\r\n          });\r\n          var refinedpaths = this.simplifyPath(mypoints, 2);\r\n          let allElements = this.props.navigationInfo;\r\n          let allNodes = [];\r\n          for (let i = 0; i < allElements.length; i++) {\r\n            allNodes.push(allElements[i].properties);\r\n          }\r\n          // if (\r\n          //   this.state.srcBuildingLocation.venueName ===\r\n          //     this.state.dstBuildingLocation.venueName &&\r\n          //   this.state.srcBuildingLocation.buildingName ===\r\n          //     this.state.dstBuildingLocation.buildingName\r\n          // ) {\r\n    \r\n            // if (this.state.zoom === false) {\r\n              if(canvasid === \"canvas0\" || \"myCanvassrc\"){\r\n                this.findInstructions(sp, refinedpaths, allElements, srcfloor);\r\n              }else{\r\n                this.findInstructions(sp, refinedpaths, allElements, this.state.dstfloor);\r\n              }\r\n            // }\r\n            // this.findInstructions(sp, refinedpaths, allNodes, srcfloor);\r\n          // } else if (this.state.dstBuildingLocation) {\r\n          //   this.findInstructions(sp, refinedpaths, allNodes, srcfloor);\r\n          // }\r\n          \r\n          var rowX = this.shortestpath[dest_x][dest_y].map(function(row, i) {\r\n            return { x: row[0], index: i };\r\n          });\r\n          var rowY = this.shortestpath[dest_x][dest_y].map(function(row, i) {\r\n            return { y: row[1], index: i };\r\n          });\r\n          let minRowX = rowX.reduce((prev, current) =>\r\n            prev.x < current.x ? prev : current\r\n          );\r\n          let maxRowX = rowX.reduce((prev, current) =>\r\n            prev.x > current.x ? prev : current\r\n          );\r\n          let minRowY = rowY.reduce((prev, current) =>\r\n            prev.y < current.y ? prev : current\r\n          );\r\n          let maxRowY = rowY.reduce((prev, current) =>\r\n            prev.y > current.y ? prev : current\r\n          );\r\n    \r\n          this.croppedRegion = {\r\n            minX: [minRowX.x, rowY[minRowX.index].y],\r\n            maxX: [maxRowX.x, rowY[maxRowX.index].y],\r\n            minY: [rowX[minRowY.index].x, minRowY.y],\r\n            maxY: [rowX[maxRowY.index].x, maxRowY.y]\r\n          };\r\n          // var max = Math.max.apply(null, maxRow);\r\n          this.setState({\r\n            pathPoints:this.shortestpath[dest_x][dest_y]\r\n          })    \r\n          for (var i = 0; i < this.shortestpath[dest_x][dest_y].length; i = i + 4) {\r\n            context.globalAlpha = 1;\r\n            context.beginPath();\r\n            var half_scale = scale / 2;\r\n            var pos_x = gpx * this.shortestpath[dest_x][dest_y][i][0];\r\n            var pos_y = gpy * this.shortestpath[dest_x][dest_y][i][1];\r\n            pos_x = pos_x + half_scale;\r\n            pos_y = pos_y + half_scale;\r\n            context.arc(pos_x, pos_y, scale, 0, 2 * Math.PI);\r\n            context.fill();\r\n            context.fillStyle = \"#2d9cdb\";\r\n            context.strokeStyle = \"#2d9cdb\";\r\n            context.stroke();\r\n          }\r\n          this.reset_var();\r\n        }\r\n      }\r\n    \r\n      interpolatePath = (turningPointsPath, seperationGap, gpx, gpy) => {\r\n        let resultpath = [];\r\n        if (turningPointsPath.length === 1) {\r\n          resultpath.push(turningPointsPath.x * gpx, turningPointsPath.x * gpx);\r\n          return resultpath;\r\n        }\r\n        for (let i = 0; i < turningPointsPath.length - 1; i++) {\r\n          let points = this.interpolatePoints(\r\n            turningPointsPath[i],\r\n            turningPointsPath[i + 1],\r\n            seperationGap,\r\n            gpx,\r\n            gpy\r\n          );\r\n          for (let k = 0; k < points.length; k++) {\r\n            resultpath.push(points[k]);\r\n          }\r\n          // resultpath.push(this.interpolatePoints(turningPointsPath[i],turningPointsPath[i+1], seperationGap, gpx, gpy));\r\n        }\r\n        return resultpath;\r\n      };\r\n    \r\n      interpolatePoints(p1, p2, seperationGap, gpx, gpy) {\r\n        let d = Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));\r\n        let result = [];\r\n        result.push({ x: parseInt(p1.x), y: parseInt(p1.y) });\r\n        let counter = seperationGap;\r\n        while (counter < d) {\r\n          let x = p1.x + (counter / d) * (p2.x - p1.x);\r\n          let y = p1.y + (counter / d) * (p2.y - p1.y);\r\n          result.push({ x: parseInt(x), y: parseInt(y) });\r\n          counter += 1 * seperationGap;\r\n        }\r\n        return result;\r\n      }\r\n    \r\n      simplifyPath = (points, tolerance) => {\r\n        // helper classes\r\n        var Vector = function(x, y) {\r\n          this.x = x;\r\n          this.y = y;\r\n        };\r\n        var Line = function(p1, p2) {\r\n          this.p1 = p1;\r\n          this.p2 = p2;\r\n          this.distanceToPoint = function(point) {\r\n            // slope\r\n            var m = (this.p2.y - this.p1.y) / (this.p2.x - this.p1.x),\r\n              // y offset\r\n              b = this.p1.y - m * this.p1.x,\r\n              d = [];\r\n            // distance to the linear equation\r\n            d.push(\r\n              Math.abs(point.y - m * point.x - b) / Math.sqrt(Math.pow(m, 2) + 1)\r\n            );\r\n            // distance to p1\r\n            d.push(\r\n              Math.sqrt(\r\n                Math.pow(point.x - this.p1.x, 2) + Math.pow(point.y - this.p1.y, 2)\r\n              )\r\n            );\r\n            // distance to p2\r\n            d.push(\r\n              Math.sqrt(\r\n                Math.pow(point.x - this.p2.x, 2) + Math.pow(point.y - this.p2.y, 2)\r\n              )\r\n            );\r\n            // return the smallest distance\r\n            return d.sort(function(a, b) {\r\n              return a - b; //causes an array to be sorted numerically and ascending\r\n            })[0];\r\n          };\r\n        };\r\n    \r\n        var douglasPeucker = function(points, tolerance) {\r\n          if (points.length <= 2) {\r\n            return [points[0]];\r\n          }\r\n          var returnPoints = [],\r\n            // make line from start to end\r\n            line = new Line(points[0], points[points.length - 1]),\r\n            // find the largest distance from intermediate poitns to this line\r\n            maxDistance = 0,\r\n            maxDistanceIndex = 0,\r\n            p;\r\n          for (var i = 1; i <= points.length - 2; i++) {\r\n            var distance = line.distanceToPoint(points[i]);\r\n            if (distance > maxDistance) {\r\n              maxDistance = distance;\r\n              maxDistanceIndex = i;\r\n            }\r\n          }\r\n          // check if the max distance is greater than our tollerance allows\r\n          if (maxDistance >= tolerance) {\r\n            p = points[maxDistanceIndex];\r\n            line.distanceToPoint(p, true);\r\n            // include this point in the output\r\n            returnPoints = returnPoints.concat(\r\n              douglasPeucker(points.slice(0, maxDistanceIndex + 1), tolerance)\r\n            );\r\n            // returnPoints.push( points[maxDistanceIndex] );\r\n            returnPoints = returnPoints.concat(\r\n              douglasPeucker(\r\n                points.slice(maxDistanceIndex, points.length),\r\n                tolerance\r\n              )\r\n            );\r\n          } else {\r\n            // ditching this point\r\n            p = points[maxDistanceIndex];\r\n            line.distanceToPoint(p, true);\r\n            returnPoints = [points[0]];\r\n          }\r\n          return returnPoints;\r\n        };\r\n        var arr = douglasPeucker(points, tolerance);\r\n        // always have to push the very last point on so it doesn't get left off\r\n        arr.push(points[points.length - 1]);\r\n        return arr;\r\n      };\r\n    \r\n      find_angle = (p0, p1, c) => {\r\n        var p0c = { x: c.x - p0.x, y: c.y - p0.y }; // p0->c (b)\r\n        var cp1 = { x: p1.x - c.x, y: p1.y - c.y }; // p1->c (a)\r\n        return (\r\n          (Math.atan2(\r\n            cp1.y * p0c.x - cp1.x * p0c.y,\r\n            p0c.x * cp1.x + p0c.y * cp1.y\r\n          ) *\r\n            180) /\r\n          Math.PI\r\n        );\r\n      };\r\n    \r\n      //Module for finding the direction's equivalent commands\r\n    \r\n      findDirectionword = angle => {\r\n        if (angle >= 75 && angle <= 105) return \"Turn Right\";\r\n    \r\n        if (angle <= -75 && angle >= -105) return \"Turn Left\";\r\n    \r\n        if ((angle >= 165 && angle <= 180) || (angle <= -165 && angle >= -180))\r\n          return \"Go Straight\";\r\n        if (angle < 0) {\r\n          if (Math.round((360 + angle) / 30) === 9) {\r\n            return \"Turn Left\";\r\n          }\r\n          return \"Turn \" + Math.round((360 + angle) / 30) + \" O' Clock\";\r\n        }\r\n    \r\n        if (Math.floor(angle / 30) === 3) return \"Turn Right\";\r\n        return \"Turn \" + Math.round(angle / 30) + \" O' Clock\";\r\n      };\r\n    \r\n      // find the error component in the iteration and leaves it for the next iteration\r\n      findErrorInAngle = angle => {\r\n        if (angle < 0) return 360 + angle - Math.round((360 + angle) / 30) * 30;\r\n        return angle - Math.round(angle / 30) * 30;\r\n      };\r\n      //same as above but in abbreviated form\r\n    \r\n      findDirectionAbbreviation = angle => {\r\n        if (angle > 0) return \"Right\";\r\n    \r\n        return \"Left\";\r\n      };\r\n    \r\n      findInstructions = (nonRefinedPoints, refinedPoints, mapElements, floor) => {\r\n        //length of refined and non refined paths\r\n        var nRefined = refinedPoints.length;\r\n        var nNonRefined = nonRefinedPoints.length;\r\n        //converting the mapElements to ordered map for ease of access\r\n        var ElementMap = new Map();\r\n        var includedSet = new Set();\r\n        var word;\r\n        //for iteration purpose\r\n        var currentNRPoint = 0;\r\n        var currentRPoint = 0;\r\n        var flagList = [];\r\n        var i = 0;\r\n        var j = 0;\r\n        //radius defines what range to cover in a path\r\n        var radius = 3;\r\n    \r\n        //adding the elements to map\r\n        for (i = 0; i < mapElements.length; i++) {\r\n          let props = mapElements[i].properties;\r\n          if (props.floorElement === \"Rooms\") {\r\n            if (\r\n              props.floor === floor &&\r\n              props.roomName !== \"undefined\" &&\r\n              props.coordinates !== undefined\r\n            ){\r\n              Object.keys(props).map(id => {\r\n                if(id === 'roomName'){\r\n                  props[`name`] = [...props[id]].join('');\r\n                  delete props[id];  \r\n                }\r\n              });\r\n    \r\n              ElementMap.set(props.coordinates.replace(\",\", \"@\"), mapElements[i].properties);\r\n            }\r\n          } else if (props.floorElement === \"FloorConnection\") {\r\n            if (\r\n              props.floor === floor &&\r\n              props.name !== \"undefined\" &&\r\n              props.coordinates !== undefined\r\n            ){\r\n              ElementMap.set(props.coordinates.replace(\",\", \"@\"), props);\r\n            }\r\n          } else if (props.floorElement === \"Services\") {\r\n            if (\r\n              props.floor === floor &&\r\n              props.name !== \"undefined\" &&\r\n              props.coordinates !== undefined\r\n            )\r\n              ElementMap.set(props.coordinates.replace(\",\", \"@\"), mapElements[i].properties);\r\n          } else if (props.floorElement === \"RestRooms\") {\r\n            if (\r\n              props.floor === floor &&\r\n              props.name !== \"undefined\" &&\r\n              props.coordinates !== undefined\r\n            )\r\n              ElementMap.set(props.coordinates.replace(\",\", \"@\"), mapElements[i].properties);\r\n          } else {\r\n          }\r\n        }\r\n        //finding the indices of the\r\n        while (currentNRPoint < nNonRefined && currentRPoint < nRefined) {\r\n          if (\r\n            nonRefinedPoints[currentNRPoint][0] ===\r\n              refinedPoints[currentRPoint].x &&\r\n            nonRefinedPoints[currentNRPoint][1] === refinedPoints[currentRPoint].y\r\n          ) {\r\n            flagList.push(currentNRPoint);\r\n            currentRPoint++;\r\n          }\r\n          currentNRPoint++;\r\n        }\r\n    \r\n        // Generating the direction and elaborated results\r\n        var DirectionResults = [];\r\n        var ElaboratedResults = [];\r\n    \r\n        //entry point insertion to the list\r\n        DirectionResults.push(\r\n          \"You are at \" +\r\n            ElementMap.get(\"\" + refinedPoints[0].x + \"@\" + refinedPoints[0].y)\r\n              .name\r\n        );\r\n        ElaboratedResults.push(\r\n          \"You are at \" +\r\n            ElementMap.get(\"\" + refinedPoints[0].x + \"@\" + refinedPoints[0].y)\r\n              .name\r\n        );\r\n        includedSet.add(refinedPoints[0].x + \"@\" + refinedPoints[0].y);\r\n        includedSet.add(\r\n          refinedPoints[nRefined - 1].x + \"@\" + refinedPoints[nRefined - 1].y\r\n        );\r\n        //iterate and /finding the desired results\r\n        var error = 0;\r\n        for (currentRPoint = 0; currentRPoint < nRefined - 1; currentRPoint++) {\r\n          var angle = 0;\r\n          var coordinates;\r\n          // this.actualAngle = 155\r\n          if (currentRPoint === 0) {\r\n            angle = this.find_angle(\r\n              {\r\n                x: refinedPoints[currentRPoint].x,\r\n                y: refinedPoints[currentRPoint].y + 1\r\n              },\r\n              refinedPoints[currentRPoint + 1],\r\n              refinedPoints[currentRPoint]\r\n            );\r\n            let path_angle = angle;\r\n            let floorangle = this.state.floorAngle;\r\n            let diff = 360 - floorangle;\r\n            // let CurrentDirection = 60;\r\n            let CurrentDirection = this.actualAngle;\r\n            // rotateDirection\r\n            this.setState({\r\n              pathAngle:path_angle\r\n            })\r\n    \r\n            let gn = this.calculatePath(path_angle, diff, CurrentDirection);\r\n    \r\n            angle = gn;\r\n\r\n          } else\r\n            angle = this.find_angle(\r\n              refinedPoints[currentRPoint - 1],\r\n              refinedPoints[currentRPoint + 1],\r\n              refinedPoints[currentRPoint]\r\n            );\r\n          angle = angle + error;\r\n    \r\n          error = this.findErrorInAngle(angle);\r\n          if (currentRPoint == nRefined - 2) {\r\n            word = this.findDirectionword(angle);\r\n            DirectionResults.push(word);\r\n            DirectionResults.push(\r\n              \"Move \" +\r\n                Math.round(\r\n                  0.6 * (flagList[currentRPoint + 1] - flagList[currentRPoint])\r\n                ) +\r\n                \" steps forward\"\r\n            );\r\n            ElaboratedResults.push(word);\r\n            ElaboratedResults.push(\r\n              \"Move \" +\r\n                Math.round(\r\n                  0.6 * (flagList[currentRPoint + 1] - flagList[currentRPoint])\r\n                ) +\r\n                \" steps forward\"\r\n            );\r\n            DirectionResults.push(\r\n              \"You are about to reach:\" +\r\n                ElementMap.get(\r\n                  refinedPoints[nRefined - 1].x +\r\n                    \"@\" +\r\n                    refinedPoints[nRefined - 1].y\r\n                ).name +\r\n                \" on your \" +\r\n                this.findDirectionAbbreviation(angle)\r\n            );\r\n            ElaboratedResults.push(\r\n              \"You are about to reach:\" +\r\n                ElementMap.get(\r\n                  refinedPoints[nRefined - 1].x +\r\n                    \"@\" +\r\n                    refinedPoints[nRefined - 1].y\r\n                ).name +\r\n                \" on your \" +\r\n                this.findDirectionAbbreviation(angle)\r\n            );\r\n            break;\r\n          }\r\n          word = this.findDirectionword(angle);\r\n          DirectionResults.push(word);\r\n          DirectionResults.push(\r\n            \"Move \" +\r\n              Math.round(\r\n                0.6 * (flagList[currentRPoint + 1] - flagList[currentRPoint])\r\n              ) +\r\n              \" steps forward\"\r\n          );\r\n          ElaboratedResults.push(word);\r\n          ElaboratedResults.push(\r\n            \"Move \" +\r\n              Math.round(\r\n                0.6 * (flagList[currentRPoint + 1] - flagList[currentRPoint])\r\n              ) +\r\n              \" steps forward\"\r\n          );\r\n    \r\n          //this part of code handles the intermediate importatnt rooms\r\n          var begin = flagList[currentRPoint] + 1;\r\n          var end = flagList[currentRPoint + 1];\r\n    \r\n          while (begin < end) {\r\n            var currpoint = nonRefinedPoints[begin];\r\n            for (\r\n              i = Math.max(0, currpoint[0] - radius);\r\n              i < currpoint[0] + radius;\r\n              i++\r\n            ) {\r\n              for (\r\n                j = Math.max(0, currpoint[1] - radius);\r\n                j < currpoint[1] + radius;\r\n                j++\r\n              ) {\r\n                if (!includedSet.has(i + \"@\" + j) && ElementMap.has(i + \"@\" + j)) {\r\n                  var tempAngle = this.find_angle(\r\n                    {\r\n                      x: nonRefinedPoints[begin - 1][0],\r\n                      y: nonRefinedPoints[begin - 1][1]\r\n                    },\r\n                    { x: i, y: j },\r\n                    { x: nonRefinedPoints[begin][0], y: nonRefinedPoints[begin][1] }\r\n                  );\r\n                  ElaboratedResults.push(\r\n                    ElementMap.get(i + \"@\" + j).roomName +\r\n                      \" on your \" +\r\n                      this.findDirectionAbbreviation(tempAngle)\r\n                  );\r\n                  includedSet.add(i + \"@\" + j);\r\n                }\r\n              }\r\n            }\r\n            begin++;\r\n          }\r\n        }\r\n    \r\n        DirectionResults.push(\r\n          \"You will reach \" +\r\n            ElementMap.get(\r\n              \"\" +\r\n                refinedPoints[nRefined - 1].x +\r\n                \"@\" +\r\n                refinedPoints[nRefined - 1].y\r\n            ).name\r\n        );\r\n        // \"You have reached \" +\r\n        //   ElementMap.get(\r\n        //     \"\" +\r\n        //       refinedPoints[nRefined - 1].x +\r\n        //       \"@\" +\r\n        //       refinedPoints[nRefined - 1].y\r\n        //   ).roomName\r\n    \r\n        ElaboratedResults.push(\r\n          \"You have reached \" +\r\n            ElementMap.get(\r\n              \"\" +\r\n                refinedPoints[nRefined - 1].x +\r\n                \"@\" +\r\n                refinedPoints[nRefined - 1].y\r\n            ).name\r\n        );\r\n        let resultMap = DirectionResults.map(r => {\r\n          return { instruction: r, floor: floor };\r\n        });\r\n        resultMap.forEach(element => {\r\n          this.setState(prevState => ({\r\n            pathFloor: [...prevState.pathFloor, element]\r\n          }));\r\n        });\r\n        let step = DirectionResults[0];\r\n        if(this.state.srcfloor === this.state.dstfloor){\r\n          if(this.state.zoom === false){\r\n          this.setState(\r\n            prevState => ({\r\n              pathArray: [...prevState.pathArray, DirectionResults],\r\n              srtdFlr: [...prevState.srtdFlr, floor],\r\n              instructionReady:true\r\n    \r\n            }),\r\n            () => {\r\n              let flrArry = [this.state.srcfloor, this.state.dstfloor];\r\n              if (this.state.pathArray.length === 2) {\r\n                for (let k = 0; k < flrArry.length; k++) {\r\n                  if (this.state.srtdFlr[k] === flrArry[k]) {\r\n                    const merge3 = this.state.pathArray.flat(1);\r\n                    this.setState({\r\n                      pathCaption: merge3\r\n                    });\r\n                  }\r\n                }\r\n              } else {\r\n                for (let k = 0; k < DirectionResults.length; k++) {\r\n                  this.setState(prevState => ({\r\n                    pathCaption: [...prevState.pathCaption, DirectionResults[k]]\r\n                  }));\r\n                }\r\n              }\r\n            }\r\n          );\r\n        }\r\n    \r\n        }else{\r\n            if(this.state.srcfloor === floor){\r\n              this.setState({\r\n                firstFlrInstruction:DirectionResults,\r\n                firstFlr:floor,\r\n                currentFloor:floor,\r\n                // instructionReady:true\r\n              })\r\n            }else{\r\n              this.setState({\r\n                secondFlrInstruction:DirectionResults,\r\n                secondFlr:floor,\r\n                instructionReady:true\r\n              })\r\n            }\r\n        }\r\n          \r\n      };\r\n    \r\n      calculatePath = (path_angle, diff, CurrentDirection) => {\r\n        let pathGN, rotateDirection, path_angleN;\r\n        if (path_angle >= 0 && path_angle < 106) {\r\n          pathGN = 360 - (diff - path_angle);\r\n          rotateDirection = pathGN - CurrentDirection;\r\n        } else if (path_angle > 105 && path_angle <= 180) {\r\n          pathGN = path_angle - diff;\r\n          rotateDirection = pathGN - CurrentDirection;\r\n        } else if (path_angle <= -1 && path_angle >= -180) {\r\n          path_angleN = 180 + path_angle;\r\n          pathGN = path_angleN + 180 - diff;\r\n          rotateDirection = pathGN - CurrentDirection;\r\n        }\r\n        return rotateDirection;\r\n      };\r\n    \r\n      reset_var() {\r\n        this.grids = [];\r\n        this.visited = [];\r\n        this.shortestpath = [];\r\n        this.minimumcost = [];\r\n        this.leaves = [];\r\n      }\r\n    \r\n      /* NAVIGATION DRAWER */\r\n      drawerToggleClickHandler = () => {\r\n        this.setState(prevState => {\r\n          return { sideDrawerOpen: !prevState.sideDrawerOpen };\r\n        });\r\n      };\r\n    \r\n      backdropClickHandler = () => {\r\n        this.setState({ sideDrawerOpen: false });\r\n      };\r\n      incCanvas = () => {\r\n        let { scale } = this.state;\r\n        if (scale < 30) {\r\n          this.setState(\r\n            {\r\n              scale: scale + 1\r\n            },\r\n            () => {\r\n              this.handleSubmit();\r\n            }\r\n          );\r\n        }\r\n      };\r\n      decCanvas = () => {\r\n        let { scale } = this.state;\r\n        if (scale > 2) {\r\n          this.setState(\r\n            {\r\n              scale: scale - 1\r\n            },\r\n            () => {\r\n              this.handleSubmit();\r\n            }\r\n          );\r\n        }\r\n      };\r\n    \r\n      handleDstChange = e => {\r\n        let name = null;\r\n        let val = null;\r\n        let floor = null;\r\n        let resp = \"\";\r\n        let navInfo = this.props.navigationInfo;\r\n        if (e.length > 0) {\r\n          for (let i = 0; i < navInfo.length; i++) {\r\n            if (e[0].floorElement === \"Rooms\") {\r\n              resp = `${e[0].roomName}(${e[0].floor})`;\r\n              if (e[0].node === navInfo[i].properties.node) {\r\n                name = navInfo[i].properties.roomName;\r\n                floor = navInfo[i].properties.floor;\r\n                val = navInfo[i].properties.node;\r\n              }\r\n            } else if (e[0].floorElement === \"FloorConnection\") {\r\n              if (e[0].node === navInfo[i].properties.node) {\r\n                name = navInfo[i].properties.name;\r\n                floor = navInfo[i].properties.floor;\r\n                val = navInfo[i].properties.node;\r\n              }\r\n              resp = `${e[0].name}(${e[0].floor})`;\r\n            } else if (e[0].floorElement === \"Services\") {\r\n              if (e[0].node === navInfo[i].properties.node) {\r\n                name = navInfo[i].properties.type;\r\n                floor = navInfo[i].properties.floor;\r\n                val = navInfo[i].properties.node;\r\n              }\r\n              resp = `${e[0].type}(${e[0].floor})`;\r\n            } else if (e[0].floorElement === \"RestRooms\") {\r\n              if (e[0].node === navInfo[i].properties.node) {\r\n                name = navInfo[i].properties.type;\r\n                floor = navInfo[i].properties.floor;\r\n                val = navInfo[i].properties.node;\r\n              }\r\n              resp = `${e[0].type} Washroom (${e[0].floor})`;\r\n            } else {\r\n            }\r\n          }\r\n          var ind = this.findFloor(floor, this.props.flrList.data);\r\n          this.setState(\r\n            {\r\n              dstName: name,\r\n              dstfloor: floor,\r\n              dstVal: parseInt(val),\r\n              dstfloorL: this.props.flrList.data[ind].floorL,\r\n              dstfloorB: this.props.flrList.data[ind].floorB,\r\n              imgName: this.props.flrList.data[ind].fileName,\r\n              buildingView: true,\r\n              showDstMenu: false,\r\n              dstReadOnly: true,\r\n              pathCaption: [],\r\n              selectedLocation: `${name},${floor} floor, ${this.state.dstBuildingLocation.buildingName}, ${this.state.dstBuildingLocation.venueName}`\r\n            },\r\n            () => {\r\n              this.handleSubmit();\r\n            }\r\n          );\r\n        }\r\n      };\r\n    \r\n      dstChange = e => {\r\n        let name = null;\r\n        let val = null;\r\n        let floor = null;\r\n        let resp = \"\";\r\n        let navInfo = this.props.navigationInfo;\r\n        for (let i = 0; i < navInfo.length; i++) {\r\n          if (e.floorElement === \"Rooms\") {\r\n            resp = `${e.roomName}(${e.floor})`;\r\n            if (e.node === navInfo[i].properties.node) {\r\n              name = navInfo[i].properties.roomName;\r\n              floor = e[0].floor;\r\n              val = navInfo[i].properties.node;\r\n            }\r\n          } else if (e.floorElement === \"FloorConnection\") {\r\n            if (e.node === navInfo[i].properties.node) {\r\n              name = navInfo[i].properties.name;\r\n              floor = e[0].floor;\r\n              val = navInfo[i].properties.node;\r\n            }\r\n            resp = `${e.name}(${e.floor})`;\r\n          } else if (e.floorElement === \"Services\") {\r\n            if (e.node === navInfo[i].properties.node) {\r\n              name = navInfo[i].properties.type;\r\n              floor = e[0].floor;\r\n              val = navInfo[i].properties.node;\r\n            }\r\n            resp = `${e.type}(${e.floor})`;\r\n          } else if (e.floorElement === \"RestRooms\") {\r\n            if (e.node === navInfo[i].properties.node) {\r\n              name = navInfo[i].properties.type;\r\n              floor = e[0].floor;\r\n              val = navInfo[i].properties.node;\r\n            }\r\n            resp = `${e.type} Washroom (${e.floor})`;\r\n          } else {\r\n          }\r\n        }\r\n        var ind = this.findFloor(floor, this.props.flrList.data);\r\n        this.setState(\r\n          {\r\n            dstName: name,\r\n            dstfloor: floor,\r\n            dstVal: parseInt(val),\r\n            dstfloorL: this.props.flrList.data[ind].floorL,\r\n            dstfloorB: this.props.flrList.data[ind].floorB,\r\n            imgName: this.props.flrList.data[ind].fileName\r\n          },\r\n          () => {\r\n            this.handleSubmit();\r\n          }\r\n        );\r\n      };\r\n    \r\n      handleSrcChange = e => {\r\n        let { srcBuildingLocation } = this.state;\r\n        let name = null;\r\n        let val = null;\r\n        let floor = null;\r\n        let resp = \"\";\r\n        let navInfo = this.props.navigationInfo;\r\n        for (let i = 0; i < navInfo.length; i++) {\r\n          if (e[0].floorElement === \"Rooms\") {\r\n            resp = `${e[0].roomName}(${e[0].floor})`;\r\n            if (e[0].node === navInfo[i].properties.node) {\r\n    \r\n              name = navInfo[i].properties.roomName?navInfo[i].properties.roomName:navInfo[i].properties.name;\r\n              floor = e[0].floor;\r\n              val = navInfo[i].properties.node;\r\n            }\r\n          } else if (e[0].floorElement === \"FloorConnection\") {\r\n            if (e[0].node === navInfo[i].properties.node) {\r\n              name = navInfo[i].properties.name;\r\n              floor = e[0].floor;\r\n              val = navInfo[i].properties.node;\r\n            }\r\n            resp = `${e[0].name}(${e[0].floor})`;\r\n          } else if (e[0].floorElement === \"Services\") {\r\n            if (e[0].node === navInfo[i].properties.node) {\r\n              name = navInfo[i].properties.type;\r\n              floor = e[0].floor;\r\n              val = navInfo[i].properties.node;\r\n            }\r\n            resp = `${e[0].type}(${e[0].floor})`;\r\n          } else if (e[0].floorElement === \"RestRooms\") {\r\n            if (e[0].node === navInfo[i].properties.node) {\r\n              name = navInfo[i].properties.type;\r\n              floor = e[0].floor;\r\n              val = navInfo[i].properties.node;\r\n            }\r\n            resp = `${e[0].type} Washroom (${e[0].floor})`;\r\n          } else {\r\n          }\r\n        }\r\n    \r\n        var ind = this.findFloor(floor, this.props.flrList.data);\r\n    \r\n        this.setState(\r\n          {\r\n            srcName: name,\r\n            srcfloor: floor,\r\n            srcVal: parseInt(val),\r\n            srcfloorL: this.props.flrList.data[ind].floorL,\r\n            srcfloorB: this.props.flrList.data[ind].floorB,\r\n            imgName: this.props.flrList.data[ind].fileName,\r\n            showStrtMenu: false,\r\n            srcReadOnly: true,\r\n            zoomLevel: \"18\",\r\n            pathCaption: [],\r\n            currentLocation: `${name}, ${floor} floor, ${srcBuildingLocation.buildingName}, ${srcBuildingLocation.venueName}`\r\n          },\r\n          () => {\r\n            const map = this.leafletMap.leafletElement;\r\n            map.flyTo(\r\n              new L.LatLng(\r\n                this.props.flrList.data[0].lat,\r\n                this.props.flrList.data[0].lng\r\n              ),\r\n              map.getZoom(),\r\n              {\r\n                animate: true,\r\n                duration: 2\r\n              }\r\n            );\r\n            console.log(\"called\")\r\n            // setTimeout(() => {\r\n              this.handleSubmit();\r\n            // }, \"2000\");\r\n          }\r\n        );\r\n      };\r\n    \r\n      srcChange = e => {\r\n        let name = null;\r\n        let val = null;\r\n        let floor = null;\r\n        let resp = \"\";\r\n        let navInfo = this.props.navigationInfo;\r\n        for (let i = 0; i < navInfo.length; i++) {\r\n          if (e.floorElement === \"Rooms\") {\r\n            resp = `${e.roomName}(${e.floor})`;\r\n            if (e.node === navInfo[i].properties.node) {\r\n              name = navInfo[i].properties.roomName;\r\n              floor = navInfo[i].properties.floor;\r\n              val = navInfo[i].properties.node;\r\n            }\r\n          } else if (e.floorElement === \"FloorConnection\") {\r\n            if (e.node === navInfo[i].properties.node) {\r\n              name = navInfo[i].properties.name;\r\n              floor = navInfo[i].properties.floor;\r\n              val = navInfo[i].properties.node;\r\n            }\r\n            resp = `${e.name}(${e.floor})`;\r\n          } else if (e.floorElement === \"Services\") {\r\n            if (e.node === navInfo[i].properties.node) {\r\n              name = navInfo[i].properties.type;\r\n              floor = navInfo[i].properties.floor;\r\n              val = navInfo[i].properties.node;\r\n            }\r\n            resp = `${e.type}(${e.floor})`;\r\n          } else if (e.floorElement === \"RestRooms\") {\r\n            if (e.node === navInfo[i].properties.node) {\r\n              name = navInfo[i].properties.type;\r\n              floor = navInfo[i].properties.floor;\r\n              val = navInfo[i].properties.node;\r\n            }\r\n          } else {\r\n          }\r\n        }\r\n        var ind = this.findFloor(floor, this.props.flrList.data);\r\n        this.setState(\r\n          {\r\n            srcName: name,\r\n            srcfloor: floor,\r\n            srcVal: parseInt(val),\r\n            srcfloorL: this.props.flrList.data[ind].floorL,\r\n            srcfloorB: this.props.flrList.data[ind].floorB,\r\n            imgName: this.props.flrList.data[ind].fileName\r\n          },\r\n          () => {\r\n            this.handleSubmit();\r\n          }\r\n        );\r\n      };\r\n    \r\n      onSuggestionsFetchRequested = ({ value }) => {\r\n        this.setState({\r\n          suggestions: this.getSuggestions(value)\r\n        });\r\n      };\r\n    \r\n      onDstSuggestionsFetchRequested = ({ value }) => {\r\n        this.setState({\r\n          dstSuggestions: this.getDstSuggestions(value)\r\n        });\r\n      };\r\n      // Autosuggest will call this function every time you need to clear suggestions.\r\n      onSuggestionsClearRequested = () => {\r\n        this.setState({\r\n          suggestions: []\r\n        });\r\n      };\r\n    \r\n      onDstSuggestionsClearRequested = () => {\r\n        this.setState({\r\n          dstSuggestions: []\r\n        });\r\n      };\r\n    \r\n      getSuggestions = value => {\r\n        const inputValue = value.trim().toLowerCase();\r\n        const inputLength = inputValue.length;\r\n        return inputLength === 0\r\n          ? []\r\n          : this.state.list.filter(lang => {\r\n              let resp = \"\";\r\n              if (lang.floorElement === \"Rooms\") {\r\n                resp = `${lang.roomName}(${lang.floor})`;\r\n              } else if (lang.floorElement === \"FloorConnection\") {\r\n                resp = `${lang.name}(${lang.floor})`;\r\n              } else if (lang.floorElement === \"Services\") {\r\n                resp = `${lang.type}(${lang.floor})`;\r\n              } else if (lang.floorElement === \"RestRooms\") {\r\n                resp = `${lang.type} Washroom (${lang.floor})`;\r\n              } else {\r\n              }\r\n              return resp.toLowerCase().slice(0, inputLength) === inputValue;\r\n            });\r\n      };\r\n    \r\n      getDstSuggestions = value => {\r\n        const inputValue = value.trim().toLowerCase();\r\n        const inputLength = inputValue.length;\r\n        return inputLength === 0\r\n          ? []\r\n          : this.state.list.filter(lang => {\r\n              let resp = \"\";\r\n              if (lang.floorElement === \"Rooms\") {\r\n                resp = `${lang.roomName}(${lang.floor})`;\r\n              } else if (lang.floorElement === \"FloorConnection\") {\r\n                resp = `${lang.name}(${lang.floor})`;\r\n              } else if (lang.floorElement === \"Services\") {\r\n                resp = `${lang.type}(${lang.floor})`;\r\n              } else if (lang.floorElement === \"RestRooms\") {\r\n                resp = `${lang.type} Washroom (${lang.floor})`;\r\n              } else {\r\n              }\r\n              return resp.toLowerCase().slice(0, inputLength) === inputValue;\r\n            });\r\n      };\r\n    \r\n      getSuggestionValue = suggestion => {\r\n        this.srcChange(suggestion);\r\n        if (suggestion.floorElement === \"Rooms\") {\r\n          return suggestion.roomName;\r\n        } else if (suggestion.floorElement === \"FloorConnection\") {\r\n          return suggestion.name;\r\n        } else if (suggestion.floorElement === \"Services\") {\r\n          return suggestion.type;\r\n        } else if (suggestion.floorElement === \"RestRooms\") {\r\n          return suggestion.type;\r\n        } else {\r\n        }\r\n      };\r\n    \r\n      getDstSuggestionValue = suggestion => {\r\n        this.dstChange(suggestion);\r\n        if (suggestion.floorElement === \"Rooms\") {\r\n          return suggestion.roomName;\r\n        } else if (suggestion.floorElement === \"FloorConnection\") {\r\n          return suggestion.name;\r\n        } else if (suggestion.floorElement === \"Services\") {\r\n          return suggestion.type;\r\n        } else if (suggestion.floorElement === \"RestRooms\") {\r\n          return suggestion.type;\r\n        } else {\r\n        }\r\n      };\r\n    \r\n      renderSuggestion = suggestion => {\r\n        let resp = \"\";\r\n        if (suggestion.floorElement === \"Rooms\") {\r\n          resp = `${suggestion.roomName}(${suggestion.floor})`;\r\n        } else if (suggestion.floorElement === \"FloorConnection\") {\r\n          resp = `${suggestion.name}(${suggestion.floor})`;\r\n        } else if (suggestion.floorElement === \"Services\") {\r\n          resp = `${suggestion.type}(${suggestion.floor})`;\r\n        } else if (suggestion.floorElement === \"RestRooms\") {\r\n          resp = `${suggestion.type} Washroom (${suggestion.floor})`;\r\n        } else {\r\n        }\r\n        return <div style={{ color: \"white\" }}>{resp}</div>;\r\n      };\r\n    \r\n      renderDstSuggestion = suggestion => {\r\n        let resp = \"\";\r\n        if (suggestion.floorElement === \"Rooms\") {\r\n          resp = `${suggestion.roomName}(${suggestion.floor})`;\r\n        } else if (suggestion.floorElement === \"FloorConnection\") {\r\n          resp = `${suggestion.name}(${suggestion.floor})`;\r\n        } else if (suggestion.floorElement === \"Services\") {\r\n          resp = `${suggestion.type}(${suggestion.floor})`;\r\n        } else if (suggestion.floorElement === \"RestRooms\") {\r\n          resp = `${suggestion.type} Washroom (${suggestion.floor})`;\r\n        } else {\r\n        }\r\n        return <div style={{ color: \"white\" }}>{resp}</div>;\r\n      };\r\n    \r\n      onChange = (event, { newValue }) => {\r\n        this.setState({\r\n          value: newValue\r\n        });\r\n      };\r\n    \r\n      onSrcChange = (event, { newValue }) => {\r\n        this.setState({\r\n          dstValue: newValue\r\n        });\r\n      };\r\n    \r\n      nvgtSrcBld = () => {\r\n        let { tmpSrcLocation } = this.state;\r\n        let e = [tmpSrcLocation];\r\n        this.fetchSrcBldLocation(\r\n          e,\r\n          tmpSrcLocation.venueName,\r\n          tmpSrcLocation.buildingName,\r\n          \"srcBuildingLocation\",\r\n          k => {\r\n            this.handleDstChange(k);\r\n          }\r\n        );\r\n      };\r\n    \r\n      nvgtDstBld = () => {\r\n        let { tmpDstLocation } = this.state;\r\n        let e = [tmpDstLocation];\r\n        this.fetchDstBldLocation(\r\n          e,\r\n          tmpDstLocation.venueName,\r\n          tmpDstLocation.buildingName,\r\n          \"dstBuildingLocation\",\r\n          k => {\r\n            this.handleDstChange(e);\r\n          }\r\n        );\r\n      };\r\n    \r\n      fetchSrcBldLocation = (e, venueName, buildingName, point, cb) => {\r\n        let data = { venueName, buildingName };\r\n        this.props.floorList(data, () => {\r\n          this.props.getAllBuildingElements(data, () => {\r\n            let navInfo = this.props.navigationInfo;\r\n            for (let i = 0; i < navInfo.length; i++) {\r\n              if (\r\n                navInfo[i].properties.floorElement === \"Rooms\" &&\r\n                navInfo[i].properties.doorGroup === \"Entrance | Exit\"\r\n              ) {\r\n                this.srcBldDstPointChange(e, () => {\r\n                  let k = [navInfo[i].properties];\r\n                  this.setNavigation(this.state.selectedSrcLocation);\r\n                  cb(k);\r\n                });\r\n              }\r\n            }\r\n          });\r\n        });\r\n      };\r\n    \r\n      fetchDstBldLocation = (e, venueName, buildingName, point, cb) => {\r\n        let data = { venueName, buildingName };\r\n        this.props.floorList(data, () => {\r\n          this.props.getAllBuildingElements(data, () => {\r\n            let navInfo = this.props.navigationInfo;\r\n            for (let i = 0; i < navInfo.length; i++) {\r\n              if (\r\n                navInfo[i].properties.floorElement === \"Rooms\" &&\r\n                navInfo[i].properties.doorGroup === \"Entrance | Exit\"\r\n              ) {\r\n                let props = [navInfo[i].properties];\r\n                this.srcBldDstPointChange(props, () => {\r\n                  let k = [navInfo[i].properties];\r\n                  this.setNavigation(this.state.selectedSrcLocation);\r\n                  cb(k);\r\n                });\r\n              }\r\n            }\r\n          });\r\n        });\r\n      };\r\n    \r\n      srcBldDstPointChange = (e, cb) => {\r\n        let { srcBuildingLocation } = this.state;\r\n        let name = null;\r\n        let val = null;\r\n        let floor = null;\r\n        let resp = \"\";\r\n        let navInfo = this.props.navigationInfo;\r\n        for (let i = 0; i < navInfo.length; i++) {\r\n          if (e[0].floorElement === \"Rooms\") {\r\n            if (e[0].node === navInfo[i].properties.node) {\r\n              name = navInfo[i].properties.roomName;\r\n              floor = e[0].floor;\r\n              val = navInfo[i].properties.node;\r\n            }\r\n          } else if (e[0].floorElement === \"FloorConnection\") {\r\n            if (e[0].node === navInfo[i].properties.node) {\r\n              name = navInfo[i].properties.name;\r\n              floor = e[0].floor;\r\n              val = navInfo[i].properties.node;\r\n            }\r\n          } else if (e[0].floorElement === \"Services\") {\r\n            if (e[0].node === navInfo[i].properties.node) {\r\n              name = navInfo[i].properties.type;\r\n              floor = e[0].floor;\r\n              val = navInfo[i].properties.node;\r\n            }\r\n          } else if (e[0].floorElement === \"RestRooms\") {\r\n            if (e[0].node === navInfo[i].properties.node) {\r\n              name = navInfo[i].properties.type;\r\n              floor = e[0].floor;\r\n              val = navInfo[i].properties.node;\r\n            }\r\n          } else {\r\n          }\r\n        }\r\n        var ind = this.findFloor(floor, this.props.flrList.data);\r\n        this.setState(\r\n          {\r\n            srcName: name,\r\n            srcfloor: floor,\r\n            srcVal: parseInt(val),\r\n            srcfloorL: this.props.flrList.data[ind].floorL,\r\n            srcfloorB: this.props.flrList.data[ind].floorB,\r\n            imgName: this.props.flrList.data[ind].fileName,\r\n            showStrtMenu: false,\r\n            srcReadOnly: true,\r\n            zoomLevel: \"18\"\r\n          },\r\n          () => {\r\n            const map = this.leafletMap.leafletElement;\r\n            map.flyTo(\r\n              new L.LatLng(\r\n                this.props.flrList.data[0].lat,\r\n                this.props.flrList.data[0].lng\r\n              ),\r\n              map.getZoom(),\r\n              {\r\n                animate: true,\r\n                duration: 2\r\n              }\r\n            );\r\n            setTimeout(() => {\r\n              this.handleSubmit();\r\n            }, \"2000\");\r\n          }\r\n        );\r\n        cb();\r\n      };\r\n    \r\n      navigateNext = () => {\r\n        let div = document.getElementById(\"mydiv\").children;\r\n        div[0].style.display = \"none\";\r\n        div[1].style.display = \"block\";\r\n        this.setState({\r\n          next: false,\r\n          currentFloor: this.state.dstfloor\r\n        });\r\n      };\r\n    \r\n      navigatePrevious = () => {\r\n        let div = document.getElementById(\"mydiv\").children;\r\n        div[1].style.display = \"none\";\r\n        div[0].style.display = \"block\";\r\n        this.setState({\r\n          next: true,\r\n          currentFloor: this.state.srcfloor\r\n        });\r\n      };\r\n    \r\n      handleBuildingView = () => {\r\n        this.setState({\r\n          showInstructions: false,\r\n        });\r\n      };\r\n    \r\n      previousButton() {\r\n        let currentStep = this.state.currentStep;\r\n        if (currentStep !== 0) {\r\n          return (\r\n            <button\r\n              className=\"btn btn-secondary btn-sm btn-block mb-1 ml-2 mr-1\"\r\n              type=\"button\"\r\n              onClick={this._prev}\r\n            >\r\n              Previous\r\n            </button>\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n    \r\n      nextButton() {\r\n        let currentStep = this.state.currentStep;\r\n        if (currentStep < this.state.pathCaption.length) {\r\n          this._next();\r\n        }\r\n        return null;\r\n      }\r\n    \r\n      _next = () => {\r\n        let currentStep = this.state.currentStep;\r\n        currentStep =\r\n          currentStep >= this.state.pathCaption.length - 1\r\n            ? this.state.pathCaption.length\r\n            : currentStep + 1;\r\n        if (this.state.pathCaption[currentStep]) {\r\n          let step = this.state.pathCaption[currentStep];\r\n          var utter = new window.SpeechSynthesisUtterance(step);\r\n          let lang = localStorage.getItem(\"Language\");\r\n          if (lang === \"Hindi\") {\r\n            utter.lang = \"hi-IN\";\r\n          } else {\r\n            utter.lang = \"en-US\";\r\n          }\r\n          window.speechSynthesis.cancel();\r\n          window.speechSynthesis.speak(utter);\r\n        }\r\n        if (\r\n          this.state.pathFloor[currentStep] !== undefined &&\r\n          this.state.pathFloor[currentStep].floor !==\r\n            this.state.pathFloor[currentStep - 1].floor\r\n        ) {\r\n          this.navigateNext();\r\n        }\r\n    \r\n        this.setState({\r\n          currentStep: currentStep\r\n        });\r\n      };\r\n    \r\n      _prev = () => {\r\n        let currentStep = this.state.currentStep;\r\n        currentStep = currentStep <= 1 ? 0 : currentStep - 1;\r\n        if (this.state.pathFloor[currentStep + 1] !== undefined) {\r\n          if (\r\n            this.state.pathFloor[currentStep + 1].floor !==\r\n            this.state.pathFloor[currentStep].floor\r\n          ) {\r\n            this.navigatePrevious();\r\n          }\r\n        }\r\n        this.setState({\r\n          currentStep: currentStep\r\n        });\r\n      };\r\n    \r\n      playInstruction = (pause)=>{\r\n        var synth = window.speechSynthesis;\r\n        synth.cancel();\r\n        if(pause === true){\r\n          synth.pause();\r\n        }else{\r\n          synth.resume();\r\n        }\r\n        // let utterance = new SpeechSynthesisUtterance(\"Hello world!\");\r\n        // synth.speak(utterance);\r\n        // synth.resume()\r\n        let instruction = this.filterInstruction()\r\n    \r\n        instruction.forEach(r=>{\r\n          var utterance1 = new SpeechSynthesisUtterance(r);\r\n          synth.speak(utterance1);\r\n        })\r\n      }\r\n    \r\n      filterInstruction = ()=>{\r\n        var instructions = [];\r\n        var stepsCount = [];\r\n        let instruction = this.state.currentFloor === this.state.firstFlr?this.state.firstFlrInstruction:this.state.secondFlrInstruction\r\n        instructions = instruction &&  instruction.map((r, i) => {\r\n                            if (\r\n                              r.includes(\"right\") ||\r\n                              r.includes(\"Right\")\r\n                            ) {\r\n                              return r \r\n                            } else if (\r\n                              r.includes(\"left\") ||\r\n                              r.includes(\"Left\")\r\n                            ) {\r\n                              return r \r\n                            } else if (\r\n                              r.includes(\"forward\")\r\n                            ) {\r\n                              let theNum  = r.match(/\\d+/)[0]\r\n                              stepsCount.push(parseInt(theNum))\r\n                              return r \r\n                            } else if (\r\n                              r.includes(\"Turn 1 O' Clock\") ||\r\n                              r.includes(\"Turn 2 O' Clock\") ||\r\n                              r.includes(\"Turn 3 O' Clock\") \r\n                            ) {\r\n                              return'Turn slight right' \r\n                            }else if(  \r\n                              r.includes(\"Turn 4 O' Clock\") ||\r\n                              r.includes(\"Turn 5 O' Clock\")){\r\n                                return 'Turn back and then turn slight left' \r\n                            } else if (\r\n                              r.includes(\"Turn 7 O' Clock\") ||\r\n                              r.includes(\"Turn 8 O' Clock\") ||\r\n                              r.includes(\"Turn 9 O' Clock\") \r\n                            ) {\r\n                              return 'turn slight left'\r\n                            }else if(                        \r\n                              r.includes(\"Turn 10 O' Clock\") ||\r\n                              r.includes(\"Turn 11 O' Clock\")){\r\n                                return 'Turn back and then turn slight left'\r\n                            } else if (\r\n                              r.includes(\"Turn 6 O' Clock\")\r\n                            ) {\r\n                              return 'Turn back'\r\n                            } else if (r.includes(\"You are at\")) {\r\n                              return r\r\n                            } else if (r.includes(\"reached\")) {\r\n                              return r\r\n                            } else if (\r\n                              r.includes(\"Turn 0 O' Clock\") ||\r\n                              r.includes(\"Turn 12 O' Clock\")\r\n                            ) {\r\n                              return null \r\n                            }else{\r\n                              return r\r\n                            }\r\n        })\r\n        var distance\r\n    \r\n        if(instructions){\r\n          const add = arr => arr.reduce((a, b) => a + b, 0);\r\n          distance = add(stepsCount);\r\n          instructions = instructions.filter( (el)=> {\r\n            return el != null;\r\n          });\r\n        }\r\n        instructions.splice(instructions.length-2, 1);\r\n        return instructions;\r\n      }\r\n\r\n  state = {\r\n  };\r\n  \r\n  handleClick = () => {\r\n    this.setState({\r\n            color: Konva.Util.getRandomColor()\r\n        });\r\n    };\r\n  \r\n\r\n  render() {\r\n\r\n    var combineInstructions = [];\r\n    if(this.state.srcfloor === this.state.dstfloor){\r\n      combineInstructions = this.state.pathCaption\r\n    }else{\r\n      if(this.state.firstFlr === this.state.currentFloor){\r\n        combineInstructions = this.state.firstFlrInstruction\r\n      }else{\r\n        combineInstructions = this.state.secondFlrInstruction\r\n      }\r\n      // if(this.state.firstFlrInstruction = this.state.secondFlrInstruction)\r\n    }\r\n\r\n    let { center, currentPos } = this.state;\r\n    let { srcBuildingLocation, dstBuildingLocation } = this.state;\r\n\r\n    return (\r\n        // <React.Fragment>\r\n        \r\n        // </React.Fragment>\r\n        <React.Fragment>\r\n         \r\n            \r\n        {/* style={{background:\"#e0e0e0\"}} */}\r\n        <div hidden={this.state.showInstructions}  >\r\n          {!this.state.buildingView ? (\r\n            <React.Fragment>\r\n\r\n              <div\r\n                className=\"source-destination fixed-top\"\r\n                id=\"src-bar\"\r\n                style={{ marginTop: \"50px\" }}\r\n              >\r\n                <div className=\"row w-100  mx-auto\">\r\n                  <div className=\"col-12 p-0\">\r\n                    <button\r\n                      className=\"btn-nvgtn text-white\"\r\n                      onClick={() => {\r\n                        this.setState({\r\n                          showStrtMenu: true,\r\n                          srcReadOnly: false\r\n                        });\r\n                      }}\r\n                    >\r\n                      <img\r\n                        className=\"float-left mt-2 mr-2\"\r\n                        src=\"/inclunav/assets/images/profile.svg\"\r\n                        alt=\"user location\"\r\n                        \r\n                      />\r\n                      <p className=\"strt-txt text-justify \">\r\n                        {this.state.currentLocation}\r\n                      </p>\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n                <div className=\"mx-auto hr-line\" />\r\n                <div className=\"row w-100  mx-auto\">\r\n                  <div className=\"col-10 p-0\">\r\n                    <button\r\n                      className=\"btn-nvgtn text-white\"\r\n                      onClick={() => {\r\n                        this.setState({\r\n                          showDstMenu: true,\r\n                          dstReadOnly: false\r\n                        });\r\n                      }}\r\n                    >\r\n                      <img\r\n                        className=\"float-left mt-2 mr-2\"\r\n                        src=\"/inclunav/assets/images/navigation.svg\"\r\n                        alt=\"select destination\"\r\n                      />\r\n                      <p className=\"strt-txt text-justify \">\r\n                        {this.state.dstAddress}\r\n                      </p>\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"col-2\"></div>\r\n                </div>\r\n              </div>\r\n              {this.state.showStrtMenu && !this.state.buildingView\r\n                ? \r\n                <SourceMenu\r\n                srcName = {this.state.srcName}\r\n                currentLocation = {this.state.currentLocation}\r\n                selectedSrcLocation = {this.state.selectedSrcLocation}\r\n                locationList = {this.state.locationList}\r\n                srcReadOnly = {this.state.srcReadOnly}\r\n                srcFloorList = {this.state.srcFloorList}\r\n                showStrtMenu = {()=>{\r\n                  this.setState({ showStrtMenu: false });\r\n                }}\r\n                handleSelectSource = {(e)=>{\r\n                  if (e.length > 0) {\r\n                    this.setState(\r\n                      {\r\n                        tmpSrcLocation: e[0]\r\n                      },\r\n                      () => {\r\n                        this.handleSrcChange(e);\r\n                      }\r\n                    );\r\n                  }\r\n                }}\r\n                handleSourceLocation = {(e)=>{\r\n                  if (e.length > 0) {\r\n                    this.setState(\r\n                      {\r\n                        selectedSrcLocation: e[0],\r\n                        selectedDstLocation: e[0],\r\n                        buildingView: false\r\n                      },\r\n                      () => {\r\n                        this.props.androidNavigation({venueName:e[0].venueName,buildingName:e[0].buildingName},()=>{\r\n                        })\r\n                        this.fetchLocation(\r\n                          e[0].venueName,\r\n                          e[0].buildingName,\r\n                          \"srcBuildingLocation\"\r\n                        );\r\n                        this.fetchLocation(\r\n                          e[0].venueName,\r\n                          e[0].buildingName,\r\n                          \"dstBuildingLocation\"\r\n                        );\r\n                        if(this.state.dstName !== \"Select Destination\"){\r\n                          this.handleSubmit()\r\n                        }else{\r\n                          this.setNavigation(this.state.selectedDstLocation);\r\n                        }\r\n                      }\r\n                    );\r\n                  }\r\n                }}\r\n                />\r\n                : null}\r\n              {this.state.showDstMenu && !this.state.buildingView\r\n                ? \r\n                <DestinationMenu\r\n                dstName={this.state.dstName}\r\n                currentLocation = {this.state.currentLocation}\r\n                selectedDstLocation = {this.state.selectedDstLocation}\r\n                selectedDestination = {this.state.selectedDestination}\r\n                locationList = {this.state.locationList}\r\n                dstReadOnly = {this.state.dstReadOnly}\r\n                dstFloorList={this.state.dstFloorList}\r\n                showDstMenu={()=>{\r\n                  this.setState({ showDstMenu: false });\r\n                }}\r\n                handleSelectDestination = {(e)=>{\r\n                  let resp = \"\";\r\n                  if (e[0].floorElement === \"Rooms\") {\r\n                    resp = `${e[0].roomName}(${e[0].floor})`;\r\n                  } else if (e[0].floorElement === \"FloorConnection\") {\r\n                    resp = `${e[0].name}(${e[0].floor})`;\r\n                  } else if (e[0].floorElement === \"Services\") {\r\n                    resp = `${e[0].type}(${e[0].floor})`;\r\n                  } else if (e[0].floorElement === \"RestRooms\") {\r\n                    resp = `${e[0].type} Washroom (${e[0].floor})`;\r\n                  } else {\r\n                    resp = \"\";\r\n                  }\r\n                  this.setState(\r\n                    {\r\n                      tmpDstLocation: e[0],\r\n                      dstName:e[0],\r\n                      dstAddress: `${resp}, ${this.state.dstBuildingLocation.buildingName}, ${this.state.dstBuildingLocation.venueName}`,\r\n                      showDstMenu: false,\r\n                      dstReadOnly: true\r\n                    },\r\n                    () => {\r\n                      if (\r\n                        srcBuildingLocation.venueName ===\r\n                          dstBuildingLocation.venueName &&\r\n                        srcBuildingLocation.buildingName ===\r\n                          dstBuildingLocation.buildingName\r\n                      ) {\r\n                        this.handleDstChange(e);\r\n                      }\r\n                    }\r\n                  );\r\n                }}\r\n                handleSourceLocation = {(e)=>{\r\n                if (e.length > 0) {\r\n                  let venueName = e[0].venueName;\r\n                  let buildingName = e[0].buildingName;\r\n                  let venue = this.state.srcBuildingLocation.venueName;\r\n                  let building = this.state.srcBuildingLocation.buildingName;\r\n                  if (!venue && !building) {\r\n                    let data = { venueName, buildingName };\r\n                    let props;\r\n                    this.props.androidNavigation({venueName:e[0].venueName,buildingName:e[0].buildingName},()=>{\r\n                    })\r\n                    this.setNavigation(data);\r\n                    this.props.floorList(data, () => {\r\n                      this.props.getAllBuildingElements(data, () => {\r\n                        let navInfo = this.props.navigationInfo;\r\n                        for (let i = 0; i < navInfo.length; i++) {\r\n                          if (\r\n                            navInfo[i].properties.floorElement === \"Rooms\" &&\r\n                            navInfo[i].properties.doorGroup ===\r\n                              \"Entrance | Exit\"\r\n                          ) {\r\n                            props = navInfo[i].properties;\r\n                            var ind = this.findFloor(\r\n                              \"ground\",\r\n                              this.props.flrList.data\r\n                            );\r\n                            this.setState(\r\n                              {\r\n                                srcName: props.roomName,\r\n                                srcfloor: \"ground\",\r\n                                srcVal: parseInt(props.node),\r\n                                srcfloorL: this.props.flrList.data[ind]\r\n                                  .floorL,\r\n                                srcfloorB: this.props.flrList.data[ind]\r\n                                  .floorB,\r\n                                imgName: this.props.flrList.data[ind]\r\n                                  .fileName,\r\n                                pathCaption: []\r\n                              },\r\n                              () => {\r\n                                  this.handleSubmit();\r\n                              }\r\n                            );\r\n                          }\r\n                        }\r\n                       \r\n                      });\r\n                    });\r\n                  }\r\n                  this.setState(\r\n                    {\r\n                      selectedDstLocation: e[0],\r\n                      buildingView: false\r\n                    },\r\n                    () => {\r\n                      this.fetchLocation(\r\n                        e[0].venueName,\r\n                        e[0].buildingName,\r\n                        \"dstBuildingLocation\"\r\n                      );\r\n                      if (\r\n                        this.state.selectedSrcLocation.venueName ===\r\n                          this.state.selectedDstLocation.venueName &&\r\n                        this.state.selectedSrcLocation.buildingName ===\r\n                          this.state.selectedDstLocation.buildingName\r\n                      ) {\r\n                        this.setNavigation(this.state.selectedDstLocation);\r\n                      }\r\n                    }\r\n                  );\r\n                }\r\n                }}\r\n                />\r\n                : null}\r\n            </React.Fragment>\r\n          ) : null}\r\n         \r\n          <div hidden={this.state.buildingView}>\r\n            <MapContainer\r\n              style={{ height: \"100vh\" }}\r\n              center={center}\r\n              zoom={this.state.zoomLevel}\r\n              ref={m => {\r\n                this.leafletMap = m;\r\n              }}\r\n              onClick={this.handleClick}\r\n            >\r\n              <TileLayer\r\n                url={\"http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"}\r\n              />\r\n              <Marker position={this.state.currentPos} draggable={true}>\r\n                <Popup position={this.state.currentPos}>\r\n                  Current location:\r\n                  <pre>{JSON.stringify(this.state.currentPos, null, 2)}</pre>\r\n                </Popup>\r\n              </Marker>\r\n            </MapContainer>\r\n          </div>\r\n          <div\r\n            hidden={!this.state.buildingView}\r\n            className=\"mt-1\"\r\n            style={{ height: \"100%\", width: \"100%\", overflow: \"scroll\" }}\r\n          >\r\n            {!this.state.samefloor ? (\r\n              <div\r\n            className=\"btn-group-vertical btn-info rounded  shadow mt-5\"\r\n            role=\"group\"\r\n            aria-label=\"First group\"\r\n            style={{ position: \"fixed\", zIndex: \"5\", background: \"#56c9ad\" }}\r\n          >\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-dark text-white text-capitalize\"\r\n                  onClick={this.navigatePrevious}\r\n                >\r\n                  { this.props.flrList.data.map((r,i)=>{\r\n                    if(this.state.srcfloor === r.floor){\r\n                        return `L${i}`\r\n                    }\r\n                  })}\r\n                </button>\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-dark text-white\"\r\n                  onClick={this.navigateNext}\r\n                >\r\n              { this.props.flrList.data.map((r,i)=>{\r\n                    if(this.state.dstfloor === r.floor){\r\n                        return `L${i}`\r\n                    }\r\n                  })}\r\n                </button>\r\n          </div>\r\n            ) : null}\r\n            <div style={{ height: \"100%\", top: \"50px\" }}>\r\n              <img\r\n                alt=\"map\"\r\n                id=\"myImage\"\r\n                src={`${config.imgUrl}/${this.state.imgName}`}\r\n                hidden={true}\r\n              ></img>\r\n              <img\r\n                alt=\"map\"\r\n                id=\"srcImage\"\r\n                src=\"/inclunav/assets/images/source.svg\"\r\n                style={{WebkitTransform: `rotate(20deg)`}}\r\n                hidden={true}\r\n              ></img>\r\n              <img\r\n                alt=\"map\"\r\n                id=\"dstImage\"\r\n                src=\"/inclunav/assets/images/destination.svg\"\r\n                hidden={true}\r\n              ></img>\r\n              <img\r\n                alt=\"map\"\r\n                id=\"stairs\"\r\n                src=\"/inclunav/assets/images/stair.png\"\r\n                hidden={true}\r\n              ></img>\r\n              <img\r\n                alt=\"map\"\r\n                id=\"lift\"\r\n                src=\"/inclunav/assets/images/lift.png\"\r\n                hidden={true}\r\n              ></img>\r\n              <div id=\"mydiv1\"></div>\r\n             \r\n              <div className=\"canvaDiv\" ref=\"canv\" onScroll={this.handleScroll}>\r\n              <Stage\r\n                width={500} \r\n                height={500}\r\n            >\r\n                <Layer>\r\n                {this.state.pathPoints.map((star,id) => (\r\n                  <Star\r\n                    key={id}\r\n                    id={id}\r\n                    x = {star[0]}\r\n                    y = {star[1]}\r\n                    numPoints={5}\r\n                    innerRadius = {20}\r\n                    outerRadius = {40}\r\n                    fill=\"#89b717\"\r\n                    opacity={0.8}\r\n                    draggable\r\n                    // rotation={star.rotation}\r\n                    shadowColor=\"black\"\r\n                    shadowBlur={10}\r\n                    shadowOpacity = {0.6}\r\n                  />\r\n                ))}\r\n                </Layer>\r\n            </Stage>\r\n\r\n                <canvas\r\n                  id=\"myCanvassrc\"\r\n                  width={this.state.canvasWidth}\r\n                  height={this.state.canvasHeight}\r\n                  style={{ position: \"absolute\" }}\r\n                  hidden={true}\r\n                ></canvas>\r\n              </div>\r\n              <div id=\"mydiv\"></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n      getImage: state.imgDetails,\r\n      allNodes: state.getAllElem,\r\n      flrList: state.floorList,\r\n      userProfile:state.userPortfolio,\r\n      navigationInfo: state.navigationInfo,\r\n      vnList: state.venueList,\r\n      bldList: state.buildingList,\r\n      gpsLocation: state.gpsLocation,\r\n      androidNav: state.androidNavigation\r\n    };\r\n  };\r\n  \r\n  export default connect(mapStateToProps, {\r\n    floorList,\r\n    imgDetails,\r\n    getAllBuildingElements,\r\n    venueList,\r\n    buildingList,\r\n    getGpsLocation,\r\n    androidNavigation,\r\n    getUserPortfolio\r\n  })(ColoredRect);","C:\\Users\\Assistech\\mishor\\inclunav\\src\\components\\dashboard\\navigation\\Navigation.js",["591","592","593","594","595","596","597","598","599","600","601","602","603","604","605","606","607","608","609","610","611","612","613","614","615","616","617","618","619","620","621","622","623","624","625","626","627","628","629","630","631","632","633","634","635","636","637","638","639","640","641","642","643","644","645","646","647","648","649","650","651","652","653","654","655","656","657","658","659","660","661","662","663","664","665","666","667","668","669","670","671","672","673","674","675","676","677","678","679","680","681","682","683","684","685","686","687","688","689","690","691","692","693"],"import React from \"react\";\r\nimport {\r\n  Map as MapContainer,\r\n  Marker,\r\n  Popup,\r\n  TileLayer,\r\n} from \"react-leaflet\";\r\nimport L from \"leaflet\";\r\nimport \"leaflet-control-geocoder/dist/Control.Geocoder.js\";\r\nimport config from \"../../../config\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  floorList,\r\n  imgDetails,\r\n  getAllBuildingElements,\r\n  venueList,\r\n  buildingList,\r\n  getGpsLocation,\r\n  androidNavigation,\r\n  getUserPortfolio,\r\n  osmRoutes,\r\n  pickupPoints,\r\n  navContent,\r\n} from \"../../../store/actions/index\";\r\nimport { Typeahead } from \"react-bootstrap-typeahead\";\r\nimport \"react-bootstrap-typeahead/css/Typeahead.css\";\r\nimport \"leaflet-routing-machine\";\r\nimport \"lrm-graphhopper\";\r\nimport Instructions from \"./Instructions\";\r\nimport NavigationDetails from './NavigationDetails';\r\nimport GlobalDetails from './GlobalDetails';\r\nimport InstructionTab from './InstructionTab';\r\nimport SourceMenu from \"./SourceMenu\";\r\nimport DestinationMenu from \"./DestinationMenu\";\r\nimport Menu from \"./Menu\";\r\nimport SelectSource from './SelectSource';\r\nimport SelectDestination from './SelectDestination';\r\nimport './location.css';\r\nimport Modal from 'react-modal';\r\n\r\nconst customStyles = {\r\n    content : {\r\n      top                   : '55%',\r\n      left                  : '50%',\r\n      right                 : 'auto',\r\n      bottom                : 'auto',\r\n      marginRight           : '-50%',\r\n      transform             : 'translate(-50%, -50%)',\r\n      background            :  \"#27282D\",\r\n      width                 : \"98%\",\r\n      height                : \"95%\"\r\n    },\r\n    overlay: {zIndex: 9999}\r\n  };\r\n\r\nconst center = { lat: 28.6139, lng: 77.209 };\r\n\r\nclass Graph {\r\n  constructor(noOfVertices) {\r\n    this.noOfVertices = noOfVertices;\r\n    this.AdjList = new Map();\r\n    this.Adjweights = new Map();\r\n  }\r\n  addVertex(v) {\r\n    this.AdjList.set(v, []);\r\n    this.Adjweights.set(v, []);\r\n  }\r\n  hasvertex(v) {\r\n    return this.AdjList.has(v);\r\n  }\r\n  edges(v) {\r\n    return this.AdjList.get(v);\r\n  }\r\n  addEdge(v, w, wt, undir) {\r\n    if (undir) {\r\n      this.AdjList.get(v).push(w);\r\n      this.Adjweights.get(v).push(wt);\r\n      this.AdjList.get(w).push(v);\r\n      this.Adjweights.get(w).push(wt);\r\n    } else {\r\n      this.AdjList.get(v).push(w);\r\n      this.Adjweights.get(v).push(wt);\r\n    }\r\n  }\r\n\r\n  printGraph() {\r\n    var get_keys = this.AdjList.keys();\r\n    for (var i of get_keys) {\r\n      var get_values = this.AdjList.get(i);\r\n      var val = this.Adjweights.get(i);\r\n      var conc = \"\";\r\n      var conc2 = \"\";\r\n      for (let j of get_values) {\r\n        conc = conc + j + \" \";\r\n      }\r\n      for (let j of val) {\r\n        conc2 = conc2 + j + \" \";\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nclass Navigation extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      center: { lat: 28.6139, lng: 77.209 },\r\n      currentPos: { lat: 28.6139, lng: 77.209 },\r\n      nearestPickupPoint:{lat: 28.6139, lng: 77.209},\r\n      gpsLocation: \"\",\r\n      buildingAddress: \"\",\r\n      zoomLevel: \"18\",\r\n      showStrtMenu: false,\r\n      showDstMenu: false,\r\n      //\r\n      buildingName: \"\",\r\n      srcName: \"Search within building\",\r\n      srcfloor: \"none\",\r\n      dstfloor: \"none\",\r\n      list: [],\r\n      dstName: \"Select Destination\",\r\n      srcVal: null,\r\n      dstVal: null,\r\n      scale: 2.4,\r\n      srcfloorL: null,\r\n      srcfloorB: null,\r\n      dstfloorL: null,\r\n      dstfloorB: null,\r\n      samefloor: true,\r\n      canvaslist: [],\r\n      ind: 0,\r\n      sideDrawerOpen: false,\r\n      isLoading: false,\r\n      sidebarLeft: false,\r\n      imgName: null,\r\n      value: \"\",\r\n      suggestions: [],\r\n      dstValue: \"\",\r\n      dstSuggestions: [],\r\n      venueName: \"\",\r\n      venueList: [],\r\n      buildingList: [],\r\n      buildingView: false,\r\n      pathCaption: [],\r\n      pathFloor: [],\r\n      currentStep: 0,\r\n      srcReadOnly: false,\r\n      dstReadOnly: false,\r\n      currentLocation: \"\",\r\n      locationList: [],\r\n      selectedSrcLocation: { buildingName: \"Search from\", venueName: \"Indoor maps\" },\r\n      selectedDstLocation: { buildingName: \"Search from\", venueName: \"Indoor maps\" },\r\n      srcBuildingLocation: { buildingName: \"\", venueName: \"\" },\r\n      dstBuildingLocation: { buildingName: \"\", venueName: \"\" },\r\n      srcFloorList: [],\r\n      dstFloorList: [],\r\n      selectedDestination: \"Select Destination\",\r\n      dstAddress: \"Select Destination\",\r\n      canvasWidth: null,\r\n      canvasHeight: null,\r\n      tmpSrcLocation: {},\r\n      tmpDstLocation: {},\r\n      floorAngle: 0,\r\n      pathAngle:0,\r\n      next: true,\r\n      showDirections: false,\r\n      pathArray: [],\r\n      srtdInstruction: [],\r\n      srtdFlr: [],\r\n      toggle: false,\r\n      osmRoutes: null,\r\n      globalDistance: 0,\r\n      globalTime: 0,\r\n      showInstructions: false,\r\n      zoom:false,\r\n      language:'en',\r\n      visionType:'vision',\r\n      height:'<5ft',\r\n      ageGroup:'adult',\r\n      walkingType:'walk',\r\n      pause:false,\r\n      firstFlrInstruction:[],\r\n      secondFlrInstruction:[],\r\n      firstFlr:'',\r\n      secondFlr:'',\r\n      currentFloor:'',\r\n      instructionReady:false,\r\n      selectedVenue:'Select Venue',\r\n      selectedDestinationVenue:'Select destination venue',\r\n      selectedBuilding:'Select building',\r\n      selectedDestinationBuilding:'Select destination building',\r\n      destinationActive:false,\r\n      open:false,\r\n      showMenu:false\r\n    };\r\n    this.shortestPathVar = [];\r\n    this.grids_all = [];\r\n    this.grids = [];\r\n    this.visited = [];\r\n    this.shortestpath = [];\r\n    this.minimumcost = [];\r\n    this.leaves = [];\r\n    this.graph = null;\r\n    this.flrconn = [];\r\n    this.num_floors = 0;\r\n    this.animateRef = false;\r\n    this.instructions = [];\r\n    this.show = 0;\r\n    this.actualAngle = 0;\r\n    this.croppedRegion = {};\r\n    this.distanceList = [];\r\n  }\r\n\r\n  componentDidMount() {\r\n    // if (window.navigator.geolocation) {\r\n    //   navigator.geolocation.getCurrentPosition(success => {\r\n      let success  =  {coords:{ latitude: 28.6139, longitude: 77.209 }}\r\n        let coordinates = [success.coords.latitude, success.coords.longitude];\r\n        this.props.getGpsLocation(\r\n          { lat: success.coords.latitude, lng: success.coords.longitude },\r\n          () => {\r\n            this.getUserDetails()\r\n            var cvWidth = Math.max(\r\n              document.getElementById(\"myCanvassrc\").clientWidth,\r\n              window.innerWidth || 0\r\n            );\r\n            var cvHeight = Math.max(\r\n              document.getElementById(\"myCanvassrc\").clientHeight,\r\n              window.innerHeight || 0\r\n            );\r\n\r\n            var srcBar = document.getElementById(\"src-bar\");\r\n            var navHeight = document.getElementById(\"nav-height\");\r\n            var element = document.getElementById(\"myCanvassrc\");\r\n            var topPos = element.getBoundingClientRect().top;\r\n            let realHeight =\r\n              cvHeight - (srcBar.clientHeight + navHeight.clientHeight);\r\n\r\n            this.setState(\r\n              {\r\n                // currentLocation: this.props.gpsLocation.display_name,\r\n                currentLocation: \"IIT Delhi\",\r\n                selectedVenue:\"IIT Delhi\",\r\n                // selectedVenue: this.props.gpsLocation.display_name,\r\n                canvasWidth: cvWidth,\r\n                canvasHeight: realHeight,\r\n                center: {\r\n                  lat: success.coords.latitude,\r\n                  lng: success.coords.longitude\r\n                },\r\n                currentPos: {\r\n                  lat: success.coords.latitude,\r\n                  lng: success.coords.longitude\r\n                }\r\n              },\r\n              () => {\r\n                const map = this.leafletMap.leafletElement;\r\n                let lat = success.coords.latitude;\r\n                let lng = success.coords.longitude;\r\n                map.flyTo(\r\n                  new L.LatLng(\r\n                    success.coords.latitude,\r\n                    success.coords.longitude\r\n                  ),\r\n                  map.getZoom(),\r\n                  {\r\n                    animate: true,\r\n                    duration: 0.5\r\n                  }\r\n                );\r\n              }\r\n            );\r\n          }\r\n        );\r\n        this.getVenueList(coordinates);\r\n    //   });\r\n    // } else {\r\n    //   // x.innerHTML = \"Geolocation is not supported by this browser.\";\r\n    // }\r\n  }\r\n\r\n  // componentDidMount(){\r\n  //  if (window.navigator.geolocation) {\r\n  //     navigator.geolocation.getCurrentPosition(success => {\r\n  //       let coordinates = [success.coords.latitude, success.coords.longitude];\r\n  //       this.getVenueList(coordinates);\r\n  //       this.props.getGpsLocation(\r\n  //         { lat: success.coords.latitude, lng: success.coords.longitude },\r\n  //         () => {\r\n  //           this.getUserDetails()\r\n  //           var cvWidth = Math.max(\r\n  //             document.getElementById(\"myCanvassrc\").clientWidth,\r\n  //             window.innerWidth || 0\r\n  //           );\r\n  //           var cvHeight = Math.max(\r\n  //             document.getElementById(\"myCanvassrc\").clientHeight,\r\n  //             window.innerHeight || 0\r\n  //           );\r\n  //           var srcBar = document.getElementById(\"src-bar\");\r\n  //           var navHeight = document.getElementById(\"nav-height\");\r\n  //           var element = document.getElementById(\"myCanvassrc\");\r\n  //           var topPos = element.getBoundingClientRect().top;\r\n  //           let realHeight =\r\n  //             cvHeight - (srcBar.clientHeight + navHeight.clientHeight);\r\n  //           this.setState(\r\n  //             {\r\n  //               currentLocation: this.props.gpsLocation.display_name,\r\n  //               // currentLocation: \"IIT Delhi\",\r\n  //               // selectedVenue:\"IIT\",\r\n  //               selectedVenue: this.props.gpsLocation.display_name,\r\n  //               canvasWidth: cvWidth,\r\n  //               canvasHeight: realHeight,\r\n  //               center: {\r\n  //                 lat: success.coords.latitude,\r\n  //                 lng: success.coords.longitude\r\n  //               },\r\n  //               currentPos: {\r\n  //                 lat: success.coords.latitude,\r\n  //                 lng: success.coords.longitude\r\n  //               }\r\n  //             },\r\n  //             () => {\r\n  //               const map = this.leafletMap.leafletElement;\r\n  //               let lat = success.coords.latitude;\r\n  //               let lng = success.coords.longitude;\r\n  //               map.flyTo(\r\n  //                 new L.LatLng(\r\n  //                   success.coords.latitude,\r\n  //                   success.coords.longitude\r\n  //                 ),\r\n  //                 map.getZoom(),\r\n  //                 {\r\n  //                   animate: true,\r\n  //                   duration: 0.5\r\n  //                 }\r\n  //               );\r\n  //             }\r\n  //           );\r\n  //         }\r\n  //       );\r\n  //       // this.getVenueList(coordinates);\r\n  //     });\r\n  //   } else {\r\n  //     // x.innerHTML = \"Geolocation is not supported by this browser.\";\r\n  //   }\r\n  // }\r\n\r\n  getUserDetails = ()=>{\r\n    let id = localStorage.getItem('id');\r\n      let token = localStorage.getItem('token');\r\n      this.props.getUserPortfolio({id,token},()=>{\r\n        if(this.props.userProfile.success === false){\r\n          localStorage.clear();\r\n          this.props.history.push('/')\r\n        }else{\r\n          let data = this.props.userProfile.properties\r\n          this.setState({\r\n            language:data.language,\r\n            visionType:data.visionType,\r\n            height:data.height,\r\n            ageGroup:data.ageGroup,\r\n            walkingType:data.navigationMode\r\n          })          \r\n        }\r\n      })\r\n  }\r\n\r\n  fetchLocation = (venueName, buildingName, point) => {\r\n    let data = { venueName, buildingName };\r\n    this.props.floorList(data, () => {\r\n\r\n      let flrListData = this.props.flrList.data;\r\n      let prevData = this.state.center;\r\n      this.setState(\r\n        {\r\n          center: { lat: flrListData[0].lat, lng: flrListData[0].lng },\r\n          currentPos: { lat: flrListData[0].lat, lng: flrListData[0].lng },\r\n          [point]: {\r\n            venueName,\r\n            buildingName,\r\n            lat: flrListData[0].lat,\r\n            lng: flrListData[0].lng,\r\n            floorAngle:parseInt(flrListData[0].buildingOrientation)\r\n          }\r\n        },\r\n        () => {\r\n\r\n          this.props.getAllBuildingElements(data, () => {\r\n            const map = this.leafletMap.leafletElement;\r\n            map.flyTo(\r\n              new L.LatLng(flrListData[0].lat, flrListData[0].lng),\r\n              map.getZoom(),\r\n              {\r\n                animate: true,\r\n                duration: 0.5\r\n              }\r\n            );\r\n\r\n\r\n            let nodes = this.props.navigationInfo;\r\n            let lists = [];\r\n            for (let i = 0; i < nodes.length; i++) {\r\n              var sel = nodes[i].properties;\r\n              lists.push(sel);\r\n            }\r\n\r\n            const uniqueLists = Array.from(\r\n              new Set(\r\n                lists.map(o => {\r\n                  if (o.floorElement === \"Rooms\") {\r\n                    return o.coordinates;\r\n                  } else if (o.floorElement === \"FloorConnection\") {\r\n                    return o.coordinates;\r\n                  } else if (o.floorElement === \"Services\") {\r\n                    return o.coordinates;\r\n                  } else if (o.floorElement === \"RestRooms\") {\r\n                    return o.coordinates;\r\n                  } else {\r\n                    // return o.coordinates\r\n                  }\r\n                })\r\n              )\r\n            ).map(id => {\r\n              return lists.find(a => a.coordinates === id);\r\n            });\r\n            let freeBeacon = uniqueLists.map(r=>{\r\n              if(r.floorElement === \"Services\"){\r\n                if(r.type === \"Beacons\" ){\r\n                  return null\r\n                }else{\r\n                  return r\r\n                }\r\n              }else{\r\n                return r\r\n              } \r\n            })\r\n\r\n            let freeData = freeBeacon.filter( (el)=> {\r\n              return el != null;\r\n            });\r\n            freeData.sort((a, b)=> {\r\n              if(a.floorElement === \"Rooms\"){\r\n                if(a.roomName !== undefined){\r\n                  return a.roomName < b.roomName ? -1 : (a.roomName > b.roomName ? 1 : 0);\r\n                }else{\r\n                  return a.name < b.name ? -1 : (a.name > b.name ? 1 : 0);\r\n                }\r\n              }else{\r\n                return a.type < b.type ? -1 : (a.type > b.type ? 1 : 0);\r\n              }\r\n            });\r\n            if (point === \"srcBuildingLocation\") {\r\n              this.setState({\r\n                srcFloorList: freeData\r\n              });\r\n            } else if (point === \"dstBuildingLocation\") {\r\n              let me = this;\r\n              let srcLat = this.state.srcBuildingLocation.lat;\r\n              let srcLng = this.state.srcBuildingLocation.lng;\r\n              if (!srcLat && !srcLng){\r\n                srcLat = prevData.lat;\r\n                srcLng = prevData.lng;\r\n              }\r\n\r\n              // L.Routing.control({\r\n              //   waypoints: [\r\n              //     L.latLng(srcLat, srcLng),\r\n              //     L.latLng(flrListData[0].lat, flrListData[0].lng)\r\n              //   ],\r\n              //   routeWhileDragging: false,\r\n              //   autoRoute: true,\r\n              //   useZoomParameter: false,\r\n              //   draggableWaypoints: false,\r\n              //   show: false,\r\n              //   addWaypoints: false,\r\n              //   createMarker: function(i, wp) {\r\n              //     return L.marker(wp.latLng)\r\n              //       .on(\"click\", function(e) {\r\n              //         if (\r\n              //           e.latlng.lat === me.state.srcBuildingLocation.lat &&\r\n              //           e.latlng.lng === me.state.srcBuildingLocation.lng\r\n              //         ) {\r\n              //           me.nvgtSrcBld();\r\n              //         } else {\r\n              //           me.nvgtDstBld();\r\n              //         }\r\n              //       })\r\n              //       .bindPopup(\r\n              //         i === 0 ? \"Source Building\" : \"Destination Building\"\r\n              //       );\r\n              //   }\r\n              // })\r\n              //   .addTo(map)\r\n              //   .on(\"routesfound\", function(e) {\r\n              //     let distance = e.routes[0].summary.totalDistance;\r\n              //     me.setState({\r\n              //       osmRoutes: e.routes[0].instructions,\r\n              //       globalDistance: e.routes[0].summary.totalDistance,\r\n              //       globalTime: e.routes[0].summary.totalTime\r\n              //     });\r\n              //   });\r\n\r\n              map.fitBounds(\r\n                L.latLngBounds(\r\n                  L.latLng(srcLat, srcLng),\r\n                  L.latLng(flrListData[0].lat, flrListData[0].lng)\r\n                )\r\n              );\r\n              this.setState({\r\n                dstFloorList: freeData,\r\n                zoomLevel: \"10\"\r\n              });\r\n            }\r\n          });\r\n        }\r\n      );\r\n    });\r\n  };\r\n\r\n  getVenueList = (coordinates = null) => {\r\n    this.props.venueList(() => {\r\n      console.log(\"vn lisrt\",this.props.vnList)\r\n      this.setState(\r\n        {\r\n          venueList: this.props.vnList.data\r\n        },\r\n        () => {\r\n          this.findNearVenue(coordinates);\r\n        }\r\n      );\r\n    });\r\n  };\r\n\r\n  findNearVenue = coordinates => {\r\n    let { venueList } = this.state;\r\n    let dl = venueList.map(async r => {\r\n     let resp = await this.getDistance(coordinates, r)\r\n     return resp\r\n    });\r\n    Promise.all(dl).then(distList=>{\r\n    let arr = [];\r\n    let list = this.state.venueList.map((r, i) => {\r\n      if (r.buildingList) {\r\n        let dt = r.buildingList.map(k => {\r\n          arr.push({\r\n            venueName: r.venueName,\r\n            buildingName: k,\r\n            venueDistance: distList[i].distance\r\n          });\r\n          return {\r\n            venueName: r.venueName,\r\n            buildingName: k,\r\n            venueDistance: distList[i].distance\r\n          };\r\n        });\r\n        return dt;\r\n      } else {\r\n        arr.push({\r\n          venueName: r.venueName,\r\n          buildingName: \"\",\r\n          venueDistance: distList[i].distance\r\n        });\r\n        return {\r\n          venueName: r.venueName,\r\n          buildingName: \"\",\r\n          venueDistance: distList[i].distance\r\n        };\r\n      }\r\n    });\r\n\r\n    var lowest = Number.POSITIVE_INFINITY;\r\n    var highest = Number.NEGATIVE_INFINITY;\r\n    var tmp;\r\n    let nearLocation;\r\n    for (var i = distList.length - 1; i >= 0; i--) {\r\n      tmp = distList[i].distance;\r\n      if (tmp < lowest) {\r\n        nearLocation = distList[i];\r\n        lowest = tmp;\r\n      }\r\n      if (tmp > highest) highest = tmp;\r\n    }\r\n    let listArr = this.state.locationList.map(r => {\r\n      let k = distList.map(d => {\r\n        if (d.venueName === r.venueName) {\r\n          return { r, distance: d.distance };\r\n        }\r\n      });\r\n    });\r\n    let sortedArr = this.quickSort(arr);\r\n\r\n    if (lowest < 1) {\r\n\r\n      this.setState(\r\n        {\r\n          currentVenue: nearLocation,\r\n          locationList: arr\r\n        },\r\n        () => {\r\n          this.getBuildingList(nearLocation.venueName, coordinates);\r\n        }\r\n      );\r\n    } else {\r\n      this.setState({\r\n        currentVenue: {\r\n          address: \"\",\r\n          coordinates: [],\r\n          dateCreated: \"\",\r\n          distance: 2,\r\n          id: 35,\r\n          liveStatus: true,\r\n          organization: \"\",\r\n          venueName: \"\"\r\n        },\r\n        selectedLocation: { venueName: \"Venue\", buildingName: \"Building\" },\r\n        locationList: arr,\r\n        currentBuilding: {\r\n          address: \"\",\r\n          buildingName: \"\",\r\n          coordinates: [],\r\n          distance: 2,\r\n          lat: 0,\r\n          lng: 0\r\n        }\r\n      });\r\n    }\r\n    })\r\n\r\n  };\r\n\r\n  quickSort = arr => {\r\n    if (arr.length < 2) {\r\n      return arr;\r\n    }\r\n    let pivot = arr[0];\r\n    let lesserVal = [];\r\n    let greaterVal = [];\r\n    for (let k = 0; k < arr.length; k++) {\r\n      if (arr[k].venueDistance < pivot.venueDistance) {\r\n        lesserVal.push(arr[k]);\r\n      } else {\r\n        greaterVal.push(arr[k]);\r\n      }\r\n    }\r\n  };\r\n\r\n  getBuildingList = (venueName, coordinates = null) => {\r\n    this.props.buildingList({ venueName: venueName }, () => {\r\n      this.setState(\r\n        {\r\n          buildingList: this.props.bldList.data\r\n        },\r\n        () => {\r\n          \r\n          if (this.state.buildingList.length > 0) {\r\n\r\n            if(coordinates !== null){\r\n\r\n              this.findNearBuilding(coordinates);\r\n            }\r\n          } else {\r\n            this.setState({\r\n              selectedLocation: { venueName: venueName, buildingName: \"\" }\r\n            });\r\n          }\r\n        }\r\n      );\r\n    });\r\n  };\r\n\r\n  findNearBuilding = coordinates => {\r\n    let { buildingList } = this.state;\r\n    let distList = buildingList.map(r => {\r\n      let p = [r.lat, r.lng];\r\n      r.coordinates = p;\r\n      return this.getDistance(coordinates, r);\r\n    });\r\n\r\n    let dl = buildingList.map(async (r,i) => {\r\n      let p = [r.lat, r.lng];\r\n      r.coordinates = p;\r\n      let resp = await this.getDistance(coordinates, r)\r\n      return resp\r\n     });\r\n     \r\n    Promise.all(dl).then(distList=>{\r\n      var lowest = Number.POSITIVE_INFINITY;\r\n      var highest = Number.NEGATIVE_INFINITY;\r\n      var tmp;\r\n      let nearLocation;\r\n      for (var i = distList.length - 1; i >= 0; i--) {\r\n        tmp = distList[i].distance;\r\n        if (tmp < lowest) {\r\n          nearLocation = distList[i];\r\n          lowest = tmp;\r\n        }\r\n        if (tmp > highest) highest = tmp;\r\n    }\r\n  \r\n      if (lowest < 50) {\r\n        if(nearLocation.pickupLat){\r\n          let coordinate =  nearLocation.pickupLat.map((r,i)=>{\r\n            return {lat:parseFloat(r),lng:parseFloat(nearLocation.pickupLng[i])}\r\n          })\r\n  \r\n            let dist = coordinate.map(p=>{\r\n             let dl =  this.euclideanDistance(coordinates,[p.lat,p.lng])\r\n              return dl;\r\n            })\r\n  \r\n            let lower = this.nearLocation(dist);\r\n            this.setState(\r\n            {\r\n              currentBuilding: nearLocation,\r\n              selectedLocation: {\r\n                venueName: this.state.currentVenue.venueName,\r\n                buildingName: nearLocation.buildingName,\r\n                nearestPickupPoint: {lat: lower.nearLocation[0], lng: lower.nearLocation[1]},\r\n                currentPos: {lat: lower.nearLocation[0], lng: lower.nearLocation[1]}\r\n              }\r\n            },\r\n            () => {\r\n              // this.setNavigation(this.state.selectedLocation);\r\n              // this.fetchLocation(\r\n              //   this.state.selectedLocation.venueName,\r\n              //   this.state.selectedLocation.buildingName\r\n              // );\r\n            }\r\n          );\r\n\r\n        }\r\n\r\n      }\r\n    })\r\n  };\r\n\r\n  nearLocation = (distList)=>{\r\n    var lowest = Number.POSITIVE_INFINITY;\r\n    var highest = Number.NEGATIVE_INFINITY;\r\n    var tmp;\r\n    let nearLocation;\r\n    for (var i = distList.length - 1; i >= 0; i--) {\r\n      tmp = distList[i].distance;\r\n      if (tmp < lowest) {\r\n        nearLocation = distList[i];\r\n        lowest = tmp;\r\n      }\r\n      if (tmp > highest) highest = tmp;\r\n  }\r\n  return {lowest,nearLocation};\r\n  }\r\n\r\n  euclideanDistance = (p1, p2)=>{\r\n    var R = 6378137; // Earth’s mean radius in meter\r\n    var dLat = this.rad(p2[0] - p1[0]);\r\n    var dLong = this.rad(p2[1] - p1[1]);\r\n    var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n        Math.cos(this.rad(p1[0])) *\r\n        Math.cos(this.rad(p2[0])) *\r\n        Math.sin(dLong / 2) *\r\n        Math.sin(dLong / 2);\r\n    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    var d = (R * c) / 1000;\r\n    p2.distance = d;\r\n    return p2; // returns the distance in km\r\n  }\r\n\r\n  rad = function(x) {\r\n    return (x * Math.PI) / 180;\r\n  };\r\n\r\n  getDistance = (p1, p2)=> {\r\n    let data = { srcLat:p2.coordinates[0],srcLng:p2.coordinates[1],dstLat:p1[0],dstLng:p1[1]}\r\n    // this.props.osmRoutes(data,()=>{\r\n    // })\r\n\r\n    let me = this\r\n      const map = me.leafletMap.leafletElement;\r\n      var routeControl = L.Routing.control({\r\n        waypoints: [\r\n          L.latLng(p1[0], p1[1]),\r\n          L.latLng(p2.coordinates[0], p2.coordinates[1])\r\n        ], \r\n        routeWhileDragging: true,\r\n        show: false,\r\n        showAlternatives:false,\r\n        routeLine:false,\r\n        createMarker: function(p1,p2) {}\r\n      }).addTo(map)\r\n      return new Promise((resolve, reject) => {\r\n        routeControl.on('routesfound', (e)=> {\r\n          var routes = e.routes;\r\n          var summary = routes[0].summary;\r\n          p2.distance = summary.totalDistance / 1000;\r\n          this.distanceList.push(p2)\r\n          resolve(p2)\r\n          // return {p2}\r\n        });\r\n      })\r\n      \r\n \r\n  \r\n  \r\n  };\r\n\r\n  setNavigation = data => {\r\n                                    // this.props.androidNavigation(data, () => {\r\n                                // })\r\n    this.props.getAllBuildingElements({venueName:this.state.selectedVenue,buildingName:this.state.selectedBuilding} , () => {\r\n    let nodes = this.props.navigationInfo;\r\n    this.grids_all = [];\r\n\r\n      let lists = [];\r\n      let num_vert = 0;\r\n      let fc = new Map();\r\n      for (let i = 0; i < nodes.length; i++) {\r\n        if (nodes[i].properties.floorElement === \"FloorConnection\") {\r\n          num_vert++;\r\n          var v = nodes[i].properties.type + \",\" + nodes[i].properties.name;\r\n          var val = nodes[i].properties.floor + \",\" + nodes[i].properties.node;\r\n          if (fc.has(v) === false) {\r\n            fc.set(v, [val]);\r\n          } else {\r\n            fc.get(v).push(val);\r\n          }\r\n        }\r\n      }\r\n      this.graph = new Graph(num_vert + 2);\r\n      for (let i = 0; i < nodes.length; i++) {\r\n        var sel = nodes[i].properties;\r\n        lists.push(sel);\r\n        if (nodes[i].properties.floorElement === \"FloorConnection\") {\r\n          var val = nodes[i].properties.floor + \",\" + nodes[i].properties.node;\r\n          this.graph.addVertex(val);\r\n        }\r\n\r\n        if (nodes[i].properties.floorElement === \"Floor\") {\r\n          if (nodes[i].properties.length == 8) {\r\n            var v = nodes[i].properties.frConn[0].split(\",\");\r\n            var flrmatrix = nodes[i].properties.flr_dist_matrix[0].split(\",\");\r\n            var len = v.length / 2;\r\n            if (v.length % 2 === 0) {\r\n              for (var j = 0; j < v.length; j = j + 2) {\r\n                var val =\r\n                  parseInt(nodes[i].properties.length) * parseInt(v[j + 1]) +\r\n                  parseInt(v[j]);\r\n                var vert1 = nodes[i].properties.floor + \",\" + val;\r\n                for (var k = j + 2; k < v.length; k = k + 2) {\r\n                  val =\r\n                    parseInt(nodes[i].properties.length) * parseInt(v[k + 1]) +\r\n                    parseInt(v[k]);\r\n                  var vert2 = nodes[i].properties.floor + \",\" + val;\r\n                  this.graph.addEdge(\r\n                    vert1,\r\n                    vert2,\r\n                    flrmatrix[len * (j / 2) + k / 2],\r\n                    true\r\n                  );\r\n                }\r\n              }\r\n            } else {\r\n            }\r\n          }\r\n\r\n          this.grids_all.push(nodes[i]);\r\n\r\n        }\r\n      }\r\n\r\n      let getKeys = fc.keys();\r\n\r\n      for (let i of getKeys) {\r\n        var get_values = fc.get(i);\r\n        var cnt = 0;\r\n        var prev = null;\r\n        for (var j of get_values) {\r\n          if (cnt > 0) {\r\n            this.graph.addEdge(prev, j, 0, true);\r\n            prev = j;\r\n          }\r\n          if (cnt === 0) {\r\n            prev = j;\r\n          }\r\n          cnt++;\r\n        }\r\n      }\r\n      // if(this.state.srcfloor === this.state.dstfloor){\r\n      console.log(\"graph\",this.graph)\r\n      this.setState({\r\n        // canvasWidth: cvWidth,\r\n        // canvasHeight: height_of_canvas,\r\n        list: lists\r\n      });\r\n      // }\r\n    });\r\n  };\r\n\r\n  toggle = (type, value) => event => {\r\n    this.setState(state => {\r\n      return {\r\n        [type]: value\r\n      };\r\n    });\r\n  };\r\n\r\n  findFloor = (key, array) => {\r\n    if (array !== undefined) {\r\n      for (let i = 0; i < array.length; i++) {\r\n        if (array[i].type) {\r\n          if (array[i].geomtery.type === \"Polygon\") {\r\n            if (array[i].properties.floor === key) {\r\n              return i;\r\n            }\r\n          }\r\n        }\r\n        if (array[i].floor === key) {\r\n          return i;\r\n        }\r\n      }\r\n    }\r\n    return -1;\r\n  };\r\n\r\n  color_canvas_spl = (i, canvasid, color, srcfloorL) => {\r\n\r\n    let { scale } = this.state;\r\n\r\n    if(color === \"red\"){\r\n      let srcDiv = document.getElementById(\"srcImage\");\r\n      let canvas = document.getElementById(canvasid);\r\n      let context = canvas.getContext(\"2d\");\r\n\r\n      var wrh = this.state.dstfloorL / this.state.dstfloorB;\r\n      var newWidth = this.state.canvasWidth;\r\n      var newHeight = newWidth / wrh;\r\n      if (newHeight > this.state.canvasHeight) {\r\n        newHeight = this.state.canvasHeight;\r\n        newWidth = newHeight * wrh;\r\n      }\r\n\r\n      let gpx,gpy;\r\n      if(canvasid === \"canvas0\"){\r\n        gpx = newWidth / this.state.srcfloorL;\r\n        gpy = newHeight / this.state.srcfloorB;  \r\n      }else{\r\n        gpx = newWidth / this.state.dstfloorL;\r\n        gpy = newHeight / this.state.dstfloorB;\r\n      }\r\n\r\n      let pos_x = gpx * (i % srcfloorL);\r\n      let pos_y = gpy * parseInt(i / srcfloorL);\r\n      context.fillStyle = color;\r\n      // context.fillRect(pos_x, pos_y, scale, scale);  \r\n      context.drawImage(srcDiv, pos_x, pos_y, 10, 10);\r\n    }else if(color === \"yellow\"){\r\n      let lift = document.getElementById(\"lift\");\r\n      let stairs = document.getElementById(\"stairs\");\r\n      let canvas = document.getElementById(canvasid);\r\n      let context = canvas.getContext(\"2d\");\r\n      var wrh = this.state.dstfloorL / this.state.dstfloorB;\r\n      var newWidth = this.state.canvasWidth;\r\n      var newHeight = newWidth / wrh;\r\n      if (newHeight > this.state.canvasHeight) {\r\n        newHeight = this.state.canvasHeight;\r\n        newWidth = newHeight * wrh;\r\n      }\r\n      \r\n      let gpx,gpy;\r\n\r\n      if(canvasid === \"canvas0\"){\r\n        gpx = newWidth / this.state.srcfloorL;\r\n        gpy = newHeight / this.state.srcfloorB;  \r\n      }else{\r\n        gpx = newWidth / this.state.dstfloorL;\r\n        gpy = newHeight / this.state.dstfloorB;\r\n      }\r\n\r\n      let pos_x = gpx * (i % srcfloorL);\r\n      let pos_y = gpy * parseInt(i / srcfloorL);\r\n\r\n      var rot = (Math.PI / 2) * 3;\r\n      var x = pos_x;\r\n      var y = pos_y;\r\n      var step = Math.PI / 5;\r\n      let frConnType = \"\";\r\n      let data = this.props.navigationInfo.map(r => {\r\n        return r.properties;\r\n      });\r\n      for (let k = 0; k < data.length; k++) {\r\n        if (data[k].node === i) {\r\n          frConnType = data[k].type;\r\n        }\r\n      }\r\n      if (frConnType === \"Stairs\") {\r\n        var half_scale = scale / 2;\r\n        pos_x = pos_x + half_scale;\r\n        pos_y = pos_y + half_scale;\r\n        context.drawImage(stairs, pos_x - 12.5, pos_y - 6.25, 25, 25);\r\n      } else if (frConnType === \"Lift\") {\r\n        var half_scale = scale / 2;\r\n        pos_x = pos_x + half_scale;\r\n        pos_y = pos_y + half_scale;\r\n        context.drawImage(lift, pos_x - 12, pos_y + 6.25, 25, 25);\r\n      }\r\n       \r\n    }else if(color === \"green\"){\r\n      let dstDiv = document.getElementById(\"dstImage\");\r\n      let { scale } = this.state;\r\n      let canvas = document.getElementById(canvasid);\r\n      let context = canvas.getContext(\"2d\");\r\n\r\n      var wrh = this.state.dstfloorL / this.state.dstfloorB;\r\n      var newWidth = this.state.canvasWidth;\r\n      var newHeight = newWidth / wrh;\r\n      if (newHeight > this.state.canvasHeight) {\r\n        newHeight = this.state.canvasHeight;\r\n        newWidth = newHeight * wrh;\r\n      }\r\n\r\n      let gpx,gpy;\r\n      if(canvasid === \"canvas0\"){\r\n        gpx = newWidth / this.state.srcfloorL;\r\n        gpy = newHeight / this.state.srcfloorB;  \r\n      }else{\r\n        gpx = newWidth / this.state.dstfloorL;\r\n        gpy = newHeight / this.state.dstfloorB;\r\n      }\r\n\r\n      let pos_x = gpx * (i % srcfloorL);\r\n      let pos_y = gpy * parseInt(i / srcfloorL);\r\n      context.fillStyle = color;\r\n      // context.fillRect(pos_x, pos_y, scale, scale);  \r\n      context.drawImage(dstDiv, pos_x, pos_y, 10, 10);\r\n    }\r\n  };\r\n\r\n  // color_canvas_spl = (i, canvasid, color, srcfloorL) => {\r\n  //   let { scale } = this.state;\r\n  //   let srcDiv = document.getElementById(\"srcImage\");\r\n  //   let dstDiv = document.getElementById(\"dstImage\");\r\n\r\n  //   let lift = document.getElementById(\"lift\");\r\n  //   let stairs = document.getElementById(\"stairs\");\r\n\r\n  //   var canvas = document.getElementById(canvasid);\r\n  //   var context = canvas.getContext(\"2d\");\r\n  //   let gpx, gpy,pos_x,pos_y;\r\n  //   if (canvasid === \"canvas0\") {\r\n  //     let wrh = this.state.srcfloorL / this.state.srcfloorB;\r\n  //     let newWidth = this.state.canvasWidth;\r\n  //     let newHeight = newWidth / wrh;\r\n  //     if (newHeight > this.state.canvasHeight) {\r\n  //       newHeight = this.state.canvasHeight;\r\n  //       newWidth = newHeight * wrh;\r\n  //     }\r\n  //     gpx = newWidth / this.state.srcfloorL;\r\n  //     gpy = newHeight / this.state.srcfloorB;\r\n\r\n  //     pos_x = gpx * (i % this.state.srcfloorL);\r\n  //     pos_y = gpy * parseInt(i / this.state.srcfloorL);\r\n  //   } else {\r\n  //     let wrh = this.state.dstfloorL / this.state.dstfloorB;\r\n  //     let newWidth = this.state.canvasWidth;\r\n  //     let newHeight = newWidth / wrh;\r\n  //     if (newHeight > this.state.canvasHeight) {\r\n  //       newHeight = this.state.canvasHeight;\r\n  //       newWidth = newHeight * wrh;\r\n  //     }\r\n  //     gpx = newWidth / this.state.dstfloorL;\r\n  //     gpy = newHeight / this.state.dstfloorB;\r\n\r\n  //     pos_x = gpx * (i % this.state.dstfloorL);\r\n  //     pos_y = gpy * parseInt(i / this.state.dstfloorL);\r\n  \r\n  //   }\r\n\r\n  //   var halfScale = scale / 2;\r\n\r\n  //   if (color === \"yellow\") {\r\n      // var rot = (Math.PI / 2) * 3;\r\n      // var x = pos_x;\r\n      // var y = pos_y;\r\n      // var step = Math.PI / 5;\r\n      // let frConnType = \"\";\r\n      // let data = this.props.navigationInfo.map(r => {\r\n      //   return r.properties;\r\n      // });\r\n      // for (let k = 0; k < data.length; k++) {\r\n      //   if (data[k].node === i) {\r\n      //     frConnType = data[k].type;\r\n      //   }\r\n      // }\r\n      // if (frConnType === \"Stairs\") {\r\n      //   var half_scale = scale / 2;\r\n      //   pos_x = pos_x + half_scale;\r\n      //   pos_y = pos_y + half_scale;\r\n      //   context.drawImage(stairs, pos_x - 12.5, pos_y - 6.25, 25, 25);\r\n      // } else if (frConnType === \"Lift\") {\r\n      //   var half_scale = scale / 2;\r\n      //   pos_x = pos_x + half_scale;\r\n      //   pos_y = pos_y + half_scale;\r\n      //   context.drawImage(lift, pos_x - 12, pos_y + 6.25, 25, 25);\r\n      // }\r\n  //   } else if (color === \"green\") {\r\n  //     let half_scale = scale / 2;\r\n  //     pos_x = pos_x + half_scale;\r\n  //     pos_y = pos_y + half_scale;\r\n  //     context.drawImage(dstDiv, pos_x, pos_y, 25, 25);\r\n  //   } else {\r\n\r\n  //     let half_scale = scale / 2;\r\n  //     pos_x = pos_x + half_scale;\r\n  //     pos_y = pos_y + half_scale;\r\n  //     context.drawImage(srcDiv, pos_x, pos_y, 10, 10);\r\n  //   }\r\n  // };\r\n\r\n  // color_canvas_spl = (i, canvasid, color, srcfloorL) => {\r\n  //   let { scale } = this.state;\r\n  //   let srcDiv = document.getElementById(\"srcImage\");\r\n  //   let dstDiv = document.getElementById(\"dstImage\");\r\n\r\n  //   let lift = document.getElementById(\"lift\");\r\n  //   let stairs = document.getElementById(\"stairs\");\r\n\r\n  //   var canvas = document.getElementById(canvasid);\r\n  //   var context = canvas.getContext(\"2d\");\r\n  //   let gpx, gpy,pos_x,pos_y;\r\n  //   if (canvasid === \"canvas0\") {\r\n  //     gpx = this.state.canvasWidth / this.state.srcfloorL;\r\n  //     gpy = this.state.canvasHeight / this.state.srcfloorB;\r\n      \r\n  //     pos_x = gpx * (i % this.state.srcfloorL);\r\n  //     pos_y = gpy * parseInt(i / this.state.srcfloorL);\r\n  //   } else {\r\n  //     gpx = this.state.canvasWidth / this.state.dstfloorL;\r\n  //     gpy = this.state.canvasHeight / this.state.dstfloorB;\r\n    \r\n  //     pos_x = gpx * (i % this.state.dstfloorL);\r\n  //     pos_y = gpy * parseInt(i / this.state.dstfloorL);\r\n  //   }\r\n    \r\n  //   var halfScale = scale / 2;\r\n\r\n  //   if (color === \"yellow\") {\r\n  //     var rot = (Math.PI / 2) * 3;\r\n  //     var x = pos_x;\r\n  //     var y = pos_y;\r\n  //     var step = Math.PI / 5;\r\n  //     let frConnType = \"\";\r\n  //     let data = this.props.navigationInfo.map(r => {\r\n  //       return r.properties;\r\n  //     });\r\n\r\n  //     for (let k = 0; k < data.length; k++) {\r\n  //       if (data[k].node === i) {\r\n  //         frConnType = data[k].type;\r\n  //       }\r\n  //     }\r\n\r\n  //     if (frConnType === \"Stairs\") {\r\n  //       var half_scale = scale / 2;\r\n  //       pos_x = pos_x + half_scale;\r\n  //       pos_y = pos_y + half_scale;\r\n  //       context.drawImage(stairs, pos_x-12.5, pos_y-6.25, 25, 25);\r\n  //     } else if (frConnType === \"Lift\") {\r\n  //       var half_scale = scale / 2;\r\n  //       pos_x = pos_x + half_scale;\r\n  //       pos_y = pos_y + half_scale;\r\n  //       context.drawImage(lift,pos_x-12,pos_y+6.25, 25, 25);\r\n  //     }\r\n  //   } else if (color === \"green\") {\r\n  //     var half_scale = scale / 2;\r\n  //     pos_x = pos_x + half_scale;\r\n  //     pos_y = pos_y + half_scale;\r\n  //     context.drawImage(dstDiv, pos_x - 15, pos_y - 25, 25, 25);\r\n  //   } else {\r\n  //     // var half_scale = scale / 2;\r\n  //     // pos_x = pos_x + half_scale;\r\n  //     // pos_y = pos_y + half_scale;\r\n  //     let { scale } = this.state;\r\n  //     let canvas = document.getElementById(canvasid);\r\n  //     let context = canvas.getContext(\"2d\");\r\n  //     context.fillStyle = color;\r\n  //     context.fillRect(pos_x, pos_y, scale, scale);\r\n  //     // context.drawImage(srcDiv, pos_x, pos_y,scale,scale);\r\n      \r\n  //   }\r\n  // };\r\n\r\n  // color_canvas = (i, place, color) => {\r\n  //   let srcDiv = document.getElementById(\"srcImage\");\r\n  //   let dstDiv = document.getElementById(\"dstImage\");\r\n  //   if (place === \"srcmap\") {\r\n  //     let { srcfloorL, scale } = this.state;\r\n  //     var canvas = document.getElementById(\"myCanvassrc\");\r\n  //     var context = canvas.getContext(\"2d\");\r\n  //     let gpx = this.state.canvasWidth / this.state.srcfloorL;\r\n  //     let gpy = this.state.canvasHeight / this.state.srcfloorB;\r\n\r\n  //     var posX = gpx * (i % srcfloorL);\r\n  //     var posY = gpy * parseInt(i / srcfloorL);\r\n  //     var halfScale = scale / 2;\r\n  //     posX = posX + halfScale;\r\n  //     posY = posY + halfScale;\r\n  //     context.beginPath();\r\n  //     var half_scale = scale / 2;\r\n  //     context.arc(posX, posY, 5, 0, 2 * Math.PI);\r\n  //     context.fillStyle = color;\r\n  //     context.fill();\r\n  //     context.stroke();\r\n  //   } else {\r\n  //     let { dstfloorL, scale } = this.state;\r\n  //     let canvas = document.getElementById(\"myCanvasdst\");\r\n  //     let context = canvas.getContext(\"2d\");\r\n  //     let posX = scale * (i % dstfloorL);\r\n  //     let posY = scale * parseInt(i / dstfloorL);\r\n  //     context.fillStyle = color;\r\n  //     context.fillRect(posX, posY, scale, scale);\r\n  //   }\r\n  // };\r\n\r\n  color_canvas = (i, place, color) => {\r\n    let srcDiv = document.getElementById(\"srcImage\");\r\n    let dstDiv = document.getElementById(\"dstImage\");\r\n    if (place === \"srcmap\") {\r\n      let { srcfloorL, scale } = this.state;\r\n      var canvas = document.getElementById(\"myCanvassrc\");\r\n      var context = canvas.getContext(\"2d\");\r\n      // let gpx = this.state.canvasWidth / this.state.srcfloorL;\r\n      // let gpy = this.state.canvasHeight / this.state.srcfloorB;\r\n\r\n      var wrh = this.state.srcfloorL / this.state.srcfloorB;\r\n      var newWidth = this.state.canvasWidth;\r\n      var newHeight = newWidth / wrh;\r\n      if (newHeight > this.state.canvasHeight) {\r\n        newHeight = this.state.canvasHeight;\r\n        newWidth = newHeight * wrh;\r\n      }\r\n\r\n      let gpx = newWidth / this.state.srcfloorL;\r\n      let gpy = newHeight / this.state.srcfloorB;\r\n\r\n      var posX = gpx * (i % srcfloorL);\r\n      var posY = gpy * parseInt(i / srcfloorL);\r\n      var halfScale = scale / 2;\r\n      posX = posX + halfScale;\r\n      posY = posY + halfScale;\r\n      if (color === \"green\") {\r\n        var half_scale = scale / 2;\r\n        posX = posX + half_scale;\r\n        posY = posY + half_scale;\r\n        context.globalAlpha = 1;\r\n        context.drawImage(dstDiv, posX - 15, posY - 25, 12, 15);\r\n      }else if(color === \"#bdbdbd\"){\r\n        let { dstfloorL, scale } = this.state;\r\n        var half_scale = scale / 2;\r\n        posX = posX + half_scale;\r\n        posY = posY + half_scale;\r\n        context.fillStyle = color;\r\n        context.globalAlpha = 1;\r\n        context.fillRect(posX, posY, scale, scale);  \r\n      } else {\r\n        var half_scale = scale / 2;\r\n        posX = posX + half_scale;\r\n        posY = posY + half_scale;\r\n        context.globalAlpha = 1;\r\n        context.drawImage(srcDiv, posX-9,posY, 15, 15);\r\n      }\r\n    } else {\r\n      let { dstfloorL, scale } = this.state;\r\n      let canvas = document.getElementById(\"myCanvasdst\");\r\n      let context = canvas.getContext(\"2d\");\r\n      let posX = scale * (i % dstfloorL);\r\n      let posY = scale * parseInt(i / dstfloorL);\r\n      context.fillStyle = color;\r\n      context.fillRect(posX, posY, scale, scale);\r\n    }\r\n  };\r\n\r\n  find = (key, array) => {\r\n    if (array !== undefined) {\r\n      for (let i = 0; i < array.length; i++) {\r\n        if (parseInt(array[i].node) === key) {\r\n          return i;\r\n        }\r\n      }\r\n    }\r\n    return -1;\r\n  };\r\n\r\n  find_fl = (key, array) => {\r\n    if (array !== undefined) {\r\n      for (let i = 0; i < array.length; i++) {\r\n        if (\r\n          parseInt(array[i].node) === key &&\r\n          array[i].floor == \"floorconnection\"\r\n        ) {\r\n          return i;\r\n        }\r\n      }\r\n    }\r\n    return -1;\r\n  };\r\n\r\n  handleSubmit = () => {\r\n    let { srcVal, srcfloor, dstfloor, dstVal,dstfloorL,dstfloorB } = this.state;\r\n    if (srcVal != null && dstVal != null) {\r\n      var divimg = document.getElementById(\"mydiv1\");\r\n      var divcan = document.getElementById(\"mydiv\");\r\n      var len = divimg.childNodes.length;\r\n      for (var i = 0; i < len; i++) {\r\n        var elem = divimg.childNodes[0].remove();\r\n      }\r\n\r\n      len = divcan.childNodes.length;\r\n      for (var i = 0; i < len; i++) {\r\n        var elem = divcan.childNodes[0].remove();\r\n      }\r\n\r\n      if (srcfloor === dstfloor) {\r\n        var cvWidth = document.getElementById(\"myCanvassrc\").clientWidth;\r\n        let ratio = cvWidth / dstfloorL;\r\n        let height_of_canvas = ratio * dstfloorB;\r\n        let factor = Math.ceil(parseInt(cvWidth) / dstfloorL);\r\n\r\n        this.setState({\r\n          samefloor: true,\r\n          scale:factor\r\n        });\r\n        \r\n        var img1 = new Image();\r\n        var img = document.getElementById(\"myImage\");\r\n        img1.src = img.src;\r\n        img1.hidden = true;\r\n        var color_canvas = this.color_canvas;\r\n        var me = this;\r\n        var dest_x = this.state.dstVal % this.state.dstfloorL;\r\n        var dest_y = parseInt(this.state.dstVal / this.state.dstfloorL);\r\n        let imgDiv = document.getElementById(\"myImage\");\r\n        this.imgDiv = imgDiv;\r\n        let angle = 0;\r\n\r\n  // status of the pointer(s)\r\n  let pointerangle;\r\n\r\n        var canvas = window.d3.select(\"canvas\").call(\r\n            window.d3\r\n              .zoom()\r\n              .scaleExtent([1, 8])\r\n              .on(\"zoom\", zoom)\r\n          ),\r\n          context = canvas.node().getContext(\"2d\"),\r\n          width = canvas.property(\"width\"),\r\n          height = canvas.property(\"height\");\r\n        var active = window.d3.select(null);\r\n        var zoom1 = window.d3.zoom().on(\"zoom\", zoom);\r\n        var initialTransform = window.d3.zoomIdentity.translate(0, 0).scale(1);\r\n        function zoom() {\r\n          me.setState(\r\n            {\r\n              animation: false,\r\n              // pathCaption: [],\r\n              pathFloor: [],\r\n              pathArray: [],\r\n              currentStep: 0,\r\n              zoom: true\r\n            },\r\n            () => {\r\n              var transform = window.d3.event.transform;\r\n              context.save();\r\n              context.clearRect(0, 0, width, height);\r\n              context.translate(transform.x, transform.y);\r\n              context.scale(transform.k, transform.k);\r\n              draw();\r\n              context.restore();\r\n            }\r\n          );\r\n        }\r\n        function draw() {\r\n          if (active.node() === this) return reset();\r\n          active.classed(\"active\", false);\r\n          active = window.d3.select(this).classed(\"active\", true);\r\n          var wrh = me.state.dstfloorL / me.state.dstfloorB;\r\n          var newWidth = width;\r\n          var newHeight = newWidth / wrh;\r\n          if (newHeight > height) {\r\n            newHeight = height;\r\n            newWidth = newHeight * wrh;\r\n          }\r\n          context.rotate(angle);\r\n          context.globalAlpha = 0.5;\r\n          context.drawImage(\r\n            img1,\r\n            0,\r\n            0,\r\n            img1.width,\r\n            img1.height,\r\n            0,\r\n            0,\r\n            newWidth,\r\n            newHeight\r\n          );\r\n          // me.loadNonwalkable(\"myCanvassrc\")\r\n          me.callwhile(\r\n            me.state.srcfloor,\r\n            me.state.srcVal,\r\n            me.state.srcfloorL,\r\n            me.state.srcfloorB,\r\n            dest_x,\r\n            dest_y,\r\n            true,\r\n            \"myCanvassrc\"\r\n          );\r\n          color_canvas(srcVal, \"srcmap\", \"red\");\r\n          color_canvas(dstVal, \"srcmap\", \"green\");\r\n        }\r\n\r\n        function reset() {\r\n          active.classed(\"active\", false);\r\n          active = window.d3.select(null);\r\n          canvas\r\n            .transition()\r\n            .duration(750)\r\n            .call(zoom1.transform, initialTransform);\r\n        }\r\n        function timer(ms) {\r\n          return new Promise(res => setTimeout(res, ms));\r\n        }\r\n\r\n        function zoomTo() {\r\n          let X = me.croppedRegion.maxX[0] - me.croppedRegion.minX[0];\r\n          let Y = me.croppedRegion.maxY[1] - me.croppedRegion.minY[1];\r\n          var wrh = me.state.dstfloorL / me.state.dstfloorB;\r\n          var newWidth = width;\r\n          var newHeight = newWidth / wrh;\r\n          if (newHeight > height) {\r\n            newHeight = height;\r\n            newWidth = newHeight * wrh;\r\n          }\r\n          let gpx = newWidth / me.state.srcfloorL;\r\n          let gpy = newHeight / me.state.srcfloorB;\r\n          let scale = Math.min(width / (X * gpx), height / (Y * gpy));\r\n          //Zoomed\r\n          let distX =\r\n            width / 2 - me.croppedRegion.minX[0] * gpx - (X / 2) * gpx;\r\n          let distY =\r\n            height / 2 - me.croppedRegion.minY[1] * gpy - (Y / 2) * gpy;\r\n          var transform = window.d3.zoomIdentity.translate(distX, distY);\r\n          // .scale(1.2)\r\n          // .translate(-4*X,-4*Y)\r\n          canvas\r\n            .transition()\r\n            .duration(750)\r\n            .call(zoom1.transform, transform);\r\n        }\r\n        img1.onload = function() {\r\n          draw();\r\n          zoomTo();\r\n        };\r\n      } else {\r\n        this.setState({\r\n          samefloor: false,\r\n          buildingView:true\r\n        });\r\n        this.findpath();\r\n      }\r\n    } else {\r\n    }\r\n  };\r\n\r\n  loadNonwalkable = () => {\r\n    let { srcVal, srcfloor, dstfloor, dstVal } = this.state;\r\n    let navInfo = this.props.androidNav;\r\n    let floorData = navInfo.filter(r=>{\r\n      return r.floor === srcfloor\r\n    })\r\n    let polygons = floorData[0].properties.clickedPoints;\r\n    for (let i = 0; i < polygons.length; i++) {\r\n      let nodes = polygons[i].split(\",\");\r\n      var start = nodes[0];\r\n      for (let j = 1; j < nodes.length; j++) {\r\n        this.oldpath(start, nodes[j]);\r\n        this.color_canvas(start,\"srcmap\",\"#bdbdbd\");\r\n        start = nodes[j];\r\n      }\r\n      this.color_canvas(nodes[0],\"srcmap\", \"#bdbdbd\");\r\n    }\r\n  }\r\n\r\n  loadMultiFloorNonwalkable = (id) => {\r\n    let { srcVal, srcfloor, dstfloor, dstVal } = this.state;\r\n    let navInfo = this.props.androidNav;\r\n    let floorData\r\n\r\n    if(id ===\" canvas0\"){\r\n      floorData = navInfo.filter(r=>{\r\n        return r.floor === srcfloor\r\n      })\r\n    }else{\r\n      floorData = navInfo.filter(r=>{\r\n        return r.floor === dstfloor\r\n      })\r\n    }\r\n\r\n    let polygons = floorData[0].properties.clickedPoints;\r\n    for (let i = 0; i < polygons.length; i++) {\r\n      let nodes = polygons[i].split(\",\");\r\n      var start = nodes[0];\r\n      for (let j = 1; j < nodes.length; j++) {\r\n        this.oldpathMulti(start, nodes[j],id);\r\n        // this.color_canvas(start,\"srcmap\",\"#bdbdbd\",id);\r\n        start = nodes[j];\r\n      }\r\n      // this.color_canvas(nodes[0],\"srcmap\", \"#bdbdbd\",id);\r\n    }\r\n  }\r\n\r\n  oldpath = (x, y) => {\r\n    // x = coord_val  y=coord_val in normal\r\n    var a, b, c, d, e, f, g;\r\n    let { dstfloorL } = this.state;\r\n\r\n    a = parseInt(x / dstfloorL);\r\n    b = x % dstfloorL;\r\n\r\n    c = parseInt(y / dstfloorL);\r\n    d = y % dstfloorL;\r\n\r\n    e = Math.floor((a + c) / 2);\r\n    f = Math.floor((b + d) / 2);\r\n    if ((e === a) & (f === b)) {\r\n      g = dstfloorL * c + b;\r\n      this.color_canvas(g,\"srcmap\",\"#bdbdbd\");\r\n    } else if ((e === c) & (f === d)) {\r\n      g = dstfloorL * a + d;\r\n      this.color_canvas(g,\"srcmap\",\"#bdbdbd\");\r\n    } else {\r\n      g = dstfloorL * e + f;\r\n      this.color_canvas(g,\"srcmap\",\"#bdbdbd\");\r\n      this.oldpath(g, x);\r\n      this.oldpath(g, y);\r\n    }\r\n  };\r\n\r\n  color = (i,color,canvasid)=>{\r\n      let posX,posY,gpx,gpy\r\n      if(canvasid === \"canvas0\"){\r\n        let wrh = this.state.srcfloorL / this.state.srcfloorB;\r\n        let newWidth = this.state.canvasWidth;\r\n        let newHeight = newWidth / wrh;\r\n        if (newHeight > this.state.canvasHeight) {\r\n          newHeight = this.state.canvasHeight;\r\n          newWidth = newHeight * wrh;\r\n        }\r\n  \r\n        gpx = newWidth / this.state.srcfloorL;\r\n        gpy = newHeight / this.state.srcfloorB;\r\n  \r\n        posX = gpx * (i % this.state.srcfloorL);\r\n        posY = gpy * parseInt(i / this.state.srcfloorL);\r\n      }else{\r\n        let wrh = this.state.dstfloorL / this.state.dstfloorB;\r\n        let newWidth = this.state.canvasWidth;\r\n        let newHeight = newWidth / wrh;\r\n        if (newHeight > this.state.canvasHeight) {\r\n          newHeight = this.state.canvasHeight;\r\n          newWidth = newHeight * wrh;\r\n        }\r\n  \r\n        gpx = newWidth / this.state.dstfloorL;\r\n        gpy = newHeight / this.state.dstfloorB;\r\n  \r\n        posX = gpx * (i % this.state.srcfloorL);\r\n        posY = gpy * parseInt(i / this.state.srcfloorL);\r\n      }\r\n\r\n      let canvas1 = document.getElementById(canvasid);\r\n      let context1 = canvas1.getContext(\"2d\");\r\n      context1.fillStyle = color;\r\n      context1.fillRect(posX, posY, 5, 5);  \r\n  }\r\n\r\n  oldpathMulti = (x, y,id) => {\r\n    var a, b, c, d, e, f, g;\r\n    let { dstfloorL } = this.state;\r\n\r\n    a = parseInt(x / dstfloorL);\r\n    b = x % dstfloorL;\r\n\r\n    c = parseInt(y / dstfloorL);\r\n    d = y % dstfloorL;\r\n\r\n    e = Math.floor((a + c) / 2);\r\n    f = Math.floor((b + d) / 2);\r\n    if ((e === a) & (f === b)) {\r\n      g = dstfloorL * c + b;\r\n      this.color(g,\"#bdbdbd\",id);\r\n    } else if ((e === c) & (f === d)) {\r\n      g = dstfloorL * a + d;\r\n      this.color(g,\"#bdbdbd\",id);\r\n    } else {\r\n      g = dstfloorL * e + f;\r\n      this.color(g,\"#bdbdbd\",id);\r\n      this.oldpathMulti(g, x,id);\r\n      this.oldpathMulti(g, y,id);\r\n    }\r\n  };\r\n\r\n  findpath() {\r\n    var srcvert =\r\n      this.state.srcfloor + \",\" + this.state.srcVal + \",\" + \"virtual\";\r\n    var dstvert =\r\n      this.state.dstfloor + \",\" + this.state.dstVal + \",\" + \"virtual\";\r\n      console.log(\"dtsr\",srcvert,dstvert,this.graph)\r\n    if (this.graph.hasvertex(srcvert)) {\r\n    } else {\r\n      this.graph.addVertex(srcvert);\r\n      let nodes = this.props.navigationInfo;\r\n      this.flrconn = [];\r\n      for (var i = 0; i < nodes.length; i++) {\r\n        if (\r\n          nodes[i].properties.floor == this.state.srcfloor &&\r\n          nodes[i].properties.floorElement === \"FloorConnection\"\r\n        ) {\r\n          var coord = nodes[i].properties.coordinates.split(\",\");\r\n          var vert = nodes[i].properties.floor + \",\" + nodes[i].properties.node;\r\n          console.log(\"vert1\",vert)\r\n          this.flrconn.push([coord[0], coord[1], vert]);\r\n        }\r\n      }\r\n      this.callwhile(\r\n        this.state.srcfloor,\r\n        this.state.srcVal,\r\n        this.state.srcfloorL,\r\n        this.state.srcfloorB,\r\n        null,\r\n        null,\r\n        false,\r\n        null\r\n      );\r\n    }\r\n\r\n    if (this.graph.hasvertex(dstvert)) {\r\n    } else {\r\n      this.graph.addVertex(dstvert);\r\n      let nodes = this.props.navigationInfo;\r\n      this.flrconn = [];\r\n      for (var i = 0; i < nodes.length; i++) {\r\n        if (\r\n          nodes[i].properties.floor === this.state.dstfloor &&\r\n          nodes[i].properties.floorElement == \"FloorConnection\"\r\n        ) {\r\n          var coord = nodes[i].properties.coordinates.split(\",\");\r\n          var vert = nodes[i].properties.floor + \",\" + nodes[i].properties.node;\r\n          console.log(\"vert2\",vert)\r\n          this.flrconn.push([coord[0], coord[1], vert]);\r\n        }\r\n      }\r\n      this.callwhile(\r\n        this.state.dstfloor,\r\n        this.state.dstVal,\r\n        this.state.dstfloorL,\r\n        this.state.dstfloorB,\r\n        null,\r\n        null,\r\n        false,\r\n        null\r\n      );\r\n    }\r\n    this.specialcallwhile(\r\n      this.state.srcfloor,\r\n      srcvert,\r\n      this.state.dstfloor,\r\n      dstvert\r\n    );\r\n  }\r\n\r\n  specialcallwhile(srcfloor, srcvert, dstfloor, dstvert) {\r\n    console.log(\"srcfloor,srcvert,dstfloor,dstvert\",srcfloor,srcvert,dstfloor,dstvert)\r\n    var min = Number.MAX_VALUE;\r\n    var minleave = null;\r\n    var var_i;\r\n    var notthere;\r\n    let shortestpath = new Map();\r\n    let visited = new Map();\r\n    let minimumcost = new Map();\r\n    let leaves = [];\r\n    var get_keys = this.graph.AdjList.keys();\r\n    for (var i of get_keys) {\r\n      minimumcost.set(i, min);\r\n      visited.set(i, false);\r\n    }\r\n\r\n    leaves.push(srcvert);\r\n    shortestpath.set(srcvert, [srcvert]);\r\n    minimumcost.set(srcvert, 0);\r\n    this.graph.printGraph();\r\n    while (leaves.length > 0) {\r\n      min = Number.MAX_VALUE;\r\n      for (let i = 0; i < leaves.length; i++) {\r\n        if (min > minimumcost.get(leaves[i])) {\r\n          min = minimumcost.get(leaves[i]);\r\n          minleave = leaves[i];\r\n          var_i = i;\r\n        }\r\n      }\r\n      visited.set(minleave, true);\r\n\r\n      if (minleave === dstvert) {\r\n        // alert(\" i \"+JSON.stringify(shortestpath.get(dstvert)));\r\n        break;\r\n      }\r\n      leaves.splice(var_i, 1);\r\n      var get_values = this.graph.AdjList.get(minleave);\r\n      var get_dist = this.graph.Adjweights.get(minleave);\r\n      for (var jj = 0; jj < get_values.length; jj++) {\r\n        var j = get_values[jj];\r\n        var l = j.split(\",\");\r\n\r\n        var neighbour = false;\r\n        if (l.length == 2) {\r\n          neighbour = true;\r\n        } else if (l.length == 3) {\r\n          if (j == dstvert) {\r\n            neighbour = true;\r\n          }\r\n        }\r\n        if (visited.get(j) == false && neighbour) {\r\n          if (minimumcost.get(j) > minimumcost.get(minleave) + get_dist[jj]) {\r\n            minimumcost.set(j, minimumcost.get(minleave) + get_dist[jj]);\r\n            var dum = [];\r\n            dum = shortestpath.get(minleave);\r\n            dum = dum.concat([j]);\r\n            shortestpath.set(j, dum);\r\n            notthere = 1;\r\n            for (var p = 0; p < leaves.length; p++) {\r\n              if (leaves[p] == j) {\r\n                notthere = 0;\r\n              }\r\n            }\r\n            if (notthere == 1) {\r\n              leaves.push(j);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    this.createcanvas(shortestpath.get(dstvert), false);\r\n  }\r\n  createcanvas(list, samefloor) {\r\n    if (samefloor === false) {\r\n      console.log(\"list\",list)\r\n      let ans = new Map();\r\n      for (var i = 0; i < list.length; i++) {\r\n        var e = list[i].split(\",\");\r\n        if (ans.has(e[0])) {\r\n          ans.get(e[0]).push(e[1]);\r\n        } else {\r\n          ans.set(e[0], [e[1]]);\r\n        }\r\n      }\r\n      var get_keys = ans.keys();\r\n      let clist = [];\r\n      let floorLlist = [];\r\n      var cnt = 0;\r\n      for (var i of get_keys) {\r\n        var ind1 = this.findFloor(i, this.props.flrList);\r\n        var ind = this.findFloor(i, this.grids_all);\r\n        floorLlist.push(this.grids_all[ind].properties.length);\r\n        clist.push({\r\n          id: cnt,\r\n          scale: 10,\r\n          floorL: this.grids_all[ind].properties.length,\r\n          floorB: this.grids_all[ind].properties.breadth,\r\n          fileName: this.grids_all[ind].properties.fileName,\r\n          floor: this.grids_all[ind].properties.floor\r\n        });\r\n        cnt++;\r\n      }\r\n      this.setState({\r\n        canvaslist: clist\r\n      });\r\n      this.callimage(0, ans, cnt, clist, floorLlist);\r\n    }\r\n  }\r\n\r\n  callmark(ans, floorLlist) {\r\n    var get_keys = ans.keys();\r\n    var cnt = 0;\r\n    for (var i of get_keys) {\r\n      var canvasid = \"canvas\" + cnt;\r\n      var get_val = ans.get(i);\r\n      for (var j of get_val) {\r\n        this.color_canvas_spl(j, canvasid, \"blue\", floorLlist[cnt]);\r\n      }\r\n      cnt++;\r\n    }\r\n  }\r\n\r\n  callimage(cnt, ans, count, clist, floorLlist) {\r\n    console.log(\"cnt, ans, count, clist, floorLlist\",cnt, ans, count, clist, floorLlist)\r\n    let floorList = [this.state.srcfloor, this.state.dstfloor];\r\n    for (let jj = 0; jj < floorList.length; jj++) {\r\n      for (let ii = 0; ii < clist.length; ii++) {\r\n        if (floorList[jj] === clist[ii].floor) {\r\n          let i = clist[ii].floor;\r\n          let ind = this.findFloor(i, this.props.fList);\r\n          let ratio = this.state.canvasWidth / clist[ii].floorL;\r\n          let height_of_canvas = ratio * clist[ii].floorB;\r\n          let dsp;\r\n          if (clist[ii].floor === this.state.dstfloor) {\r\n            dsp = \"none\";\r\n          } else {\r\n            dsp = \"block\";\r\n          }\r\n          let canvas = window.d3\r\n            .select(\"#mydiv\")\r\n            .append(\"canvas\")\r\n            .attr(\"id\", \"canvas\" + ii)\r\n            .attr(\"style\", `border:1px solid;display:${dsp};`)\r\n            .attr(\"width\", this.state.canvasWidth)\r\n            .attr(\"height\", this.state.canvasHeight)\r\n            .call(\r\n              window.d3\r\n                .zoom()\r\n                .scaleExtent([1, 8])\r\n                .on(\"zoom\", multiCanvasZoom)\r\n            );\r\n\r\n          let width = canvas.property(\"width\");\r\n          let height = canvas.property(\"height\");\r\n          let active = window.d3.select(null);\r\n          let zoom1 = window.d3.zoom().on(\"zoom\", multiCanvasZoom);\r\n          let initialTransform = window.d3.zoomIdentity\r\n            .translate(0, 0)\r\n            .scale(1);\r\n          let ctx = canvas.node().getContext(\"2d\");\r\n          let div = document.getElementById(\"mydiv1\");\r\n          let img1 = new Image();\r\n          img1.src = `${config.imgUrl}/${clist[ii].fileName}`;\r\n\r\n          img1.hidden = true;\r\n          div.appendChild(img1);\r\n          let me = this;\r\n          let get_val = ans.get(i);\r\n          let loaded = false;\r\n          img1.onload = function() {\r\n            multiCanvas();\r\n            zoomTo()\r\n          };\r\n\r\n          function multiCanvasZoom() {\r\n            me.setState(\r\n              {\r\n                zoom: true,\r\n                // pathCaption: []\r\n              },\r\n              () => {\r\n                var transform = window.d3.event.transform;\r\n                ctx.save();\r\n                ctx.clearRect(0, 0, width, height);\r\n                ctx.translate(transform.x, transform.y);\r\n                ctx.scale(transform.k, transform.k);\r\n                loaded = false;\r\n                multiCanvas();\r\n                ctx.restore();\r\n              }\r\n            );\r\n          }\r\n\r\n          function multiCanvas() {\r\n            if (loaded === false) {\r\n              var wrh = me.state.dstfloorL / me.state.dstfloorB;\r\n              var newWidth = width;\r\n              var newHeight = newWidth / wrh;\r\n              if (newHeight > height) {\r\n                newHeight = height;\r\n                newWidth = newHeight * wrh;\r\n              }\r\n              ctx.globalAlpha = 0.5;\r\n\r\n              ctx.drawImage(\r\n                img1,\r\n                0,\r\n                0,\r\n                img1.width,\r\n                img1.height,\r\n                0,\r\n                0,\r\n                newWidth,\r\n                newHeight\r\n              );\r\n              var id = \"canvas\" + ii;\r\n              // me.loadMultiFloorNonwalkable(id)\r\n              var index = me.findFloor(i, me.grids_all);\r\n              var m = parseInt(me.grids_all[index].properties.length);\r\n              var n = parseInt(me.grids_all[index].properties.breadth);\r\n              for (var j = 0; j < get_val.length - 1; j++) {\r\n                var dest_x = get_val[j + 1] % m;\r\n                var dest_y = parseInt(get_val[j + 1] / m);\r\n                console.log(\"i, get_val[j], m, n, dest_x, dest_y, true, id\",i, get_val[j], m, n, dest_x, dest_y, true, id)\r\n                me.callwhile(i, get_val[j], m, n, dest_x, dest_y, true, id);\r\n              }\r\n              var node_count = 0;\r\n              for (var j of get_val) {\r\n                if (ii === count - 1) {\r\n                  if (node_count === get_val.length - 1) {\r\n                    me.color_canvas_spl(j, id, \"green\", floorLlist[ii]);\r\n                  } else {\r\n                    me.color_canvas_spl(j, id, \"yellow\", floorLlist[ii]);\r\n                  }\r\n                } else {\r\n                  if (node_count === 0 && ii === 0) {\r\n                    me.color_canvas_spl(j, id, \"red\", floorLlist[ii]);\r\n                  } else {\r\n                    me.color_canvas_spl(j, id, \"yellow\", floorLlist[ii]);\r\n                  }\r\n                }\r\n                node_count++;\r\n              }\r\n              loaded = true;\r\n            }\r\n          }\r\n\r\n          function zoomTo() {\r\n            let X = me.croppedRegion.maxX[0] - me.croppedRegion.minX[0];\r\n            let Y = me.croppedRegion.maxY[1] - me.croppedRegion.minY[1];\r\n            var wrh = me.state.dstfloorL / me.state.dstfloorB;\r\n            var newWidth = width;\r\n            var newHeight = newWidth / wrh;\r\n            if (newHeight > height) {\r\n              newHeight = height;\r\n              newWidth = newHeight * wrh;\r\n            }\r\n            let gpx = newWidth / me.state.srcfloorL;\r\n            let gpy = newHeight / me.state.srcfloorB;\r\n            let scale = Math.min(width / (X * gpx), height / (Y * gpy));\r\n            //Zoomed\r\n            let distX =\r\n              width / 2 - me.croppedRegion.minX[0] * gpx - (X / 2) * gpx;\r\n            let distY =\r\n              height / 2 - me.croppedRegion.minY[1] * gpy - (Y / 2) * gpy;\r\n            var transform = window.d3.zoomIdentity.translate(distX, distY);\r\n            // .scale(1.2)\r\n            // .translate(-4*X,-4*Y)\r\n            canvas\r\n              .transition()\r\n              .duration(750)\r\n              .call(zoom1.transform, transform);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  callwhile(srcfloor, srcVal, m, n, dest_x, dest_y, single, canvasid) {\r\n    var min = Number.MAX_VALUE;\r\n    var minleave = [];\r\n    var var_i;\r\n    var notthere;\r\n    for (let i = 0; i < m; i++) {\r\n      var row = [],\r\n        row1 = [],\r\n        row3 = [],\r\n        row4 = [];\r\n      for (let j = 0; j < n; j++) {\r\n        row.push(1);\r\n        row1.push(-1);\r\n        row3.push(Number.MAX_VALUE);\r\n        var row5 = [];\r\n        row4.push(row5);\r\n      }\r\n      this.shortestpath.push(row4);\r\n      this.grids.push(row);\r\n      this.visited.push(row1);\r\n      this.minimumcost.push(row3);\r\n    }\r\n    var ind1 = this.findFloor(srcfloor, this.grids_all);\r\n    if (ind1 !== -1 && this.grids_all[ind1].properties.grid_1 != null) {\r\n      for (let i = 0; i < this.grids_all[ind1].properties.grid_1.length; i++) {\r\n        var nodes = this.grids_all[ind1].properties.grid_1[i].split(\",\");\r\n        for (let j = 0; j < nodes.length; j++) {\r\n          var val = nodes[j];\r\n          var x = val % m;\r\n          var y = parseInt(val / m);\r\n          this.grids[x][y] = 0;\r\n        }\r\n      }\r\n    }\r\n    var src_x = srcVal % m;\r\n    var src_y = parseInt(srcVal / m);\r\n    this.leaves.push([src_x, src_y]);\r\n    this.shortestpath[src_x][src_y].push([src_x, src_y]);\r\n    this.minimumcost[src_x][src_y] = 0;\r\n\r\n    while (this.leaves.length > 0) {\r\n      min = Number.MAX_VALUE;\r\n      for (let i = 0; i < this.leaves.length; i++) {\r\n        if (min > this.minimumcost[this.leaves[i][0]][this.leaves[i][1]]) {\r\n          min = this.minimumcost[this.leaves[i][0]][this.leaves[i][1]];\r\n          minleave = this.leaves[i];\r\n          var_i = i;\r\n        }\r\n      }\r\n      this.visited[minleave[0]][minleave[1]] = 1;\r\n      if (single == true) {\r\n        if (minleave[0] == dest_x && minleave[1] == dest_y) {\r\n          break;\r\n        }\r\n      } else {\r\n        var check = true;\r\n        for (var ch = 0; ch < parseInt(this.flrconn.length); ch++) {\r\n          if (\r\n            this.visited[parseInt(this.flrconn[ch][0])][\r\n              parseInt(this.flrconn[ch][1])\r\n            ] == 1\r\n          ) {\r\n          } else {\r\n            check = false;\r\n          }\r\n        }\r\n        if (check == true) {\r\n          for (var ch = 0; ch < parseInt(this.flrconn.length); ch++) {\r\n            var vert = srcfloor + \",\" + srcVal + \",\" + \"virtual\";\r\n            this.graph.addEdge(\r\n              vert,\r\n              this.flrconn[ch][2],\r\n              this.minimumcost[parseInt(this.flrconn[ch][0])][\r\n                parseInt(this.flrconn[ch][1])\r\n              ],\r\n              true\r\n            );\r\n          }\r\n          this.reset_var();\r\n          break;\r\n        }\r\n      }\r\n      this.leaves.splice(var_i, 1);\r\n      for (var j = minleave[0] - 1; j <= minleave[0] + 1; j++) {\r\n        for (var k = minleave[1] - 1; k <= minleave[1] + 1; k++) {\r\n          if (j >= 0 && j < m && k >= 0 && k < n) {\r\n            if (this.visited[j][k] == -1 && this.grids[j][k] == 1) {\r\n              if (\r\n                this.minimumcost[j][k] >\r\n                this.minimumcost[minleave[0]][minleave[1]] +\r\n                  Math.sqrt(\r\n                    (minleave[0] - j) * (minleave[0] - j) +\r\n                      (minleave[1] - k) * (minleave[1] - k)\r\n                  )\r\n              ) {\r\n                this.minimumcost[j][k] =\r\n                  this.minimumcost[minleave[0]][minleave[1]] +\r\n                  Math.sqrt(\r\n                    (minleave[0] - j) * (minleave[0] - j) +\r\n                      (minleave[1] - k) * (minleave[1] - k)\r\n                  );\r\n                this.shortestpath[j][k] = this.shortestpath[minleave[0]][\r\n                  minleave[1]\r\n                ].concat([[j, k]]);\r\n                notthere = 1;\r\n                for (var p = 0; p < this.leaves.length; p++) {\r\n                  if (this.leaves[p][0] == j && this.leaves[p][1] == k) {\r\n                    notthere = 0;\r\n                  }\r\n                }\r\n                if (notthere == 1) {\r\n                  this.leaves.push([j, k]);\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (single == true) {\r\n      let { scale } = this.state;\r\n\r\n      var wrh = this.state.dstfloorL / this.state.dstfloorB;\r\n      var newWidth = this.state.canvasWidth;\r\n      var newHeight = newWidth / wrh;\r\n      if (newHeight > this.state.canvasHeight) {\r\n        newHeight = this.state.canvasHeight;\r\n        newWidth = newHeight * wrh;\r\n      }\r\n      let gpx,gpy;\r\n      if(canvasid === \"canvas0\"){\r\n        gpx = newWidth / this.state.srcfloorL;\r\n        gpy = newHeight / this.state.srcfloorB;  \r\n      }else{\r\n        gpx = newWidth / this.state.dstfloorL;\r\n        gpy = newHeight / this.state.dstfloorB;\r\n      }\r\n\r\n      var canvas = document.getElementById(canvasid);\r\n      var context = canvas.getContext(\"2d\");\r\n\r\n      if (canvas !== null) {\r\n        var context = canvas.getContext(\"2d\");\r\n      }\r\n\r\n      let sp = this.shortestpath[dest_x][dest_y];\r\n      console.log(\"sp\",sp)\r\n      let mypoints = sp.map(r => {\r\n        return { x: r[0], y: r[1] };\r\n      });\r\n      var refinedpaths = this.simplifyPath(mypoints, 2);\r\n      let allElements = this.props.navigationInfo;\r\n      let allNodes = [];\r\n      for (let i = 0; i < allElements.length; i++) {\r\n        allNodes.push(allElements[i].properties);\r\n      }\r\n      // if (\r\n      //   this.state.srcBuildingLocation.venueName ===\r\n      //     this.state.dstBuildingLocation.venueName &&\r\n      //   this.state.srcBuildingLocation.buildingName ===\r\n      //     this.state.dstBuildingLocation.buildingName\r\n      // ) {\r\n\r\n        // if (this.state.zoom === false) {\r\n          if(canvasid === \"canvas0\" || \"myCanvassrc\"){\r\n            this.findInstructions(sp, refinedpaths, allElements, srcfloor);\r\n          }else{\r\n            this.findInstructions(sp, refinedpaths, allElements, this.state.dstfloor);\r\n          }\r\n        // }\r\n        // this.findInstructions(sp, refinedpaths, allNodes, srcfloor);\r\n      // } else if (this.state.dstBuildingLocation) {\r\n      //   this.findInstructions(sp, refinedpaths, allNodes, srcfloor);\r\n      // }\r\n      \r\n      var rowX = this.shortestpath[dest_x][dest_y].map(function(row, i) {\r\n        return { x: row[0], index: i };\r\n      });\r\n      var rowY = this.shortestpath[dest_x][dest_y].map(function(row, i) {\r\n        return { y: row[1], index: i };\r\n      });\r\n      let minRowX = rowX.reduce((prev, current) =>\r\n        prev.x < current.x ? prev : current\r\n      );\r\n      let maxRowX = rowX.reduce((prev, current) =>\r\n        prev.x > current.x ? prev : current\r\n      );\r\n      let minRowY = rowY.reduce((prev, current) =>\r\n        prev.y < current.y ? prev : current\r\n      );\r\n      let maxRowY = rowY.reduce((prev, current) =>\r\n        prev.y > current.y ? prev : current\r\n      );\r\n\r\n      this.croppedRegion = {\r\n        minX: [minRowX.x, rowY[minRowX.index].y],\r\n        maxX: [maxRowX.x, rowY[maxRowX.index].y],\r\n        minY: [rowX[minRowY.index].x, minRowY.y],\r\n        maxY: [rowX[maxRowY.index].x, maxRowY.y]\r\n      };\r\n      // var max = Math.max.apply(null, maxRow);\r\n      // for (let i = 0; i < refinedpaths.length; i = i +1) {\r\n      //   context.globalAlpha = 1;\r\n      //   context.beginPath();\r\n      //   var half_scale = scale / 2;\r\n      //   var pos_x = gpx * refinedpaths[i].x;\r\n      //   var pos_y = gpy * refinedpaths[i].y;\r\n      //   pos_x = pos_x + half_scale;\r\n      //   pos_y = pos_y + half_scale;\r\n      //   context.arc(pos_x, pos_y, scale, 0, 2 * Math.PI);\r\n      //   context.fill();\r\n      //   context.fillStyle = \"#2d9cdb\";\r\n      //   context.strokeStyle = \"#2d9cdb\";\r\n      //   context.stroke();\r\n      // }\r\n\r\n      for (let i = 0; i < this.shortestpath[dest_x][dest_y].length; i = i + 4) {\r\n        context.globalAlpha = 1;\r\n        context.beginPath();\r\n        var half_scale = scale / 2;\r\n        var pos_x = gpx * this.shortestpath[dest_x][dest_y][i][0];\r\n        var pos_y = gpy * this.shortestpath[dest_x][dest_y][i][1];\r\n        pos_x = pos_x + half_scale;\r\n        pos_y = pos_y + half_scale;\r\n        context.arc(pos_x, pos_y, scale, 0, 2 * Math.PI);\r\n        context.fill();\r\n        context.fillStyle = \"#2d9cdb\";\r\n        context.strokeStyle = \"#2d9cdb\";\r\n        context.stroke();\r\n      }\r\n      this.reset_var();\r\n    }\r\n  }\r\n\r\n  interpolatePath = (turningPointsPath, seperationGap, gpx, gpy) => {\r\n    let resultpath = [];\r\n    if (turningPointsPath.length === 1) {\r\n      resultpath.push(turningPointsPath.x * gpx, turningPointsPath.x * gpx);\r\n      return resultpath;\r\n    }\r\n    for (let i = 0; i < turningPointsPath.length - 1; i++) {\r\n      let points = this.interpolatePoints(\r\n        turningPointsPath[i],\r\n        turningPointsPath[i + 1],\r\n        seperationGap,\r\n        gpx,\r\n        gpy\r\n      );\r\n      for (let k = 0; k < points.length; k++) {\r\n        resultpath.push(points[k]);\r\n      }\r\n      // resultpath.push(this.interpolatePoints(turningPointsPath[i],turningPointsPath[i+1], seperationGap, gpx, gpy));\r\n    }\r\n    return resultpath;\r\n  };\r\n\r\n  interpolatePoints(p1, p2, seperationGap, gpx, gpy) {\r\n    let d = Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));\r\n    let result = [];\r\n    result.push({ x: parseInt(p1.x), y: parseInt(p1.y) });\r\n    let counter = seperationGap;\r\n    while (counter < d) {\r\n      let x = p1.x + (counter / d) * (p2.x - p1.x);\r\n      let y = p1.y + (counter / d) * (p2.y - p1.y);\r\n      result.push({ x: parseInt(x), y: parseInt(y) });\r\n      counter += 1 * seperationGap;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  simplifyPath = (points, tolerance) => {\r\n    // helper classes\r\n    var Vector = function(x, y) {\r\n      this.x = x;\r\n      this.y = y;\r\n    };\r\n    var Line = function(p1, p2) {\r\n      this.p1 = p1;\r\n      this.p2 = p2;\r\n      this.distanceToPoint = function(point) {\r\n        // slope\r\n        var m = (this.p2.y - this.p1.y) / (this.p2.x - this.p1.x),\r\n          // y offset\r\n          b = this.p1.y - m * this.p1.x,\r\n          d = [];\r\n        // distance to the linear equation\r\n        d.push(\r\n          Math.abs(point.y - m * point.x - b) / Math.sqrt(Math.pow(m, 2) + 1)\r\n        );\r\n        // distance to p1\r\n        d.push(\r\n          Math.sqrt(\r\n            Math.pow(point.x - this.p1.x, 2) + Math.pow(point.y - this.p1.y, 2)\r\n          )\r\n        );\r\n        // distance to p2\r\n        d.push(\r\n          Math.sqrt(\r\n            Math.pow(point.x - this.p2.x, 2) + Math.pow(point.y - this.p2.y, 2)\r\n          )\r\n        );\r\n        // return the smallest distance\r\n        return d.sort(function(a, b) {\r\n          return a - b; //causes an array to be sorted numerically and ascending\r\n        })[0];\r\n      };\r\n    };\r\n\r\n    var douglasPeucker = function(points, tolerance) {\r\n      if (points.length <= 2) {\r\n        return [points[0]];\r\n      }\r\n      var returnPoints = [],\r\n        // make line from start to end\r\n        line = new Line(points[0], points[points.length - 1]),\r\n        // find the largest distance from intermediate poitns to this line\r\n        maxDistance = 0,\r\n        maxDistanceIndex = 0,\r\n        p;\r\n      for (var i = 1; i <= points.length - 2; i++) {\r\n        var distance = line.distanceToPoint(points[i]);\r\n        if (distance > maxDistance) {\r\n          maxDistance = distance;\r\n          maxDistanceIndex = i;\r\n        }\r\n      }\r\n      // check if the max distance is greater than our tollerance allows\r\n      if (maxDistance >= tolerance) {\r\n        p = points[maxDistanceIndex];\r\n        line.distanceToPoint(p, true);\r\n        // include this point in the output\r\n        returnPoints = returnPoints.concat(\r\n          douglasPeucker(points.slice(0, maxDistanceIndex + 1), tolerance)\r\n        );\r\n        // returnPoints.push( points[maxDistanceIndex] );\r\n        returnPoints = returnPoints.concat(\r\n          douglasPeucker(\r\n            points.slice(maxDistanceIndex, points.length),\r\n            tolerance\r\n          )\r\n        );\r\n      } else {\r\n        // ditching this point\r\n        p = points[maxDistanceIndex];\r\n        line.distanceToPoint(p, true);\r\n        returnPoints = [points[0]];\r\n      }\r\n      return returnPoints;\r\n    };\r\n    var arr = douglasPeucker(points, tolerance);\r\n    // always have to push the very last point on so it doesn't get left off\r\n    arr.push(points[points.length - 1]);\r\n    return arr;\r\n  };\r\n\r\n  find_angle = (p0, p1, c) => {\r\n    var p0c = { x: c.x - p0.x, y: c.y - p0.y }; // p0->c (b)\r\n    var cp1 = { x: p1.x - c.x, y: p1.y - c.y }; // p1->c (a)\r\n\r\n    // {\r\n    // x: refinedPoints[currentRPoint].x,\r\n    // y: refinedPoints[currentRPoint].y + 1\r\n    // },\r\n    // refinedPoints[currentRPoint + 1],\r\n    // refinedPoints[currentRPoint]\r\n    return (\r\n      (Math.atan2(\r\n        cp1.y * p0c.x - cp1.x * p0c.y,\r\n        p0c.x * cp1.x + p0c.y * cp1.y\r\n      ) *\r\n        180) /\r\n      Math.PI\r\n    );\r\n  };\r\n\r\n  //Module for finding the direction's equivalent commands\r\n\r\n  findDirectionword = angle => {\r\n    if (angle >= 75 && angle <= 105) return \"Turn Right\";\r\n\r\n    if (angle <= -75 && angle >= -105) return \"Turn Left\";\r\n\r\n    if ((angle >= 165 && angle <= 180) || (angle <= -165 && angle >= -180))\r\n      return \"Go Straight\";\r\n    if (angle < 0) {\r\n      if (Math.round((360 + angle) / 30) === 9) {\r\n        return \"Turn Left\";\r\n      }\r\n      // if(Math.round((360 + angle) / 30) === 12 || Math.round((360 + angle) / 30) === 0){\r\n      //   return (\"Go Straight\")\r\n      // }\r\n      // return (\"O' Clock\", {\r\n      //   angle: Math.abs(Math.round((360 + angle) / 30))\r\n      // });\r\n      return \"Turn \" + Math.round((360 + angle) / 30) + \" O' Clock\";\r\n    }\r\n\r\n    if (Math.floor(angle / 30) === 3) return \"Turn Right\";\r\n    // if(Math.round((360 + angle) / 30) === 12 || Math.round((360 + angle) / 30) === 0){\r\n    //   return this.props.t(\"Go Straight\")\r\n    // }\r\n    // return this.props.t(\"O' Clock\", {\r\n    //   angle: Math.abs(Math.round(angle / 30))\r\n    // });\r\n    return \"Turn \" + Math.round(angle / 30) + \" O' Clock\";\r\n  };\r\n\r\n  findWord = angle => {\r\n    if (angle >= 75 && angle <= 105) return \"Turn Right\";\r\n\r\n    if (angle <= -75 && angle >= -105) return \"Turn Left\";\r\n\r\n    if ((angle >= 165 && angle <= 180) || (angle <= -165 && angle >= -180))\r\n      return \"Go Straight\";\r\n    if (angle < 0) {\r\n      if (Math.round((360 + angle) / 30) === 9) {\r\n        return \"Turn Left\";\r\n      }\r\n      return \"Turn left\";\r\n    //   return \"Turn \" + Math.round((360 + angle) / 30) + \" O' Clock\";\r\n    }\r\n\r\n    if (Math.floor(angle / 30) === 3) return \"Turn Right\";\r\n    return \"Turn right\";\r\n\r\n    // return \"Turn \" + Math.round(angle / 30) + \" O' Clock\";\r\n  };\r\n\r\n  // find the error component in the iteration and leaves it for the next iteration\r\n  findErrorInAngle = angle => {\r\n    if (angle < 0) return 360 + angle - Math.round((360 + angle) / 30) * 30;\r\n    return angle - Math.round(angle / 30) * 30;\r\n  };\r\n  //same as above but in abbreviated form\r\n\r\n  findDirectionAbbreviation = angle => {\r\n    if (angle > 0) return \"Right\";\r\n\r\n    return \"Left\";\r\n  };\r\n\r\n  findInstructions = (nonRefinedPoints, refinedPoints, mapElements, floor) => {\r\n    //length of refined and non refined paths\r\n    var nRefined = refinedPoints.length;\r\n    var nNonRefined = nonRefinedPoints.length;\r\n    //converting the mapElements to ordered map for ease of access\r\n    var ElementMap = new Map();\r\n    var includedSet = new Set();\r\n    var word;\r\n    //for iteration purpose\r\n    var currentNRPoint = 0;\r\n    var currentRPoint = 0;\r\n    var flagList = [];\r\n    var i = 0;\r\n    var j = 0;\r\n    //radius defines what range to cover in a path\r\n    var radius = 3;\r\n    let pathTuning = []\r\n    //adding the elements to map\r\n    for (i = 0; i < mapElements.length; i++) {\r\n      let props = mapElements[i].properties;\r\n      if (props.floorElement === \"Rooms\") {\r\n        if (\r\n          props.floor === floor &&\r\n          props.roomName !== \"undefined\" &&\r\n          props.coordinates !== undefined\r\n        ){\r\n          Object.keys(props).map(id => {\r\n            if(id === 'roomName'){\r\n              props[`name`] = [...props[id]].join('');\r\n              delete props[id];  \r\n            }\r\n          });\r\n\r\n          ElementMap.set(props.coordinates.replace(\",\", \"@\"), mapElements[i].properties);\r\n        }\r\n      } else if (props.floorElement === \"FloorConnection\") {\r\n        if (\r\n          props.floor === floor &&\r\n          props.name !== \"undefined\" &&\r\n          props.coordinates !== undefined\r\n        ){\r\n          ElementMap.set(props.coordinates.replace(\",\", \"@\"), props);\r\n        }\r\n      } else if (props.floorElement === \"Services\") {\r\n        if (\r\n          props.floor === floor &&\r\n          props.name !== \"undefined\" &&\r\n          props.coordinates !== undefined\r\n        )\r\n          ElementMap.set(props.coordinates.replace(\",\", \"@\"), mapElements[i].properties);\r\n      } else if (props.floorElement === \"RestRooms\") {\r\n        if (\r\n          props.floor === floor &&\r\n          props.name !== \"undefined\" &&\r\n          props.coordinates !== undefined\r\n        )\r\n          ElementMap.set(props.coordinates.replace(\",\", \"@\"), mapElements[i].properties);\r\n      } else {\r\n      }\r\n    }\r\n    //finding the indices of the\r\n    while (currentNRPoint < nNonRefined && currentRPoint < nRefined) {\r\n      if (\r\n        nonRefinedPoints[currentNRPoint][0] ===\r\n          refinedPoints[currentRPoint].x &&\r\n        nonRefinedPoints[currentNRPoint][1] === refinedPoints[currentRPoint].y\r\n      ) {\r\n        flagList.push(currentNRPoint);\r\n        currentRPoint++;\r\n      }\r\n      currentNRPoint++;\r\n    }\r\n    // Generating the direction and elaborated results\r\n    var DirectionResults = [];\r\n    var ElaboratedResults = [];\r\n    //entry point insertion to the list\r\n    DirectionResults.push(\r\n      \"You are at \" +\r\n        ElementMap.get(\"\" + refinedPoints[0].x + \"@\" + refinedPoints[0].y)\r\n          .name\r\n    );\r\n    ElaboratedResults.push(\r\n      \"You are at \" +\r\n        ElementMap.get(\"\" + refinedPoints[0].x + \"@\" + refinedPoints[0].y)\r\n          .name\r\n    );\r\n    includedSet.add(refinedPoints[0].x + \"@\" + refinedPoints[0].y);\r\n    includedSet.add(\r\n      refinedPoints[nRefined - 1].x + \"@\" + refinedPoints[nRefined - 1].y\r\n    );\r\n    //iterate and /finding the desired results\r\n    var error = 0;\r\n    for (currentRPoint = 0; currentRPoint < nRefined - 1; currentRPoint++) {\r\n      var angle = 0;\r\n      var coordinates;\r\n      // this.actualAngle = 155\r\n      if (currentRPoint === 0) {\r\n        angle = this.find_angle(\r\n          {\r\n            x: refinedPoints[currentRPoint].x,\r\n            y: refinedPoints[currentRPoint].y + 1\r\n          },\r\n          refinedPoints[currentRPoint + 1],\r\n          refinedPoints[currentRPoint]\r\n        );\r\n        let path_angle = angle;\r\n        let floorangle = this.state.floorAngle;\r\n        let diff = 360 - floorangle;\r\n        // let CurrentDirection = 60;\r\n        let CurrentDirection = this.actualAngle;\r\n        // rotateDirection\r\n        this.setState({\r\n          pathAngle:path_angle\r\n        })\r\n\r\n        let gn = this.calculatePath(path_angle, diff, CurrentDirection);\r\n        angle = gn;\r\n      } else\r\n        angle = this.find_angle(\r\n          refinedPoints[currentRPoint - 1],\r\n          refinedPoints[currentRPoint + 1],\r\n          refinedPoints[currentRPoint]\r\n        );\r\n      angle = angle + error;\r\n      error = this.findErrorInAngle(angle);\r\n\r\n      let hypo = 0.6 * (flagList[currentRPoint + 1] - flagList[currentRPoint])\r\n      let base = Math.cos(angle)*hypo;  \r\n      let height = Math.sin(angle)*hypo;\r\n      this.forwardStep = parseInt(Math.abs(height));   \r\n      this.lastStep = parseInt(Math.abs(base));\r\n      let steps = parseInt(this.forwardStep + hypo);\r\n\r\n      if (currentRPoint === nRefined - 2) {\r\n        word = this.findDirectionword(angle);\r\n        DirectionResults.push(word);\r\n        DirectionResults.push(\r\n          \"Move \" +\r\n            Math.round(\r\n              0.6 * (flagList[currentRPoint + 1] - flagList[currentRPoint])\r\n            ) +\r\n            \" steps forward\"\r\n        );\r\n        pathTuning.push({points:refinedPoints[currentRPoint],angle:angle,base,height,word})\r\n        break;\r\n      }\r\n     \r\n      if(hypo <= 6){\r\n        word = this.findWord(angle);\r\n        if(word.includes(\"Turn 0 O' Clock\") ){\r\n\r\n          word = \"Go straight\"\r\n        }\r\n\r\n        pathTuning.push({points:refinedPoints[currentRPoint],angle:angle,base,height,word})\r\n        DirectionResults.push(word + \" Move \" + steps + \" steps forward\");\r\n    }else{\r\n        word = this.findDirectionword(angle);\r\n        // if(word.includes(\"Turn 0 O' Clock\") ){\r\n        //   word = \"Go straight\"\r\n        // }\r\n        pathTuning.push({points:refinedPoints[currentRPoint],angle:angle,base,height,word})\r\n        let step = parseInt(Math.round(\r\n            0.6 * (flagList[currentRPoint + 1] - flagList[currentRPoint])\r\n          ))\r\n        DirectionResults.push(word);\r\n        DirectionResults.push(\" Move \" +\r\n        step +\r\n        \" steps forward\");\r\n    }\r\n\r\n      //this part of code handles the intermediate importatnt rooms\r\n      var begin = flagList[currentRPoint] + 1;\r\n      var end = flagList[currentRPoint + 1];\r\n\r\n      while (begin < end) {\r\n        var currpoint = nonRefinedPoints[begin];\r\n        for (\r\n          i = Math.max(0, currpoint[0] - radius);\r\n          i < currpoint[0] + radius;\r\n          i++\r\n        ) {\r\n          for (\r\n            j = Math.max(0, currpoint[1] - radius);\r\n            j < currpoint[1] + radius;\r\n            j++\r\n          ) {\r\n            if (!includedSet.has(i + \"@\" + j) && ElementMap.has(i + \"@\" + j)) {\r\n              var tempAngle = this.find_angle(\r\n                {\r\n                  x: nonRefinedPoints[begin - 1][0],\r\n                  y: nonRefinedPoints[begin - 1][1]\r\n                },\r\n                { x: i, y: j },\r\n                { x: nonRefinedPoints[begin][0], y: nonRefinedPoints[begin][1] }\r\n              );\r\n              ElaboratedResults.push(\r\n                ElementMap.get(i + \"@\" + j).roomName +\r\n                  \" on your \" +\r\n                  this.findDirectionAbbreviation(tempAngle)\r\n              );\r\n              includedSet.add(i + \"@\" + j);\r\n            }\r\n          }\r\n        }\r\n        begin++;\r\n      }\r\n    }\r\n    let elem = ElementMap.get(\r\n      \"\" +\r\n        refinedPoints[nRefined - 1].x +\r\n        \"@\" +\r\n        refinedPoints[nRefined - 1].y\r\n    );\r\n\r\n    if(elem.type === \"Rest Rooms\"){\r\n      let name = `${elem.washroomType} Washroom (${elem.floor} Floor)`\r\n      DirectionResults.push(\r\n        \"You will reach \" +\r\n         name\r\n      );\r\n    }else if(elem.type === \"Drinking Water | Non Drinking\"){\r\n      let name = `Drinking Water Point (${elem.floor} Floor)`\r\n      DirectionResults.push(\r\n        \"You will reach \" +\r\n         name\r\n      );\r\n    }else{\r\n      DirectionResults.push(\r\n        \"You will reach \" +\r\n          ElementMap.get(\r\n            \"\" +\r\n              refinedPoints[nRefined - 1].x +\r\n              \"@\" +\r\n              refinedPoints[nRefined - 1].y\r\n          ).name\r\n      );\r\n    }\r\n    ElaboratedResults.push(\r\n      \"You have reached \" +\r\n        ElementMap.get(\r\n          \"\" +\r\n            refinedPoints[nRefined - 1].x +\r\n            \"@\" +\r\n            refinedPoints[nRefined - 1].y\r\n        ).name\r\n    );\r\n    let resultMap = DirectionResults.map(r => {\r\n      return { instruction: r, floor: floor };\r\n    });\r\n    this.pathTune = pathTuning\r\n    resultMap.forEach(element => {\r\n      this.setState(prevState => ({\r\n        pathFloor: [...prevState.pathFloor, element]\r\n      }));\r\n    });\r\n    let step = DirectionResults[0];\r\n    if(this.state.srcfloor === this.state.dstfloor){\r\n      if(this.state.zoom === false){\r\n      this.setState(\r\n        prevState => ({\r\n          pathArray: [...prevState.pathArray, DirectionResults],\r\n          srtdFlr: [...prevState.srtdFlr, floor],\r\n          instructionReady:true\r\n\r\n        }),\r\n        () => {\r\n          let flrArry = [this.state.srcfloor, this.state.dstfloor];\r\n          if (this.state.pathArray.length === 2) {\r\n            for (let k = 0; k < flrArry.length; k++) {\r\n              if (this.state.srtdFlr[k] === flrArry[k]) {\r\n                const merge3 = this.state.pathArray.flat(1);\r\n                this.setState({\r\n                  pathCaption: merge3\r\n                });\r\n              }\r\n            }\r\n          } else {\r\n            for (let k = 0; k < DirectionResults.length; k++) {\r\n              this.setState(prevState => ({\r\n                pathCaption: [...prevState.pathCaption, DirectionResults[k]]\r\n              }),()=>{\r\n                let instruction = this.filterInstruction();\r\n                this.setState({\r\n                  pathCaption:instruction\r\n                })\r\n                // console.log(\"instructions\",instruction,this.state.pathCaption)\r\n              });\r\n            }\r\n          }\r\n        }\r\n      );\r\n    }\r\n    }else{\r\n        if(this.state.srcfloor === floor){\r\n          this.setState({\r\n            firstFlrInstruction:DirectionResults,\r\n            firstFlr:floor,\r\n            currentFloor:floor,\r\n            // instructionReady:true\r\n          })\r\n        }else{\r\n          this.setState({\r\n            secondFlrInstruction:DirectionResults,\r\n            secondFlr:floor,\r\n            instructionReady:true\r\n          })\r\n        }\r\n    }\r\n  };\r\n\r\n  calculatePath = (path_angle, diff, CurrentDirection) => {\r\n    let pathGN, rotateDirection, path_angleN;\r\n    if (path_angle >= 0 && path_angle < 106) {\r\n      pathGN = 360 - (diff - path_angle);\r\n      rotateDirection = pathGN - CurrentDirection;\r\n    } else if (path_angle > 105 && path_angle <= 180) {\r\n      pathGN = path_angle - diff;\r\n      rotateDirection = pathGN - CurrentDirection;\r\n    } else if (path_angle <= -1 && path_angle >= -180) {\r\n      path_angleN = 180 + path_angle;\r\n      pathGN = path_angleN + 180 - diff;\r\n      rotateDirection = pathGN - CurrentDirection;\r\n    }\r\n    return rotateDirection;\r\n  };\r\n\r\n  reset_var() {\r\n    this.grids = [];\r\n    this.visited = [];\r\n    this.shortestpath = [];\r\n    this.minimumcost = [];\r\n    this.leaves = [];\r\n  }\r\n\r\n  /* NAVIGATION DRAWER */\r\n  drawerToggleClickHandler = () => {\r\n    this.setState(prevState => {\r\n      return { sideDrawerOpen: !prevState.sideDrawerOpen };\r\n    });\r\n  };\r\n\r\n  backdropClickHandler = () => {\r\n    this.setState({ sideDrawerOpen: false });\r\n  };\r\n  incCanvas = () => {\r\n    let { scale } = this.state;\r\n    if (scale < 30) {\r\n      this.setState(\r\n        {\r\n          scale: scale + 1\r\n        },\r\n        () => {\r\n          this.handleSubmit();\r\n        }\r\n      );\r\n    }\r\n  };\r\n  decCanvas = () => {\r\n    let { scale } = this.state;\r\n    if (scale > 2) {\r\n      this.setState(\r\n        {\r\n          scale: scale - 1\r\n        },\r\n        () => {\r\n          this.handleSubmit();\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  handleDstChange = e => {\r\n    let name = null;\r\n    let val = null;\r\n    let floor = null;\r\n    let resp = \"\";\r\n    let navInfo = this.props.navigationInfo;\r\n    if (e.length > 0) {\r\n      for (let i = 0; i < navInfo.length; i++) {\r\n        if (e[0].floorElement === \"Rooms\") {\r\n          resp = `${e[0].roomName}(${e[0].floor})`;\r\n          if (e[0].node === navInfo[i].properties.node) {\r\n            name = navInfo[i].properties.roomName;\r\n            floor = navInfo[i].properties.floor;\r\n            val = navInfo[i].properties.node;\r\n          }\r\n        } else if (e[0].floorElement === \"FloorConnection\") {\r\n          if (e[0].node === navInfo[i].properties.node) {\r\n            name = navInfo[i].properties.name;\r\n            floor = navInfo[i].properties.floor;\r\n            val = navInfo[i].properties.node;\r\n          }\r\n          resp = `${e[0].name}(${e[0].floor})`;\r\n        } else if (e[0].floorElement === \"Services\") {\r\n          if (e[0].node === navInfo[i].properties.node) {\r\n            name = navInfo[i].properties.type;\r\n            floor = navInfo[i].properties.floor;\r\n            val = navInfo[i].properties.node;\r\n          }\r\n          resp = `${e[0].type}(${e[0].floor})`;\r\n        } else if (e[0].floorElement === \"RestRooms\") {\r\n          if (e[0].node === navInfo[i].properties.node) {\r\n            name = navInfo[i].properties.type;\r\n            floor = navInfo[i].properties.floor;\r\n            val = navInfo[i].properties.node;\r\n          }\r\n          resp = `${e[0].type} Washroom (${e[0].floor})`;\r\n        } else {\r\n        }\r\n      }\r\n      var ind = this.findFloor(floor, this.props.flrList.data);\r\n      this.setState(\r\n        {\r\n          dstName: name,\r\n          dstfloor: floor,\r\n          dstVal: parseInt(val),\r\n          dstfloorL: this.props.flrList.data[ind].floorL,\r\n          dstfloorB: this.props.flrList.data[ind].floorB,\r\n          imgName: this.props.flrList.data[ind].fileName,\r\n          buildingView: true,\r\n          showDstMenu: false,\r\n          dstReadOnly: true,\r\n          pathCaption: [],\r\n          selectedLocation: `${name},${floor} floor, ${this.state.dstBuildingLocation.buildingName}, ${this.state.dstBuildingLocation.venueName}`,\r\n          selectedDestinationVenue: `${name}, ${floor} floor, ${this.state.selectedDestinationBuilding}, ${this.state.selectedDestinationVenue}`\r\n\r\n        },\r\n        () => {\r\n          this.handleSubmit();\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  dstChange = e => {\r\n    let name = null;\r\n    let val = null;\r\n    let floor = null;\r\n    let resp = \"\";\r\n    let navInfo = this.props.navigationInfo;\r\n    for (let i = 0; i < navInfo.length; i++) {\r\n      if (e.floorElement === \"Rooms\") {\r\n        resp = `${e.roomName}(${e.floor})`;\r\n        if (e.node === navInfo[i].properties.node) {\r\n          name = navInfo[i].properties.roomName;\r\n          floor = e[0].floor;\r\n          val = navInfo[i].properties.node;\r\n        }\r\n      } else if (e.floorElement === \"FloorConnection\") {\r\n        if (e.node === navInfo[i].properties.node) {\r\n          name = navInfo[i].properties.name;\r\n          floor = e[0].floor;\r\n          val = navInfo[i].properties.node;\r\n        }\r\n        resp = `${e.name}(${e.floor})`;\r\n      } else if (e.floorElement === \"Services\") {\r\n        if (e.node === navInfo[i].properties.node) {\r\n          name = navInfo[i].properties.type;\r\n          floor = e[0].floor;\r\n          val = navInfo[i].properties.node;\r\n        }\r\n        resp = `${e.type}(${e.floor})`;\r\n      } else if (e.floorElement === \"RestRooms\") {\r\n        if (e.node === navInfo[i].properties.node) {\r\n          name = navInfo[i].properties.type;\r\n          floor = e[0].floor;\r\n          val = navInfo[i].properties.node;\r\n        }\r\n        resp = `${e.type} Washroom (${e.floor})`;\r\n      } else {\r\n      }\r\n    }\r\n    var ind = this.findFloor(floor, this.props.flrList.data);\r\n    this.setState(\r\n      {\r\n        dstName: name,\r\n        dstfloor: floor,\r\n        dstVal: parseInt(val),\r\n        dstfloorL: this.props.flrList.data[ind].floorL,\r\n        dstfloorB: this.props.flrList.data[ind].floorB,\r\n        imgName: this.props.flrList.data[ind].fileName\r\n      },\r\n      () => {\r\n        this.handleSubmit();\r\n      }\r\n    );\r\n  };\r\n\r\n  handleSrcChange = e => {\r\n    let { srcBuildingLocation } = this.state;\r\n    let name = null;\r\n    let val = null;\r\n    let floor = null;\r\n    let resp = \"\";\r\n    let navInfo = this.props.navigationInfo;\r\n    for (let i = 0; i < navInfo.length; i++) {\r\n      if (e[0].floorElement === \"Rooms\") {\r\n        resp = `${e[0].roomName}(${e[0].floor})`;\r\n        if (e[0].node === navInfo[i].properties.node) {\r\n\r\n          name = navInfo[i].properties.roomName?navInfo[i].properties.roomName:navInfo[i].properties.name;\r\n          floor = e[0].floor;\r\n          val = navInfo[i].properties.node;\r\n        }\r\n      } else if (e[0].floorElement === \"FloorConnection\") {\r\n        if (e[0].node === navInfo[i].properties.node) {\r\n          name = navInfo[i].properties.name;\r\n          floor = e[0].floor;\r\n          val = navInfo[i].properties.node;\r\n        }\r\n        resp = `${e[0].name}(${e[0].floor})`;\r\n      } else if (e[0].floorElement === \"Services\") {\r\n        if (e[0].node === navInfo[i].properties.node) {\r\n          name = navInfo[i].properties.type;\r\n          floor = e[0].floor;\r\n          val = navInfo[i].properties.node;\r\n        }\r\n        resp = `${e[0].type}(${e[0].floor})`;\r\n      } else if (e[0].floorElement === \"RestRooms\") {\r\n        if (e[0].node === navInfo[i].properties.node) {\r\n          name = navInfo[i].properties.type;\r\n          floor = e[0].floor;\r\n          val = navInfo[i].properties.node;\r\n        }\r\n        resp = `${e[0].type} Washroom (${e[0].floor})`;\r\n      } else {\r\n      }\r\n    }\r\n\r\n    var ind = this.findFloor(floor, this.props.flrList.data);\r\n\r\n    // var srcBar = document.getElementById(\"src-bar\");\r\n    // var navHeight = document.getElementById(\"nav-height\");\r\n    // var element = document.getElementById(\"myCanvassrc\");\r\n    // var topPos = element.getBoundingClientRect().top;\r\n    // let realHeight = this.state.canvasHeight - (srcBar.clientHeight + navHeight.clientHeight);\r\n    // // let ratio = this.state.canvasWidth / this.props.flrList.data[ind].floorL;\r\n    // // let height_of_canvas = ratio * this.props.flrList.data[ind].floorB;\r\n\r\n    // // image is smaller than the canvas so no need to resize\r\n    // // if (img.Width < canvasWidth && img.Height < canvasHeight)\r\n    // // return;\r\n\r\n    // // Figure out the ratio\r\n    // let ratioX = this.state.canvasWidth / this.props.flrList.data[ind].floorL;\r\n    // let ratioY = this.state.canvasHeight / this.props.flrList.data[ind].floorB;\r\n    // // use whichever multiplier is smaller\r\n    // let ratio = ratioX < ratioY ? ratioX : ratioY;\r\n    // let newHeight = this.props.flrList.data[ind].floorL * ratio;\r\n    // let newWidth = this.props.flrList.data[ind].floorB * ratio;\r\n\r\n    this.setState(\r\n      {\r\n        srcName: name,\r\n        srcfloor: floor,\r\n        srcVal: parseInt(val),\r\n        srcfloorL: this.props.flrList.data[ind].floorL,\r\n        srcfloorB: this.props.flrList.data[ind].floorB,\r\n        imgName: this.props.flrList.data[ind].fileName,\r\n        showStrtMenu: false,\r\n        srcReadOnly: true,\r\n        zoomLevel: \"18\",\r\n        pathCaption: [],\r\n        currentLocation: `${name}, ${floor} floor, ${srcBuildingLocation.buildingName}, ${srcBuildingLocation.venueName}`,\r\n        selectedVenue: `${name}, ${floor} floor, ${this.state.selectedBuilding}, ${this.state.selectedVenue}`\r\n      },\r\n      () => {\r\n        const map = this.leafletMap.leafletElement;\r\n        map.flyTo(\r\n          new L.LatLng(\r\n            this.props.flrList.data[0].lat,\r\n            this.props.flrList.data[0].lng\r\n          ),\r\n          map.getZoom(),\r\n          {\r\n            animate: true,\r\n            duration: 2\r\n          }\r\n        );\r\n        // setTimeout(() => {\r\n          this.handleSubmit();\r\n        // }, \"2000\");\r\n      }\r\n    );\r\n  };\r\n\r\n  srcChange = e => {\r\n    let name = null;\r\n    let val = null;\r\n    let floor = null;\r\n    let resp = \"\";\r\n    let navInfo = this.props.navigationInfo;\r\n    for (let i = 0; i < navInfo.length; i++) {\r\n      if (e.floorElement === \"Rooms\") {\r\n        resp = `${e.roomName}(${e.floor})`;\r\n        if (e.node === navInfo[i].properties.node) {\r\n          name = navInfo[i].properties.roomName;\r\n          floor = navInfo[i].properties.floor;\r\n          val = navInfo[i].properties.node;\r\n        }\r\n      } else if (e.floorElement === \"FloorConnection\") {\r\n        if (e.node === navInfo[i].properties.node) {\r\n          name = navInfo[i].properties.name;\r\n          floor = navInfo[i].properties.floor;\r\n          val = navInfo[i].properties.node;\r\n        }\r\n        resp = `${e.name}(${e.floor})`;\r\n      } else if (e.floorElement === \"Services\") {\r\n        if (e.node === navInfo[i].properties.node) {\r\n          name = navInfo[i].properties.type;\r\n          floor = navInfo[i].properties.floor;\r\n          val = navInfo[i].properties.node;\r\n        }\r\n        resp = `${e.type}(${e.floor})`;\r\n      } else if (e.floorElement === \"RestRooms\") {\r\n        if (e.node === navInfo[i].properties.node) {\r\n          name = navInfo[i].properties.type;\r\n          floor = navInfo[i].properties.floor;\r\n          val = navInfo[i].properties.node;\r\n        }\r\n      } else {\r\n      }\r\n    }\r\n    var ind = this.findFloor(floor, this.props.flrList.data);\r\n    this.setState(\r\n      {\r\n        srcName: name,\r\n        srcfloor: floor,\r\n        srcVal: parseInt(val),\r\n        srcfloorL: this.props.flrList.data[ind].floorL,\r\n        srcfloorB: this.props.flrList.data[ind].floorB,\r\n        imgName: this.props.flrList.data[ind].fileName\r\n      },\r\n      () => {\r\n        this.handleSubmit();\r\n      }\r\n    );\r\n  };\r\n\r\n  onSuggestionsFetchRequested = ({ value }) => {\r\n    this.setState({\r\n      suggestions: this.getSuggestions(value)\r\n    });\r\n  };\r\n\r\n  onDstSuggestionsFetchRequested = ({ value }) => {\r\n    this.setState({\r\n      dstSuggestions: this.getDstSuggestions(value)\r\n    });\r\n  };\r\n  // Autosuggest will call this function every time you need to clear suggestions.\r\n  onSuggestionsClearRequested = () => {\r\n    this.setState({\r\n      suggestions: []\r\n    });\r\n  };\r\n\r\n  onDstSuggestionsClearRequested = () => {\r\n    this.setState({\r\n      dstSuggestions: []\r\n    });\r\n  };\r\n\r\n  getSuggestions = value => {\r\n    const inputValue = value.trim().toLowerCase();\r\n    const inputLength = inputValue.length;\r\n    return inputLength === 0\r\n      ? []\r\n      : this.state.list.filter(lang => {\r\n          let resp = \"\";\r\n          if (lang.floorElement === \"Rooms\") {\r\n            resp = `${lang.roomName}(${lang.floor})`;\r\n          } else if (lang.floorElement === \"FloorConnection\") {\r\n            resp = `${lang.name}(${lang.floor})`;\r\n          } else if (lang.floorElement === \"Services\") {\r\n            resp = `${lang.type}(${lang.floor})`;\r\n          } else if (lang.floorElement === \"RestRooms\") {\r\n            resp = `${lang.type} Washroom (${lang.floor})`;\r\n          } else {\r\n          }\r\n          return resp.toLowerCase().slice(0, inputLength) === inputValue;\r\n        });\r\n  };\r\n\r\n  getDstSuggestions = value => {\r\n    const inputValue = value.trim().toLowerCase();\r\n    const inputLength = inputValue.length;\r\n    return inputLength === 0\r\n      ? []\r\n      : this.state.list.filter(lang => {\r\n          let resp = \"\";\r\n          if (lang.floorElement === \"Rooms\") {\r\n            resp = `${lang.roomName}(${lang.floor})`;\r\n          } else if (lang.floorElement === \"FloorConnection\") {\r\n            resp = `${lang.name}(${lang.floor})`;\r\n          } else if (lang.floorElement === \"Services\") {\r\n            resp = `${lang.type}(${lang.floor})`;\r\n          } else if (lang.floorElement === \"RestRooms\") {\r\n            resp = `${lang.type} Washroom (${lang.floor})`;\r\n          } else {\r\n          }\r\n          return resp.toLowerCase().slice(0, inputLength) === inputValue;\r\n        });\r\n  };\r\n\r\n  getSuggestionValue = suggestion => {\r\n    this.srcChange(suggestion);\r\n    if (suggestion.floorElement === \"Rooms\") {\r\n      return suggestion.roomName;\r\n    } else if (suggestion.floorElement === \"FloorConnection\") {\r\n      return suggestion.name;\r\n    } else if (suggestion.floorElement === \"Services\") {\r\n      return suggestion.type;\r\n    } else if (suggestion.floorElement === \"RestRooms\") {\r\n      return suggestion.type;\r\n    } else {\r\n    }\r\n  };\r\n\r\n  getDstSuggestionValue = suggestion => {\r\n    this.dstChange(suggestion);\r\n    if (suggestion.floorElement === \"Rooms\") {\r\n      return suggestion.roomName;\r\n    } else if (suggestion.floorElement === \"FloorConnection\") {\r\n      return suggestion.name;\r\n    } else if (suggestion.floorElement === \"Services\") {\r\n      return suggestion.type;\r\n    } else if (suggestion.floorElement === \"RestRooms\") {\r\n      return suggestion.type;\r\n    } else {\r\n    }\r\n  };\r\n\r\n  renderSuggestion = suggestion => {\r\n    let resp = \"\";\r\n    if (suggestion.floorElement === \"Rooms\") {\r\n      resp = `${suggestion.roomName}(${suggestion.floor})`;\r\n    } else if (suggestion.floorElement === \"FloorConnection\") {\r\n      resp = `${suggestion.name}(${suggestion.floor})`;\r\n    } else if (suggestion.floorElement === \"Services\") {\r\n      resp = `${suggestion.type}(${suggestion.floor})`;\r\n    } else if (suggestion.floorElement === \"RestRooms\") {\r\n      resp = `${suggestion.type} Washroom (${suggestion.floor})`;\r\n    } else {\r\n    }\r\n    return <div style={{ color: \"white\" }}>{resp}</div>;\r\n  };\r\n\r\n  renderDstSuggestion = suggestion => {\r\n    let resp = \"\";\r\n    if (suggestion.floorElement === \"Rooms\") {\r\n      resp = `${suggestion.roomName}(${suggestion.floor})`;\r\n    } else if (suggestion.floorElement === \"FloorConnection\") {\r\n      resp = `${suggestion.name}(${suggestion.floor})`;\r\n    } else if (suggestion.floorElement === \"Services\") {\r\n      resp = `${suggestion.type}(${suggestion.floor})`;\r\n    } else if (suggestion.floorElement === \"RestRooms\") {\r\n      resp = `${suggestion.type} Washroom (${suggestion.floor})`;\r\n    } else {\r\n    }\r\n    return <div style={{ color: \"white\" }}>{resp}</div>;\r\n  };\r\n\r\n  onChange = (event, { newValue }) => {\r\n    this.setState({\r\n      value: newValue\r\n    });\r\n  };\r\n\r\n  onSrcChange = (event, { newValue }) => {\r\n    this.setState({\r\n      dstValue: newValue\r\n    });\r\n  };\r\n\r\n  nvgtSrcBld = () => {\r\n    let { tmpSrcLocation } = this.state;\r\n    let e = [tmpSrcLocation];\r\n    this.fetchSrcBldLocation(\r\n      e,\r\n      tmpSrcLocation.venueName,\r\n      tmpSrcLocation.buildingName,\r\n      \"srcBuildingLocation\",\r\n      k => {\r\n        this.handleDstChange(k);\r\n      }\r\n    );\r\n  };\r\n\r\n  nvgtDstBld = () => {\r\n    let { tmpDstLocation } = this.state;\r\n    let e = [tmpDstLocation];\r\n    this.fetchDstBldLocation(\r\n      e,\r\n      tmpDstLocation.venueName,\r\n      tmpDstLocation.buildingName,\r\n      \"dstBuildingLocation\",\r\n      k => {\r\n        this.handleDstChange(e);\r\n      }\r\n    );\r\n  };\r\n\r\n  fetchSrcBldLocation = (e, venueName, buildingName, point, cb) => {\r\n    let data = { venueName, buildingName };\r\n    this.props.floorList(data, () => {\r\n      this.props.getAllBuildingElements(data, () => {\r\n        let navInfo = this.props.navigationInfo;\r\n        for (let i = 0; i < navInfo.length; i++) {\r\n          if (\r\n            navInfo[i].properties.floorElement === \"Rooms\" &&\r\n            navInfo[i].properties.doorGroup === \"Entrance | Exit\"\r\n          ) {\r\n            this.srcBldDstPointChange(e, () => {\r\n              let k = [navInfo[i].properties];\r\n              this.setNavigation(this.state.selectedSrcLocation);\r\n              cb(k);\r\n            });\r\n          }\r\n        }\r\n      });\r\n    });\r\n  };\r\n\r\n  fetchDstBldLocation = (e, venueName, buildingName, point, cb) => {\r\n    let data = { venueName, buildingName };\r\n    this.props.floorList(data, () => {\r\n      this.props.getAllBuildingElements(data, () => {\r\n        let navInfo = this.props.navigationInfo;\r\n        for (let i = 0; i < navInfo.length; i++) {\r\n          if (\r\n            navInfo[i].properties.floorElement === \"Rooms\" &&\r\n            navInfo[i].properties.doorGroup === \"Entrance | Exit\"\r\n          ) {\r\n            let props = [navInfo[i].properties];\r\n            this.srcBldDstPointChange(props, () => {\r\n              let k = [navInfo[i].properties];\r\n              this.setNavigation(this.state.selectedSrcLocation);\r\n              cb(k);\r\n            });\r\n          }\r\n        }\r\n      });\r\n    });\r\n  };\r\n\r\n  srcBldDstPointChange = (e, cb) => {\r\n    let { srcBuildingLocation } = this.state;\r\n    let name = null;\r\n    let val = null;\r\n    let floor = null;\r\n    let resp = \"\";\r\n    let navInfo = this.props.navigationInfo;\r\n    for (let i = 0; i < navInfo.length; i++) {\r\n      if (e[0].floorElement === \"Rooms\") {\r\n        if (e[0].node === navInfo[i].properties.node) {\r\n          name = navInfo[i].properties.roomName;\r\n          floor = e[0].floor;\r\n          val = navInfo[i].properties.node;\r\n        }\r\n      } else if (e[0].floorElement === \"FloorConnection\") {\r\n        if (e[0].node === navInfo[i].properties.node) {\r\n          name = navInfo[i].properties.name;\r\n          floor = e[0].floor;\r\n          val = navInfo[i].properties.node;\r\n        }\r\n      } else if (e[0].floorElement === \"Services\") {\r\n        if (e[0].node === navInfo[i].properties.node) {\r\n          name = navInfo[i].properties.type;\r\n          floor = e[0].floor;\r\n          val = navInfo[i].properties.node;\r\n        }\r\n      } else if (e[0].floorElement === \"RestRooms\") {\r\n        if (e[0].node === navInfo[i].properties.node) {\r\n          name = navInfo[i].properties.type;\r\n          floor = e[0].floor;\r\n          val = navInfo[i].properties.node;\r\n        }\r\n      } else {\r\n      }\r\n    }\r\n    var ind = this.findFloor(floor, this.props.flrList.data);\r\n    this.setState(\r\n      {\r\n        srcName: name,\r\n        srcfloor: floor,\r\n        srcVal: parseInt(val),\r\n        srcfloorL: this.props.flrList.data[ind].floorL,\r\n        srcfloorB: this.props.flrList.data[ind].floorB,\r\n        imgName: this.props.flrList.data[ind].fileName,\r\n        showStrtMenu: false,\r\n        srcReadOnly: true,\r\n        zoomLevel: \"18\"\r\n      },\r\n      () => {\r\n        const map = this.leafletMap.leafletElement;\r\n        map.flyTo(\r\n          new L.LatLng(\r\n            this.props.flrList.data[0].lat,\r\n            this.props.flrList.data[0].lng\r\n          ),\r\n          map.getZoom(),\r\n          {\r\n            animate: true,\r\n            duration: 2\r\n          }\r\n        );\r\n        setTimeout(() => {\r\n          this.handleSubmit();\r\n        }, \"2000\");\r\n      }\r\n    );\r\n    cb();\r\n  };\r\n\r\n  navigateNext = () => {\r\n    let div = document.getElementById(\"mydiv\").children;\r\n    div[0].style.display = \"none\";\r\n    div[1].style.display = \"block\";\r\n    this.setState({\r\n      next: false,\r\n      currentFloor: this.state.dstfloor,\r\n      currentStep:0\r\n    });\r\n  };\r\n\r\n  navigatePrevious = () => {\r\n    let div = document.getElementById(\"mydiv\").children;\r\n    div[1].style.display = \"none\";\r\n    div[0].style.display = \"block\";\r\n    this.setState({\r\n      next: true,\r\n      currentFloor: this.state.srcfloor,\r\n      currentStep:0\r\n    });\r\n  };\r\n\r\n  handleBuildingView = () => {\r\n    this.setState({\r\n      showInstructions: false,\r\n    });\r\n  };\r\n\r\n  previousButton = ()=> {\r\n    let currentStep = this.state.currentStep;\r\n    if(this.state.srcfloor !== this.state.dstfloor){\r\n    let instructionSet =   this.state.currentFloor === this.state.firstFlr? this.state.firstFlrInstruction:this.state.secondFlrInstruction\r\n    // if (currentStep < instructionSet.length) {\r\n    //   this.multifloorNext(instructionSet);\r\n    // }\r\n      if (currentStep !== 0) {\r\n        if (currentStep < instructionSet.length) {\r\n          this.multifloorPrev(instructionSet);\r\n        }\r\n      }\r\n    }else{\r\n      if (currentStep !== 0) {\r\n        if (currentStep < this.state.pathCaption.length) {\r\n          this._prev();\r\n        }\r\n      }\r\n    }\r\n\r\n  \r\n    return null;\r\n  }\r\n\r\n  nextButton = ()=> {\r\n    let currentStep = this.state.currentStep;\r\n    if(this.state.srcfloor !== this.state.dstfloor){\r\n    let instructionSet =   this.state.currentFloor === this.state.firstFlr? this.state.firstFlrInstruction:this.state.secondFlrInstruction\r\n    if (currentStep < instructionSet.length) {\r\n      this.multifloorNext(instructionSet);\r\n    }\r\n    }else{\r\n      if (currentStep < this.state.pathCaption.length) {\r\n        this._next();\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  _next = () => {\r\n    let currentStep = this.state.currentStep;\r\n    currentStep =\r\n      currentStep >= this.state.pathCaption.length - 1\r\n        ? this.state.pathCaption.length\r\n        : currentStep + 1;\r\n\r\n    if (this.state.pathCaption[currentStep]) {\r\n      let step = this.state.pathCaption[currentStep];\r\n      var utter = new window.SpeechSynthesisUtterance(step);\r\n      window.speechSynthesis.cancel();\r\n      window.speechSynthesis.speak(utter);\r\n    }\r\n    // if (\r\n    //   this.state.pathFloor[currentStep] !== undefined &&\r\n    //   this.state.pathFloor[currentStep].floor !==\r\n    //     this.state.pathFloor[currentStep - 1].floor\r\n    // ) {\r\n    //   this.navigateNext();\r\n    // }\r\n\r\n    this.setState({\r\n      currentStep: currentStep\r\n    });\r\n  };\r\n\r\n  multifloorNext = (instructionSet)=>{\r\n    let currentStep = this.state.currentStep;\r\n    currentStep =\r\n      currentStep >= instructionSet.length - 1\r\n        ? instructionSet.length\r\n        : currentStep + 1;\r\n    if (instructionSet[currentStep]) {\r\n      let step = instructionSet[currentStep];\r\n      var utter = new window.SpeechSynthesisUtterance(step);\r\n      window.speechSynthesis.cancel();\r\n      window.speechSynthesis.speak(utter);\r\n    }\r\n    this.setState({\r\n      currentStep: currentStep\r\n    });\r\n  }\r\n\r\n  multifloorPrev = (instructionSet)=>{\r\n    let currentStep = this.state.currentStep;\r\n    currentStep = currentStep <= 1 ? 0 : currentStep - 1;\r\n    if (this.state.pathFloor[currentStep] !== undefined) {\r\n      let step = instructionSet[currentStep];\r\n      var utter = new window.SpeechSynthesisUtterance(step);\r\n      window.speechSynthesis.cancel();\r\n      window.speechSynthesis.speak(utter);\r\n    }\r\n    this.setState({\r\n      currentStep: currentStep\r\n    });\r\n  }\r\n\r\n  _prev = () => {\r\n    let currentStep = this.state.currentStep;\r\n    currentStep = currentStep <= 1 ? 0 : currentStep - 1;\r\n\r\n    if (this.state.pathFloor[currentStep] !== undefined) {\r\n      let step = this.state.pathCaption[currentStep];\r\n      console.log(\"step\",step)\r\n      var utter = new window.SpeechSynthesisUtterance(step);\r\n      window.speechSynthesis.cancel();\r\n      window.speechSynthesis.speak(utter);\r\n\r\n      // if (\r\n      //   this.state.pathFloor[currentStep + 1].floor !==\r\n      //   this.state.pathFloor[currentStep].floor\r\n      // ) {\r\n      //   let step = this.state.pathCaption[currentStep-1];\r\n      //   var utter = new window.SpeechSynthesisUtterance(step);\r\n      //   window.speechSynthesis.cancel();\r\n      //   window.speechSynthesis.speak(utter);\r\n      //   // this.navigatePrevious();\r\n      // }\r\n    }else{\r\n      \r\n   \r\n    }\r\n    this.setState({\r\n      currentStep: currentStep\r\n    });\r\n  };\r\n\r\n  playInstruction = (pause)=>{\r\n    var synth = window.speechSynthesis;\r\n    synth.cancel();\r\n    if(pause === true){\r\n      synth.pause();\r\n    }else{\r\n      synth.resume();\r\n    }\r\n    // let utterance = new SpeechSynthesisUtterance(\"Hello world!\");\r\n    // synth.speak(utterance);\r\n    // synth.resume()\r\n    let instruction = this.filterInstruction()\r\n\r\n    instruction.forEach(r=>{\r\n      var utterance1 = new SpeechSynthesisUtterance(r);\r\n      synth.speak(utterance1);\r\n    })\r\n  }\r\n\r\n  filterInstruction = ()=>{\r\n    var instructions = [];\r\n    var stepsCount = [];\r\n    let instruction;\r\n    if(this.state.srcfloor === this.state.dstfloor){\r\n      instruction = this.state.pathCaption\r\n    }else{\r\n      instruction = this.state.currentFloor === this.state.firstFlr?this.state.firstFlrInstruction:this.state.secondFlrInstruction\r\n    }\r\n    instructions = instruction &&  instruction.map((r, i) => {\r\n                        if (\r\n                          r.includes(\"right\") ||\r\n                          r.includes(\"Right\")\r\n                        ) {\r\n                          return r \r\n                        } else if (\r\n                          r.includes(\"left\") ||\r\n                          r.includes(\"Left\")\r\n                        ) {\r\n                          return r \r\n                        } else if (\r\n                          r.includes(\"forward\")\r\n                        ) {\r\n                          console.log(\"'r\",r)\r\n\r\n                          let theNum  = r.match(/\\d+/)[0]\r\n                          stepsCount.push(parseInt(theNum))\r\n                          return r \r\n                        } else if (\r\n                          r.includes(\"Turn 1 O' Clock\") ||\r\n                          r.includes(\"Turn 2 O' Clock\") ||\r\n                          r.includes(\"Turn 3 O' Clock\") \r\n                        ) {\r\n                          return'Turn slight right' \r\n                        }else if(  \r\n                          r.includes(\"Turn 4 O' Clock\") ||\r\n                          r.includes(\"Turn 5 O' Clock\")){\r\n                            return 'Turn back and then turn slight left' \r\n                        } else if (\r\n                          r.includes(\"Turn 7 O' Clock\") ||\r\n                          r.includes(\"Turn 8 O' Clock\") ||\r\n                          r.includes(\"Turn 9 O' Clock\") \r\n                        ) {\r\n                          return 'turn slight left'\r\n                        }else if(                        \r\n                          r.includes(\"Turn 10 O' Clock\") ||\r\n                          r.includes(\"Turn 11 O' Clock\")){\r\n                            return 'Turn back and then turn slight left'\r\n                        } else if (\r\n                          r.includes(\"Turn 6 O' Clock\")\r\n                        ) {\r\n                          return 'Turn back'\r\n                        } else if (r.includes(\"You are at\")) {\r\n                          return r\r\n                        } else if (r.includes(\"reached\")) {\r\n                          return r\r\n                        } else if (\r\n                          r.includes(\"Turn 0 O' Clock\") ||\r\n                          r.includes(\"Turn 12 O' Clock\")\r\n                        ) {\r\n                          return null \r\n                        }else{\r\n                          return r\r\n                        }\r\n    })\r\n    console.log(\"instrcutsion\",instruction)\r\n    var distance\r\n\r\n    if(instructions){\r\n      const add = arr => arr.reduce((a, b) => a + b, 0);\r\n      distance = add(stepsCount);\r\n      instructions = instructions.filter( (el)=> {\r\n        return el != null;\r\n      });\r\n    }\r\n    // instructions.splice(instructions.length-2, 1);\r\n    return instructions;\r\n  }\r\n\r\n  handleSourceLocation = (vals)=>{\r\n      this.setState(\r\n        {\r\n          selectedSrcLocation: `${this.state.selectedVenue}${this.state.selectedBuilding}`,\r\n          selectedDstLocation: `${this.state.selectedVenue}${this.state.selectedBuilding}`,\r\n          buildingView: false\r\n        },\r\n        () => {\r\n          this.props.androidNavigation({venueName:this.state.selectedVenue,buildingName:this.state.selectedBuilding},()=>{\r\n          })\r\n          this.fetchLocation(\r\n            this.state.selectedVenue,\r\n            this.state.selectedBuilding,\r\n            \"srcBuildingLocation\"\r\n          );\r\n          this.fetchLocation(\r\n            this.state.selectedVenue,\r\n            this.state.selectedBuilding,\r\n            \"dstBuildingLocation\"\r\n          );\r\n          if(this.state.dstName !== \"Select Destination\"){\r\n            this.handleSubmit()\r\n          }else{\r\n            this.setNavigation(this.state.selectedDstLocation);\r\n          }\r\n        }\r\n      );\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n\r\n    var combineInstructions = [];\r\n    if(this.state.srcfloor === this.state.dstfloor){\r\n      combineInstructions = this.state.pathCaption\r\n    }else{\r\n      if(this.state.firstFlr === this.state.currentFloor){\r\n        combineInstructions = this.state.firstFlrInstruction\r\n      }else{\r\n        combineInstructions = this.state.secondFlrInstruction\r\n      }\r\n      // if(this.state.firstFlrInstruction = this.state.secondFlrInstruction)\r\n    }\r\n\r\n    let { center, currentPos } = this.state;\r\n    let { srcBuildingLocation, dstBuildingLocation } = this.state;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <div hidden={!this.state.showInstructions}>\r\n          <Instructions\r\n            dstAddress={this.state.dstAddress}\r\n            globalTime={this.state.globalTime}\r\n            globalDistance={this.state.globalDistance}\r\n            currentLocation={this.state.currentLocation}\r\n            handleBuildingView={this.handleBuildingView}\r\n            instructionSet={\r\n               combineInstructions\r\n            }\r\n            buildingView={this.state.buildingView}\r\n            sourceLocation={this.state.currentLocation}\r\n            dstLocation={this.state.dstAddress}\r\n          />\r\n        </div>\r\n        {/* style={{background:\"#e0e0e0\"}} */}\r\n        <div hidden={this.state.showInstructions}  >\r\n          {!this.state.buildingView && ! this.state.showStrtMenu && !this.state.showDstMenu ? (\r\n            <React.Fragment>\r\n                  <div\r\n                className=\"src-dst fixed-top\"\r\n                id=\"src-bar\"\r\n                // style={{ marginTop: \"50px\" }}\r\n              >\r\n                <div className=\"row w-100  mx-auto\">\r\n                  <div className=\"col-12 p-0\">\r\n                    <button\r\n                      className=\"btn-nvgtn text-white\"\r\n                      onClick={() => {\r\n                        localStorage.setItem('cuurent-link','SELECT STARTING POINT')\r\n                        this.setState({\r\n                          showStrtMenu: true,\r\n                          showDstMenu:false,\r\n                          srcReadOnly: false\r\n                        },()=>{\r\n                          this.props.navContent('SELECT STARTING POINT',()=>{\r\n\r\n                          })\r\n                        });\r\n                      }}\r\n                    >\r\n                      <img\r\n                        className=\"float-left mt-2 mr-2\"\r\n                        src=\"/inclunav/assets/images/profile.svg\"\r\n                        alt=\"user location\"\r\n                        alt=\"current location\"\r\n                      />\r\n                      <p className=\"strt-txt text-justify \">\r\n                        {this.state.currentLocation}\r\n                      </p>\r\n                    </button>\r\n               \r\n                  </div>\r\n                </div>\r\n                <div className=\"mx-auto hr-line\" />\r\n                <div className=\"row w-100  mx-auto mt-3\" \r\n                // style={{marginTop:\"50px\"}}\r\n                >\r\n                <div className=\"col-12 p-0\">\r\n                    <button\r\n                      className=\"btn-nvgtn text-white\"\r\n                      onClick={() => {\r\n                        this.setState({\r\n                          showDstMenu: true,\r\n                          showStrtMenu:false,\r\n                          dstReadOnly: false\r\n                        },()=>{\r\n                          this.props.navContent('SELECT DESTINATION',()=>{\r\n\r\n                          })\r\n                        });\r\n                      }}\r\n                    >\r\n                       <img\r\n                        className=\"float-left mt-2 mr-2 my-auto\"\r\n                        src=\"/inclunav/assets/images/navigation.svg\"\r\n                        alt=\"select destination\"\r\n                      />\r\n                      <p className=\"strt-txt text-justify \">\r\n                        {this.state.dstAddress}\r\n                      </p>\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </React.Fragment>\r\n          ) : null}       \r\n        {this.state.showStrtMenu\r\n                ? \r\n               \r\n                <SelectSource\r\n                srcName = {this.state.srcName}\r\n                currentLocation = {this.state.currentLocation}\r\n                selectedSrcLocation = {this.state.selectedSrcLocation}\r\n                locationList = {this.state.locationList}\r\n                srcReadOnly = {this.state.srcReadOnly}\r\n                handleBlurr = {()=>{\r\n                  this.setState({\r\n                    srcReadOnly:!this.state.srcReadOnly\r\n                  })\r\n                }}\r\n                handleDstAct = {()=>{\r\n                  this.setState({\r\n                    destinationActive:true\r\n                  })\r\n                }}\r\n                srcFloorList = {this.state.srcFloorList}\r\n                dstAddress = {this.state.dstAddress}\r\n                showStrtMenu = {() => {\r\n                  this.setState({ showStrtMenu: false });\r\n                }}\r\n                destinationActive  = {this.state.destinationActive}\r\n                venueChange = {(val)=>{\r\n                    this.setState({\r\n                      selectedVenue:val,\r\n                      selectedDestinationVenue:val,\r\n                      destinationActive:false,\r\n                      showMenu:true\r\n                    },()=>{\r\n                      this.getBuildingList(val)\r\n                    })\r\n                }}\r\n                selectedVenue = {this.state.selectedVenue}\r\n                buildingList = {this.state.buildingList}\r\n                showMenu = {this.state.showMenu}\r\n                selectedBuilding = {this.state.selectedBuilding}\r\n                buildingChange = {( vals )=>{\r\n\r\n                    this.setState({\r\n                      selectedBuilding:vals,\r\n                      selectedDestinationBuilding:vals\r\n                    },()=>{\r\n                      this.handleSourceLocation()\r\n                    })\r\n                }}\r\n                venueList = {this.state.venueList}\r\n                handleSelectSource = {(e)=>{\r\n                  if (e.length > 0) {\r\n                    this.setState(\r\n                      {\r\n                        tmpSrcLocation: e[0],\r\n                      },\r\n                      () => {\r\n                        this.handleSrcChange(e);\r\n                      }\r\n                    );\r\n                  }\r\n                }}\r\n                handleSourceLocation = {(e)=>{\r\n                  console.log(\"ee\",e)\r\n                  if (e.length > 0) {\r\n                    this.setState(\r\n                      {\r\n                        selectedSrcLocation: e[0],\r\n                        selectedDstLocation: e[0],\r\n                        buildingView: false,\r\n                        selectedVenue:e[0].venueName,\r\n                        selectedBuilding:e[0].buildingName\r\n                      },\r\n                      () => {\r\n                        this.props.androidNavigation({venueName:e[0].venueName,buildingName:e[0].buildingName},()=>{\r\n                        })\r\n                        this.fetchLocation(\r\n                          e[0].venueName,\r\n                          e[0].buildingName,\r\n                          \"srcBuildingLocation\"\r\n                        );\r\n                        this.fetchLocation(\r\n                          e[0].venueName,\r\n                          e[0].buildingName,\r\n                          \"dstBuildingLocation\"\r\n                        );\r\n                        if(this.state.dstName !== \"Select Destination\"){\r\n                          this.handleSubmit()\r\n                        }else{\r\n                          this.setNavigation(this.state.selectedDstLocation);\r\n                        }\r\n                      }\r\n                    );\r\n                  }\r\n                }}\r\n                />\r\n                :null}\r\n                \r\n              {this.state.showDstMenu\r\n                ? \r\n                <SelectDestination\r\n                dstName={this.state.dstName}\r\n                currentLocation = {this.state.currentLocation}\r\n                selectedDstLocation = {this.state.selectedDstLocation}\r\n                selectedDestination = {this.state.selectedDestination}\r\n                locationList = {this.state.locationList}\r\n                dstReadOnly = {this.state.dstReadOnly}\r\n                handleBlurr = {()=>{\r\n                  this.setState({\r\n                    dstReadOnly:!this.state.dstReadOnly\r\n                  })\r\n                }}\r\n                dstFloorList={this.state.dstFloorList}\r\n                showDstMenu={()=>{\r\n                  this.setState({ showDstMenu: false });\r\n                }}\r\n                destinationActive  = {this.state.destinationActive}\r\n                venueChange = {(val)=>{\r\n                  this.setState({\r\n                    selectedDestinationVenue:val,\r\n                    destinationActive:true,\r\n                    showMenu:true\r\n                  },()=>{\r\n                    this.getBuildingList(val)\r\n                  })\r\n                }}\r\n                handleDstAct = {()=>{\r\n                  this.setState({\r\n                    destinationActive:true\r\n                  })\r\n                }}\r\n                selectedVenue = {this.state.selectedDestinationVenue}\r\n                buildingList = {this.state.buildingList}\r\n                selectedBuilding = {this.state.selectedDestinationBuilding}\r\n                selBuild={this.state.selectedDestinationBuilding}\r\n                buildingChange = {( vals )=>{\r\n                    this.setState({\r\n                      selectedDestinationBuilding:vals\r\n                    },()=>{\r\n                      this.handleSourceLocation()\r\n                    })\r\n                }}\r\n                venueList = {this.state.venueList}\r\n\r\n                handleSelectDestination = {(e)=>{\r\n                  let resp = \"\";\r\n                  if (e[0].floorElement === \"Rooms\") {\r\n                    resp = `${e[0].roomName}(${e[0].floor})`;\r\n                  } else if (e[0].floorElement === \"FloorConnection\") {\r\n                    resp = `${e[0].name}(${e[0].floor})`;\r\n                  } else if (e[0].floorElement === \"Services\") {\r\n                    resp = `${e[0].type}(${e[0].floor})`;\r\n                  } else if (e[0].floorElement === \"RestRooms\") {\r\n                    resp = `${e[0].type} Washroom (${e[0].floor})`;\r\n                  } else {\r\n                    resp = \"\";\r\n                  }\r\n                  this.setState(\r\n                    {\r\n                      tmpDstLocation: e[0],\r\n                      dstName:e[0],\r\n                      dstAddress: `${resp}, ${this.state.dstBuildingLocation.buildingName}, ${this.state.dstBuildingLocation.venueName}`,\r\n                      showDstMenu: false,\r\n                      dstReadOnly: true,\r\n                      destinationActive:false,\r\n                      showMenu:false\r\n                    },\r\n                    () => {\r\n                      if (\r\n                        srcBuildingLocation.venueName ===\r\n                          dstBuildingLocation.venueName &&\r\n                        srcBuildingLocation.buildingName ===\r\n                          dstBuildingLocation.buildingName\r\n                      ) {\r\n                        this.handleDstChange(e);\r\n                      }\r\n                    }\r\n                  );\r\n                }}\r\n                handleSourceLocation = {(e)=>{\r\n                if (e.length > 0) {\r\n                  let venueName = e[0].venueName;\r\n                  let buildingName = e[0].buildingName;\r\n                  let venue = this.state.srcBuildingLocation.venueName;\r\n                  let building = this.state.srcBuildingLocation.buildingName;\r\n                  if (!venue && !building) {\r\n                    let data = { venueName, buildingName };\r\n                    let props;\r\n                    this.props.androidNavigation({venueName:e[0].venueName,buildingName:e[0].buildingName},()=>{\r\n                    })\r\n                    this.setNavigation(data);\r\n                    this.props.floorList(data, () => {\r\n                      this.props.getAllBuildingElements(data, () => {\r\n                        let navInfo = this.props.navigationInfo;\r\n                        for (let i = 0; i < navInfo.length; i++) {\r\n                          if (\r\n                            navInfo[i].properties.floorElement === \"Rooms\" &&\r\n                            navInfo[i].properties.doorGroup ===\r\n                              \"Entrance | Exit\"\r\n                          ) {\r\n                            props = navInfo[i].properties;\r\n                            var ind = this.findFloor(\r\n                              \"ground\",\r\n                              this.props.flrList.data\r\n                            );\r\n                            this.setState(\r\n                              {\r\n                                srcName: props.roomName,\r\n                                srcfloor: \"ground\",\r\n                                srcVal: parseInt(props.node),\r\n                                srcfloorL: this.props.flrList.data[ind]\r\n                                  .floorL,\r\n                                srcfloorB: this.props.flrList.data[ind]\r\n                                  .floorB,\r\n                                imgName: this.props.flrList.data[ind]\r\n                                  .fileName,\r\n                                pathCaption: []\r\n                              },\r\n                              () => {\r\n                                  this.handleSubmit();\r\n                              }\r\n                            );\r\n                          }\r\n                        }\r\n                       \r\n                      });\r\n                    });\r\n                  }\r\n                  this.setState(\r\n                    {\r\n                      selectedDstLocation: e[0],\r\n                      buildingView: false\r\n                    },\r\n                    () => {\r\n                      this.fetchLocation(\r\n                        e[0].venueName,\r\n                        e[0].buildingName,\r\n                        \"dstBuildingLocation\"\r\n                      );\r\n                      // if (\r\n                      //   this.state.selectedSrcLocation.venueName ===\r\n                      //     this.state.selectedDstLocation.venueName &&\r\n                      //   this.state.selectedSrcLocation.buildingName ===\r\n                      //     this.state.selectedDstLocation.buildingName\r\n                      // ) {\r\n                      //   this.setNavigation(this.state.selectedDstLocation);\r\n                      // }\r\n                      if (\r\n                        this.state.selectedVenue ===\r\n                          this.state.selectedDestinationVenue &&\r\n                        this.state.selectedBuilding ===\r\n                          this.state.selectedDestinationBuilding\r\n                      ) {\r\n                        this.setNavigation(this.state.selectedDstLocation);\r\n                      }\r\n                    }\r\n                  );\r\n                }\r\n                }}\r\n                />\r\n                :null}\r\n\r\n          {this.state.buildingView ? (\r\n            <InstructionTab\r\n              pathCaption={combineInstructions}\r\n              currentStep={this.state.currentStep}\r\n              nextButton={()=>this.nextButton()}\r\n              imgDiv={this.imgDiv}\r\n            />\r\n          ) : null}\r\n          <div hidden={this.state.buildingView}>\r\n            <MapContainer\r\n              style={{ height: \"100vh\" }}\r\n              center={center}\r\n              zoom={this.state.zoomLevel}\r\n              ref={m => {\r\n                this.leafletMap = m;\r\n              }}\r\n              onClick={this.handleClick}\r\n            >\r\n              <TileLayer\r\n                url={\"http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"}\r\n              />\r\n              <Marker position={this.state.currentPos} draggable={true}>\r\n                <Popup position={this.state.currentPos}>\r\n                  Current location:\r\n                  <pre>{JSON.stringify(this.state.currentPos, null, 2)}</pre>\r\n                </Popup>\r\n              </Marker>\r\n            </MapContainer>\r\n          </div>\r\n          <div\r\n            hidden={!this.state.buildingView}\r\n            className=\"mt-1\"\r\n            style={{ height: \"100%\", width: \"100%\", overflow: \"scroll\" }}\r\n          >\r\n            {!this.state.samefloor ? (\r\n              <div\r\n            className=\"btn-group-vertical btn-info rounded  shadow mt-5\"\r\n            role=\"group\"\r\n            aria-label=\"First group\"\r\n            style={{ position: \"fixed\", zIndex: \"5\", background: \"#56c9ad\" }}\r\n          >\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-dark text-white text-capitalize\"\r\n                  onClick={this.navigatePrevious}\r\n                >\r\n                  { this.props.flrList.data.map((r,i)=>{\r\n                    if(this.state.srcfloor === r.floor){\r\n                        return `L${i}`\r\n                    }\r\n                  })}\r\n                </button>\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-dark text-white\"\r\n                  onClick={this.navigateNext}\r\n                >\r\n              { this.props.flrList.data.map((r,i)=>{\r\n                    if(this.state.dstfloor === r.floor){\r\n                        return `L${i}`\r\n                    }\r\n                  })}\r\n                </button>\r\n          </div>\r\n            ) : null}\r\n            <div style={{ height: \"100%\", top: \"50px\" }}>\r\n              <img\r\n                alt=\"map\"\r\n                id=\"myImage\"\r\n                src={`${config.imgUrl}/${this.state.imgName}`}\r\n                hidden={true}\r\n              ></img>\r\n              <img\r\n                alt=\"map\"\r\n                id=\"srcImage\"\r\n                src=\"/inclunav/assets/images/source.svg\"\r\n                style={{WebkitTransform: `rotate(20deg)`}}\r\n                hidden={true}\r\n              ></img>\r\n              <img\r\n                alt=\"map\"\r\n                id=\"dstImage\"\r\n                src=\"/inclunav/assets/images/destination.svg\"\r\n                hidden={true}\r\n              ></img>\r\n              <img\r\n                alt=\"map\"\r\n                id=\"stairs\"\r\n                src=\"/inclunav/assets/images/stair.png\"\r\n                hidden={true}\r\n              ></img>\r\n              <img\r\n                alt=\"map\"\r\n                id=\"lift\"\r\n                src=\"/inclunav/assets/images/lift.png\"\r\n                hidden={true}\r\n              ></img>\r\n              <div id=\"mydiv1\"></div>\r\n              <div className=\"canvaDiv\" ref=\"canv\" onScroll={this.handleScroll}>\r\n                <canvas\r\n                  id=\"myCanvassrc\"\r\n                  width={this.state.canvasWidth}\r\n                  height={this.state.canvasHeight}\r\n                  style={{ position: \"absolute\" }}\r\n                  hidden={!this.state.samefloor}\r\n                ></canvas>\r\n              </div>\r\n              <div id=\"mydiv\"></div>\r\n            </div>\r\n          </div>\r\n          { !this.state.instructionReady ? (\r\n            <GlobalDetails\r\n              toggle={this.state.toggle}\r\n              dstName={this.state.dstName}\r\n              dstAddress={this.state.dstAddress}\r\n              globalDistance={this.state.globalDistance}\r\n              currentLocation={this.state.currentLocation}\r\n              dstBuildingLocation = {this.state.dstBuildingLocation}\r\n              tmpDstLocation = {this.state.tmpDstLocation}\r\n              destinationVenue = {this.state.selectedDestinationVenue}\r\n              destinationBuilding = {this.state.selectedDestinationBuilding}\r\n              dstfloor = {this.state.dstfloor}\r\n              dstVal = {this.state.dstVal}\r\n              stateToggle = {()=>{\r\n                this.setState({ toggle: !this.state.toggle });\r\n              }}\r\n              openModal = {this.onOpenModal}\r\n              closeBuilding = {()=>{\r\n                this.setState({\r\n                  buildingView: false\r\n                });\r\n              }}\r\n              // instructionSet={this.state.currentFloor === this.state.firstFlr? this.state.firstFlrInstruction:this.state.secondFlrInstruction}\r\n              instructionSet={\r\n                combineInstructions\r\n              }\r\n              handleShowInstructions = {()=>{\r\n                this.setState({\r\n                  showInstructions: true\r\n                });\r\n              }}\r\n            />\r\n            // null\r\n          ) : (\r\n            <React.Fragment>\r\n            <NavigationDetails\r\n              toggle={this.state.toggle}\r\n              dstName={this.state.dstName}\r\n              dstAddress={this.state.dstAddress}\r\n              globalDistance={this.state.globalDistance}\r\n              currentLocation={this.state.currentLocation}\r\n              dstBuildingLocation={this.state.dstBuildingLocation}\r\n              stateToggle = {()=>{\r\n                this.setState({ toggle: !this.state.toggle });\r\n              }}\r\n              currentStep = {this.state.currentStep}\r\n              nextButton = {this.nextButton}\r\n              previousButton = {this.previousButton}\r\n              instructionSet={this.state.currentFloor === this.state.firstFlr? this.state.firstFlrInstruction:this.state.secondFlrInstruction}\r\n              playInstruction={(pause)=>{\r\n                this.playInstruction(pause)\r\n              }\r\n              }\r\n              closeBuilding = {() => {\r\n                this.setState({\r\n                  buildingView: false,\r\n                  instructionReady: false,\r\n                  zoom: false\r\n                });\r\n              }}\r\n              handleShowInstructions = {()=>{\r\n                this.setState({\r\n                  showInstructions: true\r\n                });\r\n              }}\r\n            />\r\n            </React.Fragment>\r\n          )}\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    getImage: state.imgDetails,\r\n    allNodes: state.getAllElem,\r\n    flrList: state.floorList,\r\n    userProfile:state.userPortfolio,\r\n    navigationInfo: state.navigationInfo,\r\n    vnList: state.venueList,\r\n    bldList: state.buildingList,\r\n    gpsLocation: state.gpsLocation,\r\n    androidNav: state.androidNavigation,\r\n    globalRoutes:state.osmRoutes,\r\n    pickupPoint:state.pickupPoints,\r\n    currentTab:state.navContent\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n  floorList,\r\n  imgDetails,\r\n  getAllBuildingElements,\r\n  venueList,\r\n  buildingList,\r\n  getGpsLocation,\r\n  androidNavigation,\r\n  getUserPortfolio,\r\n  osmRoutes,\r\n  pickupPoints,\r\n  navContent\r\n})(Navigation);\r\n","C:\\Users\\Assistech\\mishor\\inclunav\\src\\components\\dashboard\\Landing.js",["694","695","696","697","698","699","700","701","702","703","704","705","706"],"C:\\Users\\Assistech\\mishor\\inclunav\\src\\components\\dashboard\\navigation\\GlobalDetails.js",[],"C:\\Users\\Assistech\\mishor\\inclunav\\src\\components\\dashboard\\navigation\\SourceMenu.js",["707"],"// import { Typeahead } from \"react-bootstrap-typeahead\";\r\n\r\n// const SourceMenu = (props) => {\r\n//     return (\r\n//       <div className=\"d-flex justify-content-center\">\r\n//         <div className=\"src-location-menu\">\r\n//           <div\r\n//             className=\"source-button-strt mb-1\"\r\n//             onClick={() => {\r\n//               props.showStrtMenu()\r\n//             }}\r\n//           >\r\n//             <img\r\n//               className=\"float-left mt-2 mr-2\"\r\n//               src=\"/inclunav/assets/images/profile.svg\"\r\n//               alt=\"user location\"\r\n//             />\r\n//             <p className=\"src-menu-txt text-justify mt-0\">\r\n//               {props.currentLocation}\r\n//             </p>\r\n//           </div>\r\n//           <div className=\"source-button mb-1\">\r\n//             <img\r\n//               className=\"float-left mt-2 mr-2\"\r\n//               src=\"/inclunav/assets/images/search.png\"\r\n//               alt=\"search location\"\r\n//             />\r\n//             <Typeahead\r\n//               required\r\n//               placeholder={`${props.selectedSrcLocation.buildingName} (${props.selectedSrcLocation.venueName})`}\r\n//               filterBy={[\"venueName\", \"buildingName\"]}\r\n//               labelKey={option => {\r\n//                 return `${option.buildingName.split(/(?=[A-Z])/).join(\" \")}(${option.venueName.split(/(?=[A-Z])/).join(\" \")})`;\r\n//               }}\r\n//               renderMenuItemChildren={option => (\r\n//                 <div>\r\n//                   <div>\r\n//                     <small>\r\n//                       {option.buildingName.length > 0\r\n//                         ? option.buildingName.split(/(?=[A-Z])/).join(\" \")\r\n//                         : \"\"}\r\n//                       ({option.venueName.split(/(?=[A-Z])/).join(\" \")}{\" \"}\r\n//                       {parseInt(option.venueDistance)} KiloMeter )\r\n//                     </small>\r\n//                   </div>\r\n//                 </div>\r\n//               )}\r\n//               onChange={e => {\r\n//                 props.handleSourceLocation(e)\r\n//               }}\r\n//               disabled={false}\r\n//               id=\"source\"\r\n//               value={props.selectedSrcLocation.venueName}\r\n//               options={props.locationList}\r\n//               name=\"list\"\r\n//               className=\"mb-2 form-control-dashboard mt-1\"\r\n//               inputProps={{\r\n//                 readOnly: props.srcReadOnly\r\n//               }}\r\n//               onBlur={e => {}}\r\n//             />\r\n//           </div>\r\n//           <div className=\"source-button mb-1\">\r\n//             <img\r\n//               className=\"float-left mt-2 mr-2\"\r\n//               src=\"/inclunav/assets/images/search_area.png\"\r\n//               alt=\"search area\"\r\n//             />\r\n//             <Typeahead\r\n//               required\r\n//               placeholder={`${props.srcName}`}\r\n//               filterBy={[\"name\"]}\r\n//               labelKey={option => {\r\n//                 let resp = \"\";\r\n//                 if (option.floorElement === \"Rooms\") {\r\n//                   resp = option.roomName?`${option.roomName}(${option.floor})`:`${option.name} (${option.floor})`;\r\n//                 } else if (option.floorElement === \"FloorConnection\") {\r\n//                   resp = `${option.name}(${option.floor})`;\r\n//                 } else if (option.floorElement === \"Services\") {\r\n//                   if(option.type === \"Beacons\"){\r\n//                     resp = ``;\r\n//                   }else{\r\n//                     resp = `${option.type}(${option.floor})`;\r\n//                   }\r\n//                 } else if (option.floorElement === \"RestRooms\") {\r\n//                   resp = `${option.type} Washroom (${option.floor})`;\r\n//                 } else {\r\n//                   return \"\";\r\n//                 }\r\n//                 return resp;\r\n//               }}\r\n//               onChange={e => {\r\n//                 console.log(\"ee\",e)\r\n//                     props.handleSelectSource(e)\r\n//               }}\r\n//               disabled={false}\r\n//               id=\"source\"\r\n//               onClick={() => {}}\r\n//               value={props.srcName}\r\n//               options={props.srcFloorList}\r\n//               name=\"list\"\r\n//               className=\"mb-2 form-control-dashboard mt-1\"\r\n//               inputProps={{\r\n//                 readOnly: props.srcReadOnly\r\n//               }}\r\n//               onBlur={e => {}}\r\n//             />\r\n//           </div>\r\n//           {/* <div className=\"source-button mb-1\">\r\n//             <img\r\n//               className=\"float-left mt-2 mr-2\"\r\n//               src=\"/inclunav/assets/images/bulls_eye.png\"\r\n//               alt=\"find location\"\r\n//             />\r\n//             <p className=\"menu-txt text-justify \">Find My Location</p>\r\n//           </div>\r\n//           <div className=\"source-button mb-1\">\r\n//             <img\r\n//               className=\"float-left mt-2 mr-2\"\r\n//               src=\"/inclunav/assets/images/choose_map.png\"\r\n//               alt=\"choose map\"\r\n//             />\r\n//             <p className=\"menu-txt text-justify \">Choose on Map</p>\r\n//           </div>\r\n//           <div className=\"source-button mb-1\">\r\n//             <img\r\n//               className=\"float-left mt-2 mr-2\"\r\n//               src=\"/inclunav/assets/images/home.png\"\r\n//               alt=\"home\"\r\n//             />\r\n//             <div className=\"d-flex-column\">\r\n//               <div className=\"menu-txt text-justify mb-0\">Home</div>\r\n//               <div className=\"text-white sub-menu-text d-block\">\r\n//                 Room/House, Building, Campus, City - 123...\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n//           <div className=\"source-button mb-1\">\r\n//             <img\r\n//               className=\"float-left mt-2 mr-2\"\r\n//               src=\"/inclunav/assets/images/suitcase.png\"\r\n//               alt=\"work\"\r\n//             />\r\n//             <div className=\"d-flex-column\">\r\n//               <div className=\"menu-txt text-justify mb-0\">Work</div>\r\n//               <div className=\"text-white sub-menu-text d-block\">\r\n//                 Room/House, Building, Campus, City - 123...\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n//           <div className=\"source-button mb-1\">\r\n//             <img\r\n//               className=\"float-left mt-2 mr-2\"\r\n//               src=\"/inclunav/assets/images/saved_address.png\"\r\n//               alt=\"saved address\"\r\n//             />\r\n//             <div className=\"d-flex-column\">\r\n//               <div className=\"menu-txt text-justify mb-0\">Saved Address</div>\r\n//               <div className=\"text-white sub-menu-text d-block\">\r\n//                 Room/House, Building, Campus, City - 123...\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n//           <div className=\"source-button mb-1\">\r\n//             <img\r\n//               className=\"float-left mt-2 mr-2\"\r\n//               src=\"/inclunav/assets/images/clock.png\"\r\n//               alt=\"clock\"\r\n//             />\r\n//             <div className=\"d-flex-column\">\r\n//               <div className=\"menu-txt text-justify mb-0\">\r\n//                 Landmark Previously Visited\r\n//               </div>\r\n//               <div className=\"text-white sub-menu-text d-block\">\r\n//                 Room/House, Building, Campus, City - 123...\r\n//               </div>\r\n//             </div>\r\n//           </div> */}\r\n//         </div>\r\n//       </div>\r\n//     );\r\n//   };\r\n\r\n// export default SourceMenu;\r\n\r\nimport React from 'react';\r\nimport { Typeahead } from \"react-bootstrap-typeahead\";\r\nimport './menu.css';\r\n\r\nconst SourceMenu = (props) => {\r\n    return (\r\n        <React.Fragment>\r\n            <div\r\n                className=\"source-destination fixed-top source\"\r\n                id=\"src-bar\"\r\n                style={{ marginTop: \"50px\" }}\r\n              >\r\n                <div className=\"row w-100  mx-auto\">\r\n                  <div className=\"col-2\">\r\n                  <img\r\n                        className=\"float-left mt-2 mr-2\"\r\n                        src=\"/inclunav/assets/images/profile.svg\"\r\n                        alt=\"user location\"\r\n                        alt=\"current location\"\r\n                      />\r\n                  </div>\r\n                  <div className=\"col-10 p-0\">\r\n                    {/* <button\r\n                      className=\"btn-nvgtn text-white\"\r\n                      onClick={() => {\r\n                        this.setState({\r\n                          showStrtMenu: true,\r\n                          srcReadOnly: false\r\n                        });\r\n                      }}\r\n                    >\r\n                      <p className=\"strt-txt text-justify \">\r\n                        {this.state.currentLocation}\r\n                      </p>\r\n                    </button> */}\r\n                    <Typeahead\r\n                      required\r\n                      placeholder={`${props.selectedVenue}`}\r\n                    //   placeholder={`${props.selectedSrcLocation.buildingName} (${props.selectedSrcLocation.venueName})`}\r\n                      filterBy={[\"venueName\"]}\r\n                      labelKey={option => {\r\n                        return `${option.venueName.split(/(?=[A-Z])/).join(\" \")}`;\r\n                      }}\r\n                      renderMenuItemChildren={option => (\r\n                        <div className=\"mapped-data m-0 \">\r\n                            <div\r\n                                className=\"row w-100\"\r\n                            >\r\n                                <div className=\"col-2\">\r\n                                    <div>\r\n                                        <img src=\"/inclunav/assets/images/destination2.svg\" alt=\"destination\" />\r\n                                    </div>\r\n                                    <div className='text-center'>\r\n                                        {parseInt(option.distance)}\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"col-10\">\r\n                                    <div className=\"row\" >\r\n                                        <div className=\"col-12\">\r\n                                            {option.venueName.split(/(?=[A-Z])/).join(\" \")}\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"row\" >\r\n                                        <div className=\"col-12\">\r\n                                            <small> {option.address} </small>  \r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                          <div>\r\n                          </div>\r\n                        </div>\r\n                      )}\r\n                      onChange={e => {\r\n                        // props.handleSourceLocation(e)\r\n                        if(e.length>0){\r\n                            props.venueChange(e[0].venueName)\r\n                        }\r\n                      }}\r\n                      disabled={false}\r\n                      id=\"source\"\r\n                      value={props.selectedVenue}\r\n                      options={props.venueList}\r\n                      name=\"list\"\r\n                      className=\"mb-2 form-control-dashboard mt-1\"\r\n                      inputProps={{\r\n                        readOnly: props.srcReadOnly\r\n                      }}\r\n                      onBlur={e => {}}\r\n                    />\r\n\r\n                  </div>\r\n                </div>\r\n                <div className=\"mx-auto hr-line\" />\r\n                {/* <div className=\"mx-auto hr-line\" />\r\n                <div className=\"row w-100  mx-auto\">\r\n                  <div className=\"col-10 p-0\">\r\n                    <button\r\n                      className=\"btn-nvgtn text-white\"\r\n                      onClick={() => {\r\n                        this.setState({\r\n                          showDstMenu: true,\r\n                          dstReadOnly: false\r\n                        });\r\n                      }}\r\n                    >\r\n                      <img\r\n                        className=\"float-left mt-2 mr-2\"\r\n                        src=\"/inclunav/assets/images/navigation.svg\"\r\n                        alt=\"select destination\"\r\n                      />\r\n                      <p className=\"strt-txt text-justify \">\r\n                        {props.dstAddress}\r\n                      </p>\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"col-2\"></div>\r\n                </div> */}\r\n              </div>\r\n                      {(props.buildingList.length>0) && !props.destinationActive && props.showMenu?\r\n                                <div className=\"source-button mb-1 w-100 building\">\r\n                                <img\r\n                                    className=\"float-left mt-2 mr-2\"\r\n                                    src=\"/inclunav/assets/images/search.png\"\r\n                                    alt=\"search area\"\r\n                                  />\r\n                                  <Typeahead\r\n                                    required\r\n                                    placeholder = {`${props.selectedVenue}`}\r\n                                    filterBy = {[\"name\"]}\r\n                                    labelKey={option => {\r\n                                      return option.buildingName\r\n                                    }}\r\n                                    onChange = {e => {\r\n                                        if(e.length>0){\r\n                                            props.buildingChange(e[0].buildingName)\r\n                                        }\r\n                                    }}\r\n                                    disabled={false}\r\n                                    id=\"source\"\r\n                                    value={props.selectedBulding}\r\n                                    options={props.buildingList}\r\n                                    name=\"list\"\r\n                                    className=\"mb-2 form-control-dashboard mt-1 buiding\"\r\n                                    inputProps={{\r\n                                      readOnly: props.srcReadOnly\r\n                                    }}\r\n                                    renderMenuItemChildren={option => (\r\n                                      <div className=\"mapped-data m-0 \">\r\n                                          <div\r\n                                              className=\"row w-100\"\r\n                                          >\r\n                                              <div className=\"col-2\">\r\n                                                  <div>\r\n                                                      <img src=\"/inclunav/assets/images/destination2.svg\" alt=\"destination\" />\r\n                                                  </div>\r\n                                                  {/* <div className='text-center'>\r\n                                                      {parseInt(option.distance)}\r\n                                                  </div> */}\r\n                                              </div>\r\n                                              <div className=\"col-10\">\r\n                                                  <div className=\"row\" >\r\n                                                      <div className=\"col-12\">\r\n                                                          {option.buildingName.split(/(?=[A-Z])/).join(\" \")}\r\n                                                      </div>\r\n                                                  </div>\r\n                                                  <div className=\"row\" >\r\n                                                      <div className=\"col-12\">\r\n                                                          <small> {props.selectedVenue} </small>  \r\n                                                      </div>\r\n                                                  </div>\r\n                                              </div>\r\n                                          </div>\r\n                                        <div>\r\n                                        </div>\r\n                                      </div>\r\n                                    )}\r\n                                  />\r\n                                </div>:null}\r\n\r\n                                {(props.srcFloorList.length>0) && !props.destinationActive  && props.showMenu?\r\n                                <div className=\"source-button mb-1 w-100 src-location\">\r\n                                <img\r\n                                    className=\"float-left mt-2 mr-2\"\r\n                                    src=\"/inclunav/assets/images/search.png\"\r\n                                    alt=\"search area\"\r\n                                  />\r\n                                <Typeahead\r\n                                              required\r\n                                              placeholder={`${props.srcName}`}\r\n                                              filterBy={[\"name\"]}\r\n                                              labelKey={option => {\r\n                                                let resp = \"\";\r\n                                                if (option.floorElement === \"Rooms\") {\r\n                                                  resp = option.roomName?`${option.roomName}(${option.floor})`:`${option.name} (${option.floor})`;\r\n                                                } else if (option.floorElement === \"FloorConnection\") {\r\n                                                  resp = `${option.name}(${option.floor})`;\r\n                                                } else if (option.floorElement === \"Services\") {\r\n                                                  if(option.type === \"Beacons\"){\r\n                                                    resp = ``;\r\n                                                  }else{\r\n                                                    resp = `${option.type}(${option.floor})`;\r\n                                                  }\r\n                                                } else if (option.floorElement === \"RestRooms\") {\r\n                                                  resp = `${option.type} Washroom (${option.floor})`;\r\n                                                } else {\r\n                                                  return \"\";\r\n                                                }\r\n                                                return resp;\r\n                                              }}\r\n                                              onChange={e => {\r\n                                                console.log(\"ee\",e)\r\n                                                    props.handleSelectSource(e)\r\n                                              }}\r\n                                              disabled={false}\r\n                                              id=\"source\"\r\n                                              onClick={() => {}}\r\n                                              value={props.srcName}\r\n                                              options={props.srcFloorList}\r\n                                              name=\"list\"\r\n                                              className=\"mb-2 form-control-dashboard mt-1\"\r\n                                              inputProps={{\r\n                                                readOnly: props.srcReadOnly\r\n                                              }}\r\n                                              renderMenuItemChildren={option => {\r\n                                                let resp = \"\";\r\n                                                let floor = option.floor\r\n                                                if (option.floorElement === \"Rooms\") {\r\n                                                  resp = option.roomName?`${option.roomName}`:`${option.name}`;\r\n                                                } else if (option.floorElement === \"FloorConnection\") {\r\n                                                  resp = `${option.name}`;\r\n                                                } else if (option.floorElement === \"Services\") {\r\n                                                  if(option.type === \"Beacons\"){\r\n                                                    resp = ``;\r\n                                                  }else{\r\n                                                    resp = `${option.type}`;\r\n                                                  }\r\n                                                } else if (option.floorElement === \"RestRooms\") {\r\n                                                  resp = `${option.type} Washroom`;\r\n                                                } else {\r\n                                                  resp =  \"\";\r\n                                                }\r\n\r\n                                               return <div className=\"mapped-data m-0 \" style={{padding:\"0\"}}>\r\n                                                    <div\r\n                                                        className=\"row w-100\"\r\n                                                    >\r\n                                                        <div className=\"col-2\">\r\n                                                            <div>\r\n                                                                <img src=\"/inclunav/assets/images/destination2.svg\" alt=\"destination\" />\r\n                                                            </div>\r\n                                                            {/* <div className='text-center'>\r\n                                                                {parseInt(option.distance)}\r\n                                                            </div> */}\r\n                                                        </div>\r\n                                                        <div className=\"col-10\">\r\n                                                            <div className=\"row\" >\r\n                                                                <div className=\"col-12\">\r\n                                                                  {resp}\r\n                                                                </div>\r\n                                                            </div>\r\n                                                            <div className=\"row\" >\r\n                                                                <div className=\"col-12 text-capitalize\">\r\n                                                          <small> {floor} Floor,{option.buildingName.split(/(?=[A-Z])/).join(\" \")},{option.venueName.split(/(?=[A-Z])/).join(\" \")} </small>  \r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                  <div>\r\n                                                  </div>\r\n                                                </div>\r\n                                              }}\r\n                                              onBlur={e => {\r\n                                                props.handleBlurr()\r\n                                                props.handleDstAct()\r\n                                              }}\r\n                                            />\r\n\r\n                                              {/* onBlur={e => {}}\r\n                                            /> */}\r\n                                </div>:null}\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\nexport default SourceMenu;","C:\\Users\\Assistech\\mishor\\inclunav\\src\\components\\dashboard\\navigation\\DestinationMenu.js",[],"C:\\Users\\Assistech\\mishor\\inclunav\\src\\components\\dashboard\\navigation\\InstructionTab.js",["708","709","710","711","712","713","714","715","716","717","718","719","720","721","722","723","724","725"],"import React from 'react'\r\nconst InstructionTab = (props)=>{\r\n    return (\r\n        <React.Fragment>\r\n        <div className=\"top-content\">\r\n                <div className=\"row w-100 h-100\">\r\n                  {props.pathCaption.map((r, i) => {\r\n                    if (i === props.currentStep) {\r\n                      return (\r\n                          <React.Fragment>\r\n                        <div\r\n                          className=\"col-2 font-weight-bolder text-center my-auto\"\r\n                        >\r\n                          {(()=>{\r\n                                                if (\r\n                                                    i === props.currentStep &&\r\n                                                    props.pathCaption[i]\r\n                                                  ) {\r\n                                                    if (\r\n                                                      props.pathCaption[i].includes(\"right\") ||\r\n                                                      props.pathCaption[i].includes(\"Right\")\r\n                                                    ) {\r\n                                                      return <img src=\"assets/images/turn_right.svg\" />;\r\n                                                    } else if (\r\n                                                      props.pathCaption[i].includes(\"left\") ||\r\n                                                      props.pathCaption[i].includes(\"Left\")\r\n                                                    ) {\r\n                                                      return <img src=\"assets/images/turn_left.svg\" />;\r\n                                                    } else if (\r\n                                                      props.pathCaption[i].includes(\"forward\") ||\r\n                                                      props.pathCaption[i].includes(\"Turn 12 O' Clock\")\r\n                                                    ) {\r\n                                                      return <img src=\"assets/images/go_straight.svg\" />;\r\n                                                    } else if (\r\n                                                      props.pathCaption[i].includes(\r\n                                                        \"Turn 1 O' Clock\"\r\n                                                      ) ||\r\n                                                      props.pathCaption[i].includes(\r\n                                                        \"Turn 2 O' Clock\"\r\n                                                      ) ||\r\n                                                      props.pathCaption[i].includes(\r\n                                                        \"Turn 3 O' Clock\"\r\n                                                      ) ||\r\n                                                      props.pathCaption[i].includes(\r\n                                                        \"Turn 4 O' Clock\"\r\n                                                      ) ||\r\n                                                      props.pathCaption[i].includes(\"Turn 5 O' Clock\")\r\n                                                    ) {\r\n                                                      return <img src=\"assets/images/slight_right.svg\" />;\r\n                                                    } else if (\r\n                                                      props.pathCaption[i].includes(\r\n                                                        \"Turn 7 O' Clock\"\r\n                                                      ) ||\r\n                                                      props.pathCaption[i].includes(\r\n                                                        \"Turn 8 O' Clock\"\r\n                                                      ) ||\r\n                                                      props.pathCaption[i].includes(\r\n                                                        \"Turn 9 O' Clock\"\r\n                                                      ) ||\r\n                                                      props.pathCaption[i].includes(\r\n                                                        \"Turn 10 O' Clock\"\r\n                                                      ) ||\r\n                                                      props.pathCaption[i].includes(\"Turn 11 O' Clock\")\r\n                                                    ) {\r\n                                                      return <img src=\"assets/images/slight_left.svg\" />;\r\n                                                    } else if (\r\n                                                      props.pathCaption[i].includes(\"Turn 6 O' Clock\")\r\n                                                    ) {\r\n                                                      return <img src=\"assets/images/uturn.svg\" />;\r\n                                                    } else if (\r\n                                                      props.pathCaption[i].includes(\"You are at\")\r\n                                                    ) {\r\n                                                      return <img src=\"assets/images/live_location.svg\" />;\r\n                                                    } else if (\r\n                                                      props.pathCaption[i].includes(\"reached\")\r\n                                                    ) {\r\n                                                      return <img src=\"assets/images/reached.svg\" />;\r\n                                                    } else {\r\n                                                      return <img src=\"assets/images/live_location.svg\" />;\r\n                                                    }\r\n                                                  } else {\r\n                                                    return null;\r\n                                                  }\r\n                          })()}\r\n                        </div>\r\n                        <div\r\n                          className=\"col-10 font-weight-bolder text-white text-center my-auto\"\r\n                          id={`show_${props.imgDiv}`}\r\n                        >\r\n                          {r}\r\n                        </div>\r\n                        </React.Fragment>\r\n                      );\r\n                    } else {\r\n                      return null;\r\n                    }\r\n                  })}\r\n                </div>\r\n              </div>\r\n              <div\r\n                className=\"top-content2 text-center text-white\"\r\n                onClick={() => {\r\n                  props.nextButton();\r\n                }}\r\n              >\r\n                Then\r\n                {props.pathCaption.map((r, i) => {\r\n                  if (\r\n                    i === props.currentStep &&\r\n                    props.pathCaption[i + 1]\r\n                  ) {\r\n                    if (\r\n                      props.pathCaption[i + 1].includes(\"right\") ||\r\n                      props.pathCaption[i + 1].includes(\"Right\")\r\n                    ) {\r\n                      return <img src=\"assets/images/turn_right.svg\" />;\r\n                    } else if (\r\n                      props.pathCaption[i + 1].includes(\"left\") ||\r\n                      props.pathCaption[i + 1].includes(\"Left\")\r\n                    ) {\r\n                      return <img src=\"assets/images/turn_left.svg\" />;\r\n                    } else if (\r\n                      props.pathCaption[i + 1].includes(\"forward\") ||\r\n                      props.pathCaption[i + 1].includes(\"Turn 12 O' Clock\")\r\n                    ) {\r\n                      return <img src=\"assets/images/go_straight.svg\" />;\r\n                    } else if (\r\n                      props.pathCaption[i + 1].includes(\r\n                        \"Turn 1 O' Clock\"\r\n                      ) ||\r\n                      props.pathCaption[i + 1].includes(\r\n                        \"Turn 2 O' Clock\"\r\n                      ) ||\r\n                      props.pathCaption[i + 1].includes(\r\n                        \"Turn 3 O' Clock\"\r\n                      ) ||\r\n                      props.pathCaption[i + 1].includes(\r\n                        \"Turn 4 O' Clock\"\r\n                      ) ||\r\n                      props.pathCaption[i + 1].includes(\"Turn 5 O' Clock\")\r\n                    ) {\r\n                      return <img src=\"assets/images/slight_right.svg\" />;\r\n                    } else if (\r\n                      props.pathCaption[i + 1].includes(\r\n                        \"Turn 7 O' Clock\"\r\n                      ) ||\r\n                      props.pathCaption[i + 1].includes(\r\n                        \"Turn 8 O' Clock\"\r\n                      ) ||\r\n                      props.pathCaption[i + 1].includes(\r\n                        \"Turn 9 O' Clock\"\r\n                      ) ||\r\n                      props.pathCaption[i + 1].includes(\r\n                        \"Turn 10 O' Clock\"\r\n                      ) ||\r\n                      props.pathCaption[i + 1].includes(\"Turn 11 O' Clock\")\r\n                    ) {\r\n                      return <img src=\"assets/images/slight_left.svg\" />;\r\n                    } else if (\r\n                      props.pathCaption[i + 1].includes(\"Turn 6 O' Clock\")\r\n                    ) {\r\n                      return <img src=\"assets/images/uturn.svg\" />;\r\n                    } else if (\r\n                      props.pathCaption[i + 1].includes(\"You are at\")\r\n                    ) {\r\n                      return <img src=\"assets/images/live_location.svg\" />;\r\n                    } else if (\r\n                      props.pathCaption[i + 1].includes(\"reached\")\r\n                    ) {\r\n                      return <img src=\"assets/images/reached.svg\" />;\r\n                    } else {\r\n                      return <img src=\"assets/images/live_location.svg\" />;\r\n                    }\r\n                  } else {\r\n                    return null;\r\n                  }\r\n                })}\r\n              </div>\r\n              </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default InstructionTab;","C:\\Users\\Assistech\\mishor\\inclunav\\src\\components\\dashboard\\navigation\\NavigationDetails.js",["726"],"import React from 'react';\r\n\r\nclass NavigationDetails extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      instructionSet :[],\r\n      pause:true\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    var instructions = [];\r\n    var stepsCount = [];\r\n    \r\n    console.log(\"instruction set\",this.props.instructionSet)\r\n\r\n    instructions = this.props.instructionSet &&  this.props.instructionSet.map((r, i) => {\r\n                        if (\r\n                          r.includes(\"right\") ||\r\n                          r.includes(\"Right\")\r\n                        ) {\r\n                          return r \r\n                        } else if (\r\n                          r.includes(\"left\") ||\r\n                          r.includes(\"Left\")\r\n                        ) {\r\n                          return r \r\n                        } else if (\r\n                          r.includes(\"forward\")\r\n                        ) {\r\n                          let theNum  = r.match(/\\d+/)[0]\r\n                          stepsCount.push(parseInt(theNum))\r\n                          return r \r\n                        } else if (\r\n                          r.includes(\"Turn 1 O' Clock\") ||\r\n                          r.includes(\"Turn 2 O' Clock\") ||\r\n                          r.includes(\"Turn 3 O' Clock\") \r\n                        ) {\r\n                          return'Turn slight right' \r\n                        }else if(  \r\n                          r.includes(\"Turn 4 O' Clock\") ||\r\n                          r.includes(\"Turn 5 O' Clock\")){\r\n                            return 'Turn back and then turn slight left' \r\n                        } else if (\r\n                          r.includes(\"Turn 7 O' Clock\") ||\r\n                          r.includes(\"Turn 8 O' Clock\") ||\r\n                          r.includes(\"Turn 9 O' Clock\") \r\n                        ) {\r\n                          return 'turn slight left'\r\n                        }else if(                        \r\n                          r.includes(\"Turn 10 O' Clock\") ||\r\n                          r.includes(\"Turn 11 O' Clock\")){\r\n                            return 'Turn back and then turn slight left'\r\n                        } else if (\r\n                          r.includes(\"Turn 6 O' Clock\")\r\n                        ) {\r\n                          return 'Turn back'\r\n                        } else if (r.includes(\"You are at\")) {\r\n                          return r\r\n                        } else if (r.includes(\"reached\")) {\r\n                          return r\r\n                        } else if (\r\n                          r.includes(\"Turn 0 O' Clock\") ||\r\n                          r.includes(\"Turn 12 O' Clock\")\r\n                        ) {\r\n                          return null \r\n                        }else{\r\n                          return r\r\n                        }\r\n    })\r\n    var distance\r\n  \r\n    if(instructions){\r\n      const add = arr => arr.reduce((a, b) => a + b, 0);\r\n      distance = add(stepsCount);\r\n      instructions = instructions.filter( (el)=> {\r\n        return el != null;\r\n      });\r\n      this.setState({\r\n        instructionSet:instructions\r\n      })\r\n    }\r\n  }\r\n\r\n  playRoute = ()=>{\r\n    console.log(\"called\")\r\n    var synth = window.speechSynthesis;\r\n    console.log(\"r\",this.state.instructionSet)\r\n\r\n    this.state.instructionSet.forEach(r=>{\r\n      var utterance1 = new SpeechSynthesisUtterance(r);\r\n      synth.speak(utterance1);\r\n    })\r\n    // synth.speak(utterance1);\r\n    // synth.speak(utterance2);\r\n    // synth.pause(); // pauses utterances being spoken\r\n  }\r\n\r\n  render(){\r\n    return <div\r\n    className={\r\n      this.props.toggle\r\n        ? \"bottom-navigation-bar active\"\r\n        : \"bottom-navigation-bar\"\r\n    }\r\n  >\r\n    <div\r\n      className=\"bottom-navigation-barbtn\"\r\n      onClick={() => {\r\n          this.props.stateToggle()\r\n        // this.setState({ toggle: !this.state.toggle });\r\n      }}\r\n    >\r\n      <img\r\n        className=\"vector40\"\r\n        src=\"assets/images/viewDetails.svg\"\r\n        alt=\"doubel tap to open instruction options\"\r\n      />\r\n    </div>\r\n\r\n    <div className=\"navigation-details\">\r\n      <div className=\"row w-100 navigation-header mx-auto mb-1\">\r\n        <div\r\n          className=\"col-2\"\r\n          onClick={() => {\r\n              this.props.closeBuilding()\r\n          }}\r\n        >\r\n          <img\r\n            className=\"float-left mt-4 mr-2\"\r\n            src=\"/inclunav/assets/images/close_navigation.svg\"\r\n            alt=\"go back to navigation page\"\r\n          />\r\n        </div>\r\n        <div className=\"col-8 my-auto\" onClick={()=>{\r\n          this.props.stateToggle()\r\n\r\n        }}>\r\n          <div className=\"direction-text\">\r\n            <div className=\"text-white\">{this.props.dstName} </div>\r\n            <div className=\"text-white strt-txt text-justify\">\r\n            <span className=\"sr-only\">You have to reach</span>  {this.props.dstAddress}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-2\">\r\n          <img\r\n            className=\"float-left mt-4 mr-2\"\r\n            src=\"/inclunav/assets/images/switch.svg\"\r\n            alt=\"switch floor connection\"\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"row w-100  mx-auto bottom-navigation-div mb-1\">\r\n      <div className=\"col-2 text-white my-auto\"   onClick={()=>{\r\n            this.setState({\r\n              pause:!this.state.pause\r\n            },()=>{\r\n              this.props.playInstruction(this.state.pause)\r\n            })\r\n          }}>\r\n        {/* <img\r\n            className=\"ml-2 mt-2\"\r\n            src={this.state.pause === false?\"/inclunav/assets/images/route_voice.svg\":\"/inclunav/assets/images/voice_navigation_off.svg\"}\r\n            alt=\"share location\"\r\n          /> */}\r\n          {this.state.pause === false?<React.Fragment> <i className=\"fa fa-pause\" title=\"double tap to pause\" /> <span className=\"sr-only\">double tap to pause  </span> </React.Fragment>:<React.Fragment> <i className=\"fa fa-play\" title=\"double tap to play\" /> <span className=\"sr-only\"> double tap to play  </span> </React.Fragment>}\r\n        </div>\r\n          <div className=\"col-2 text-white my-auto\" onClick = {()=>{\r\n            this.props.previousButton()\r\n          }} >\r\n          <i className=\"fa fa-step-backward\" title=\"previous step\" /><span className=\"sr-only\">Previous Step  </span>\r\n        </div>\r\n        <div className=\"col-2 my-auto\" onClick={()=>{\r\n          this.props.nextButton()\r\n        }} >\r\n          <i className=\"fa fa-step-forward\" title=\"next step\" /><span className=\"sr-only\">Next Step  </span>\r\n        </div>\r\n        <div\r\n          className=\"col-6 my-auto\"\r\n          onClick={()=>{\r\n            this.setState({\r\n              pause:!this.state.pause\r\n            },()=>{\r\n              this.props.playInstruction(this.state.pause)\r\n            })\r\n          }}\r\n        >\r\n            Play Route\r\n        </div>\r\n      </div>\r\n      <div className=\"row w-100  mx-auto bottom-navigation-div mb-1\">\r\n      <div\r\n          className=\"col-2\"\r\n          onClick={() => {\r\n              this.props.handleShowInstructions()\r\n          }}\r\n        >\r\n          <img\r\n            className=\"ml-2 mt-2\"\r\n            src=\"/inclunav/assets/images/toggle_menu.svg\"\r\n            alt=\"share location\"\r\n          />\r\n        </div>\r\n        <div\r\n          className=\"col-10 my-auto\"\r\n          onClick={() => {\r\n          }}\r\n        >\r\n            View Directions\r\n        </div>\r\n      </div>\r\n      {/* <div className=\"row w-100  mx-auto bottom-navigation-div\">\r\n      <div\r\n          className=\"col-2\"\r\n          onClick={() => {\r\n              this.props.handleShowInstructions()\r\n          }}\r\n        >\r\n          <img\r\n            className=\"ml-2 mt-2\"\r\n            src=\"/inclunav/assets/images/telephone.svg\"\r\n            alt=\"share location\"\r\n          />\r\n        </div>\r\n        <div\r\n          className=\"col-10 my-auto\"\r\n          onClick={() => {\r\n          }}\r\n        >\r\n            Contact Building Staff\r\n        </div>\r\n      </div> */}\r\n    </div>\r\n  </div>\r\n  }\r\n}\r\n\r\n\r\n  export default NavigationDetails;","C:\\Users\\Assistech\\mishor\\inclunav\\src\\components\\dashboard\\navigation\\Instructions.js",[],"C:\\Users\\Assistech\\mishor\\inclunav\\src\\config.js",[],"C:\\Users\\Assistech\\mishor\\inclunav\\src\\components\\dashboard\\global\\Instructions.js",["727"],"import React from 'react';\r\n\r\nexport default function Instructions (props) {\r\n  var instructions = [];\r\n  var stepsCount = [];\r\n  instructions = props.instructionSet &&  props.instructionSet.map((r, i) => {\r\n                    // if(!props.buildingView){\r\n                    //   if (\r\n                    //     r.text.includes(\"right\") ||\r\n                    //     r.text.includes(\"Right\")\r\n                    //   ) {\r\n                    //     return {src:\"assets/images/turn_right.svg\",text:r.text} \r\n                    //   } else if (\r\n                    //     r.text.includes(\"left\") ||\r\n                    //     r.text.includes(\"Left\")\r\n                    //   ) {\r\n                    //     return {src:\"assets/images/turn_left.svg\" ,text:r.text} \r\n                    //   } else if (\r\n                    //     r.text.includes(\"forward\") ||\r\n                    //     r.text.includes(\"Turn 12 O' Clock\")\r\n                    //   ) {\r\n                    //     return {src:\"assets/images/go_straight.svg\" ,text:r.text} \r\n                    //   } else if (\r\n                    //     r.text.includes(\"Turn 1 O' Clock\") ||\r\n                    //     r.text.includes(\"Turn 2 O' Clock\") ||\r\n                    //     r.text.includes(\"Turn 3 O' Clock\") ||\r\n                    //     r.text.includes(\"Turn 4 O' Clock\") ||\r\n                    //     r.text.includes(\"Turn 5 O' Clock\")\r\n                    //   ) {\r\n                    //     return {src:\"assets/images/slight_right.svg\",text:r.text} \r\n                    //   } else if (\r\n                    //     r.text.includes(\"Turn 7 O' Clock\") ||\r\n                    //     r.text.includes(\"Turn 8 O' Clock\") ||\r\n                    //     r.text.includes(\"Turn 9 O' Clock\") ||\r\n                    //     r.text.includes(\"Turn 10 O' Clock\") ||\r\n                    //     r.text.includes(\"Turn 11 O' Clock\")\r\n                    //   ) {\r\n                    //     return {src:\"assets/images/left.svg\" ,text:r.text}\r\n                    //   } else if (\r\n                    //     r.text.includes(\"Turn 6 O' Clock\")\r\n                    //   ) {\r\n                    //     return {src:\"assets/images/uturn.svg\" ,text:r.text}\r\n                    //   } else if (r.text.includes(\"You are at\")) {\r\n                    //     return {src:\"assets/images/live_location.svg\" ,text:r.text}\r\n                    //   } else if (r.text.includes(\"reached\")) {\r\n                    //     return {src:\"assets/images/reached.svg\" ,text:r.text}\r\n                    //   }else{\r\n                    //     return {src:\"assets/images/question_mark.svg\" ,text:r.text}\r\n                    //   }\r\n                    // }else{\r\n                      if (\r\n                        r.includes(\"right\") ||\r\n                        r.includes(\"Right\")\r\n                      ) {\r\n                        return {src:\"assets/images/turn_right.svg\",text:r} \r\n                      } else if (\r\n                        r.includes(\"left\") ||\r\n                        r.includes(\"Left\")\r\n                      ) {\r\n                        return {src:\"assets/images/turn_left.svg\" ,text:r} \r\n                      }else if (\r\n                        r.includes(\"Lift\") \r\n                      ) {\r\n                        return {src:\"assets/images/lift.svg\" ,text:r} \r\n                      }else if (\r\n                        r.includes(\"Stairs\") \r\n                      ) {\r\n                        return {src:\"assets/images/stairs.svg\" ,text:r} \r\n                      } else if (\r\n                        r.includes(\"forward\")\r\n                      ) {\r\n                        let theNum  = r.match(/\\d+/)\r\n                        if(theNum!=null){\r\n                        stepsCount.push(parseInt(theNum[0]))}\r\n                        return {src:\"assets/images/go_straight.svg\" ,text:r} \r\n                      }else if(r.includes(\"Turn 3 O' Clock\")){\r\n                        return {src:\"assets/images/right.svg\",text:'Turn right'} \r\n                      }else if(r.includes(\"Turn 9 O' Clock\")){\r\n                        return {src:\"assets/images/turn_left.svg\",text:'Turn left'} \r\n                      } else if (\r\n                        r.includes(\"Turn 1 O' Clock\") ||\r\n                        r.includes(\"Turn 2 O' Clock\")\r\n                      ) {\r\n                        return {src:\"assets/images/slight_right.svg\",text:'Turn slight right'} \r\n                      }else if(  \r\n                        r.includes(\"Turn 4 O' Clock\") ||\r\n                        r.includes(\"Turn 5 O' Clock\")){\r\n                          return {src:\"assets/images/uturn_right.svg\",text:'Turn back and then turn slight left'} \r\n                      } else if (\r\n                        r.includes(\"Turn 7 O' Clock\") ||\r\n                        r.includes(\"Turn 8 O' Clock\")\r\n                      ) {\r\n                        return {src:\"assets/images/slight_left.svg\" ,text:'turn slight left'}\r\n                      }else if(                        \r\n                        r.includes(\"Turn 10 O' Clock\") ||\r\n                        r.includes(\"Turn 11 O' Clock\")){\r\n                          return {src:\"assets/images/turn_left.svg\" ,text:'then turn slight left'}\r\n                      } else if (\r\n                        r.includes(\"Turn 6 O' Clock\")\r\n                      ) {\r\n                        return {src:\"assets/images/question_mark.svg\" ,text:'Turn back'}\r\n                      } else if (r.includes(\"You are at\")) {\r\n                        return {src:\"assets/images/source.svg\" ,text:r}\r\n                      } else if (r.includes(\"reach\")) {\r\n                        return {src:\"assets/images/destination2.svg\" ,text:r}\r\n                      } else if (\r\n                        r.includes(\"Turn 0 O' Clock\") ||\r\n                        r.includes(\"Turn 12 O' Clock\")\r\n                      ) {\r\n                        return {src:\"assets/images/go_straight.svg\" ,text:null} \r\n                      }else{\r\n                        return {src:\"assets/images/question_mark.svg\" ,text:r}\r\n                      }\r\n                    // }        \r\n  })\r\n  var distance\r\n\r\n  if(instructions){\r\n    const add = arr => arr.reduce((a, b) => a + b, 0);\r\n    distance = add(stepsCount);\r\n    instructions = instructions.filter( (el)=> {\r\n      return el.text != null;\r\n    });\r\n  }\r\n\r\n\r\n  return(\r\n    <React.Fragment>\r\n            <div className=\"bg-landing  container-fluid\" style={{marginTop:\"57px\",height:\"100vh\",position:\"fixed\"}} >\r\n              <div\r\n                className=\"row w-100\"\r\n                onClick={() => {\r\n                  props.handleInstr()\r\n                  // props.handleBuildingView();\r\n                }}\r\n              >\r\n                <div className=\"col-2\">\r\n                  <img\r\n                    className=\"ml-2\"\r\n                    src=\"/inclunav/assets/images/cross.svg\"\r\n                    alt=\"share location\"\r\n                  />\r\n                </div>\r\n                <div className=\"col-8\">\r\n                  <p className=\"direction-text text-white text-center\">\r\n                  {/* {parseInt(distance*0.6)} Meter */}\r\n                  {/* {parseFloat(props.globalDistance/1000).toFixed(3)} Km */}\r\n                  </p>\r\n                  <p className=\"strt-text text-white text-center\">\r\n                  {/* {props.buildingView?'via Walking':null} */}\r\n                  </p>\r\n                </div>\r\n                <div className=\"col-2\">\r\n                  <img\r\n                    className=\"ml-2\"\r\n                    src=\"/inclunav/assets/images/switch.svg\"\r\n                    alt=\"share location\"\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"row w-100  mx-auto bottom-div mb-2 p-2\">\r\n                <div className=\"col-4\">\r\n                  <p className=\"strt-txt text-justify \">\r\n                    {props.srcName}\r\n                    {/* {props.sourceLocation.split(/(?=[A-Z])/).join(\" \")} */}\r\n                  </p>\r\n                </div>\r\n                <div className=\"col-4\">\r\n                  <img\r\n                    className=\"ml-2\"\r\n                    src=\"/inclunav/assets/images/way.svg\"\r\n                    alt=\"share location\"\r\n                  />\r\n                </div>\r\n                <div className=\"col-4\">\r\n                  <p className=\"strt-txt text-justify \">\r\n                  {props.dstName}\r\n\r\n                    {/* {props.dstAddress.split(/(?=[A-Z])/).join(\" \")} */}\r\n                  </p>\r\n                </div>\r\n               \r\n              </div>\r\n              <hr className=\"instructions-hr\" />\r\n              <div\r\n                className=\"row w-100\"\r\n                onClick={() => {\r\n                  // props.handleBuildingView();\r\n                }}\r\n              >\r\n                <div className=\"col-12\">\r\n                  <p className=\"steps\">Steps</p>\r\n                </div>\r\n              </div>\r\n              <div style={{\r\n                height:\"65%\",\r\n                overflow:\"scroll\"\r\n              }}>\r\n              { instructions&&instructions.map((r, i) => {\r\n                return  <React.Fragment>\r\n                    <hr className=\"instructions-hr\" />\r\n                    <div\r\n                      className=\"row w-100\"\r\n                      onClick={() => {\r\n                        props.handleBuildingView();\r\n                      }}\r\n                    >\r\n                      <div className=\"col-2\">\r\n                        <img src={r.src} alt=\"direction icon\"/>\r\n                      </div>\r\n                      <div className=\"col-10\">\r\n                        <p className=\"strt-text text-white\">{r.text}</p>\r\n                      </div>\r\n                    </div>          \r\n                  </React.Fragment>\r\n                })}\r\n                </div>\r\n                {/* {props.buildingView && instructions&&instructions.map((r, i) => {\r\n                console.log(\"dd\",r)\r\n                return  <React.Fragment>\r\n                    <hr className=\"instructions-hr\" />\r\n                    <div\r\n                      className=\"row w-100\"\r\n                      onClick={() => {\r\n                        props.handleBuildingView();\r\n                      }}\r\n                    >\r\n                      <div className=\"col-2\">\r\n                        <img src={r.src} alt=\"direction icon\"/>\r\n                      </div>\r\n                      <div className=\"col-10\">\r\n                        <p className=\"strt-text text-white\">{r}</p>\r\n                      </div>\r\n                    </div>          \r\n                  </React.Fragment>\r\n                })} */}\r\n            </div>\r\n      </React.Fragment>\r\n  )\r\n}\r\n\r\n","C:\\Users\\Assistech\\mishor\\inclunav\\src\\components\\dashboard\\global\\module.js",["728","729","730","731","732","733","734","735","736","737","738","739","740","741","742","743","744","745","746","747","748","749","750","751","752","753","754","755","756","757","758","759","760","761","762","763","764","765","766","767","768","769","770"],"//Helper function for Distance(in m) between global points hi\r\n/**\r\n * @param {*} firstLocation\r\n * @param {*} secondLocation\r\n * @id N2.1.1\r\n * @author Ushaswini Chintha\r\n * @description get global distance between two points\r\n */\r\nexport const getHaversineDistance = (firstLocation, secondLocation) => {\r\n  const earthRadius = 6371; // km //6378137; //m\r\n  const diffLat = ((secondLocation.lat - firstLocation.lat) * Math.PI) / 180;\r\n  const difflon = ((secondLocation.lon - firstLocation.lon) * Math.PI) / 180;\r\n  // console.log(\"difflat,difflon\",diffLat,difflon,firstLocation, secondLocation)\r\n  const arc =\r\n    Math.cos((firstLocation.lat * Math.PI) / 180) *\r\n      Math.cos((secondLocation.lat * Math.PI) / 180) *\r\n      Math.sin(difflon / 2) *\r\n      Math.sin(difflon / 2) +\r\n    Math.sin(diffLat / 2) * Math.sin(diffLat / 2);\r\n  const line = 2 * Math.atan2(Math.sqrt(arc), Math.sqrt(1 - arc));\r\n  const distance = earthRadius * line * 1000;\r\n  return distance;\r\n};\r\n//calculates Gcoordinates with given vertical and horizontal distance (should be in meters) from a refrence point\r\n/**\r\n * @param {*} reference\r\n * @param {*} vertical\r\n * @param {*} horizontal\r\n * @id N2.1.2\r\n * @author Ushaswini Chintha\r\n * @description get coordinates from reference points\r\n */\r\nexport const obtaincoordinates = (reference, vertical, horizontal) => {\r\n  const R = 6378137; //Earth’s radius, sphere\r\n  //Coordinate offsets in radians\r\n  var dLat = vertical / R;\r\n  var dLon = horizontal / (R * Math.cos((Math.PI * reference.lat) / 180));\r\n  //OffsetPosition, decimal degrees\r\n  var latA = reference.lat + (dLat * 180) / Math.PI;\r\n  var lonA = reference.lon + (dLon * 180) / Math.PI;\r\n  return { lat: latA, lon: lonA };\r\n};\r\n/**\r\n *\r\n * @param {*} first\r\n * @param {*} second\r\n * @id N2.1.3\r\n * @author Ushaswini Chintha\r\n * @description distance between two coorinates\r\n */\r\n//helper function for distance between two points in local coordinates\r\nexport const distance = (first, second) => {\r\n  var dist =\r\n    (second.localy - first.localy) ** 2 + (second.localx - first.localx) ** 2;\r\n  return Math.sqrt(dist);\r\n};\r\n/**\r\n *\r\n * @param {*} one\r\n * @param {*} two\r\n * @param {*} three\r\n * @id N2.1.4\r\n * @author Ushaswini Chintha\r\n * @description get perpendicalr from 3 points\r\n */\r\n//perpendicular distance of point(three) from a line formed by one and two\r\nexport const perpendicular = (one, two, three) => {\r\n  var y = Math.sin(three.lon - one.lon) * Math.cos(three.lat);\r\n  var x =\r\n    Math.cos(one.lat) * Math.sin(three.lat) -\r\n    Math.sin(one.lat) * Math.cos(three.lat) * Math.cos(three.lat - one.lat);\r\n  var bearing1 = (Math.atan2(y, x) * 180) / Math.PI;\r\n  bearing1 = 360 - ((bearing1 + 360) % 360);\r\n  var y2 = Math.sin(two.lon - one.lon) * Math.cos(two.lat);\r\n  var x2 =\r\n    Math.cos(one.lat) * Math.sin(two.lat) -\r\n    Math.sin(one.lat) * Math.cos(two.lat) * Math.cos(two.lat - one.lat);\r\n  var bearing2 = (Math.atan2(y2, x2) * 180) / Math.PI;\r\n  bearing2 = 360 - ((bearing2 + 360) % 360);\r\n  var lat1Rads = (one.lat * Math.PI) / 180;\r\n  var lat3Rads = (three.lat * Math.PI) / 180;\r\n  var dLon = ((three.lon - one.lon) * Math.PI) / 180;\r\n  var distanceAC =\r\n    Math.acos(\r\n      Math.sin(lat1Rads) * Math.sin(lat3Rads) +\r\n        Math.cos(lat1Rads) * Math.cos(lat3Rads) * Math.cos(dLon)\r\n    ) * 6371;\r\n  var min_distance = Math.abs(\r\n    Math.asin(\r\n      Math.sin(distanceAC / 6371) *\r\n        Math.sin((bearing1 * Math.PI) / 180 - (bearing2 * Math.PI) / 180)\r\n    ) * 6371\r\n  );\r\n  // console.log(\"The perpendicular distance is: \", min_distance*1000*3.28084);\r\n  return min_distance * 1000 * 3.28084;\r\n};\r\n//angle between three points; type:0 -> normal_distance, type:1 -> haversine_distance\r\n/**\r\n *\r\n * @param {*} one\r\n * @param {*} two\r\n * @param {*} three\r\n * @param {*} type\r\n * @id N2.1.5\r\n * @author Ushaswini Chintha\r\n * @description angle between reference points\r\n */\r\nexport const angle = (one, two, three, type) => {\r\n  if (type == 0) {\r\n    //calulated using normal_distance\r\n    var l = this.distance(one, two);\r\n    var m = this.distance(two, three);\r\n    var n = this.distance(one, three);\r\n    var theta =\r\n      (Math.acos((l * l + n * n - m * m) / (2 * l * n)) * 180) / Math.PI;\r\n    if ((l * l + n * n - m * m) / (2 * l * n) > 1 || m == 0 || n == 0) {\r\n      theta = 0;\r\n    } //straight line case\r\n    if ((l * l + n * n - m * m) / (2 * l * n) < -1) {\r\n      theta = 180;\r\n    } //straight line case\r\n  } else if (type == 1) {\r\n    //calulated using haverisine_distance\r\n    var b = this.getHaversineDistance(one, two);\r\n    var c = this.getHaversineDistance(one, three);\r\n    var a = this.getHaversineDistance(two, three);\r\n    var theta =\r\n      (Math.acos((b * b + c * c - a * a) / (2 * b * c)) * 180) / Math.PI;\r\n    if ((b * b + c * c - a * a) / (2 * b * c) > 1 || a == 0 || c == 0) {\r\n      theta = 0;\r\n    } //straight line case\r\n    if ((b * b + c * c - a * a) / (2 * b * c) < -1) {\r\n      theta = 180;\r\n    } //straight line case\r\n  }\r\n  return theta;\r\n};\r\n/**\r\n *\r\n * @param {*} coords\r\n * @param {*} red_data\r\n * @param {*} entrance_point\r\n * @param {*} drop_points\r\n * @id N2.1.6\r\n * @author Ushaswini Chintha\r\n * @description handling hybrid points\r\n */\r\nexport const handleHybrid = (coords, red_data, entrance_point, drop_points) => {\r\n  //finding the point with lowest latitude and highest longitude\r\n  var least_lat = 0;\r\n  var high_lon = 0;\r\n  for (let i = 0; i < coords.length; i++) {\r\n    if (coords[i].lat < coords[least_lat].lat) {\r\n      least_lat = i;\r\n    }\r\n    if (coords[high_lon].lon < coords[i].lon) {\r\n      high_lon = i;\r\n    }\r\n  }\r\n  //building angle with equator or true horizontal\r\n  const horizontal = this.obtaincoordinates(\r\n    coords[least_lat],\r\n    0,\r\n    this.getHaversineDistance(coords[least_lat], coords[high_lon])\r\n  );\r\n  var out = this.angle(coords[least_lat], coords[high_lon], horizontal, 1);\r\n  var ang;\r\n  for (let i = 0; i < entrance_point.length; i++) {\r\n    var theta = this.angle(\r\n      coords[least_lat],\r\n      coords[high_lon],\r\n      entrance_point[i],\r\n      0\r\n    );\r\n    ang = theta + out;\r\n    var dist = this.distance(coords[least_lat], entrance_point[i]) * 0.3048; //to convert to meter\r\n    var ver = dist * Math.sin((ang * Math.PI) / 180.0);\r\n    var hor = dist * Math.cos((ang * Math.PI) / 180.0);\r\n    var trans = this.obtaincoordinates(coords[least_lat], ver, hor);\r\n    entrance_point[i].lat = trans.lat;\r\n    entrance_point[i].lon = trans.lon;\r\n  }\r\n  //loop to calculate hybrid grid's local and global coordinates\r\n  for (let p = 0; p < drop_points.length; p++) {\r\n    var final = JSON.parse(JSON.stringify(coords)); //Deep copy of original coords\r\n    var gpoint = drop_points[p];\r\n    //finding nearest corner to gpoint\r\n    var near = 0;\r\n    for (let i = 0; i < coords.length; i++) {\r\n      var temp = this.getHaversineDistance(gpoint, coords[i]);\r\n      if (temp < this.getHaversineDistance(gpoint, coords[near])) {\r\n        near = i;\r\n      }\r\n    }\r\n    //angle btwn near, near+1 and gpoint\r\n    var p1 = near;\r\n    if (near == 3) {\r\n      var p2 = 0;\r\n    } else {\r\n      var p2 = near + 1;\r\n    }\r\n    var theta1 = this.angle(coords[p1], coords[p2], gpoint, 1);\r\n    //angle btwn near, near-1 and gpoint\r\n    if (near == 0) {\r\n      var p3 = 3;\r\n    } else {\r\n      var p3 = near - 1;\r\n    }\r\n    var theta2 = this.angle(coords[p1], coords[p3], gpoint, 1);\r\n    //evaluating local co-ordinates of hybrid grid\r\n    if (theta2 > 90) {\r\n      //finding out axis\r\n      if (coords[p2].localx - coords[p1].localx == 0) {\r\n        //xaxis\r\n        if (coords[p1].localx - coords[p3].localx > 0) {\r\n          var dist = this.perpendicular(coords[p1], coords[p2], gpoint);\r\n          final[p1].localx = final[p1].localx + dist;\r\n          final[p2].localx = final[p2].localx + dist;\r\n        } else if (coords[p1].localx - coords[p3].localx < 0) {\r\n          var dist = this.perpendicular(coords[p1], coords[p2], gpoint);\r\n          final[p1].localx = final[p1].localx - dist;\r\n          final[p2].localx = final[p2].localx - dist;\r\n        }\r\n      } else if (coords[p2].localy - coords[p1].localy == 0) {\r\n        //yaxis\r\n        if (coords[p1].localy - coords[p3].localy > 0) {\r\n          var dist = this.perpendicular(coords[p1], coords[p2], gpoint);\r\n          final[p1].localy = final[p1].localy + dist;\r\n          final[p2].localy = final[p2].localy + dist;\r\n        } else if (coords[p1].localy - coords[p3].localy < 0) {\r\n          var dist = this.perpendicular(coords[p1], coords[p2], gpoint);\r\n          final[p1].localy = final[p1].localy - dist;\r\n          final[p2].localy = final[p2].localy - dist;\r\n        }\r\n      }\r\n    }\r\n    if (theta1 > 90) {\r\n      //finding out axis\r\n      if (coords[p3].localx - coords[p1].localx == 0) {\r\n        //xaxis\r\n        var dist = this.perpendicular(coords[p1], coords[p3], gpoint);\r\n        if (coords[p1].localx - coords[p2].localx > 0) {\r\n          final[p1].localx = final[p1].localx + dist;\r\n          final[p3].localx = final[p3].localx + dist;\r\n        } else if (coords[p1].localx - coords[p2].localx < 0) {\r\n          final[p1].localx = final[p1].localx - dist;\r\n          final[p3].localx = final[p3].localx - dist;\r\n        }\r\n      } else if (coords[p3].localy - coords[p1].localy == 0) {\r\n        //yaxis\r\n        var dist = this.perpendicular(coords[p1], coords[p3], gpoint);\r\n        if (coords[p1].localy - coords[p2].localy > 0) {\r\n          final[p1].localy = final[p1].localy + dist;\r\n          final[p3].localy = final[p3].localy + dist;\r\n        } else if (coords[p1].localy - coords[p2].localy < 0) {\r\n          final[p1].localy = final[p1].localy - dist;\r\n          final[p3].localy = final[p3].localy - dist;\r\n        }\r\n      }\r\n    }\r\n    //evaluating global co-ordinates of hybrid grid\r\n    var slope =\r\n      (coords[high_lon].localy - coords[least_lat].localy) /\r\n      (coords[high_lon].localx - coords[least_lat].localx);\r\n    for (let i = 0; i < coords.length; i++) {\r\n      if (\r\n        final[i].localx != coords[i].localx ||\r\n        final[i].localy != coords[i].localy\r\n      ) {\r\n        //translating of a corner\r\n        //z is the line equation joining least_lat and high_lon\r\n        if (coords[high_lon].localx - coords[least_lat].localx == 0) {\r\n          var z = final[i].localx - coords[least_lat].localx;\r\n        } else {\r\n          var z =\r\n            final[i].localy -\r\n            coords[least_lat].localy -\r\n            slope * (final[i].localx - coords[least_lat].localx);\r\n        }\r\n        var theta = this.angle(\r\n          coords[least_lat],\r\n          coords[high_lon],\r\n          final[i],\r\n          0\r\n        );\r\n        if (z < 0) {\r\n          ang = -theta + out;\r\n        } else {\r\n          ang = theta + out;\r\n        }\r\n        var dist = this.distance(coords[least_lat], final[i]) * 0.3048; //to convert to meter\r\n        var ver = dist * Math.sin((ang * Math.PI) / 180.0);\r\n        var hor = dist * Math.cos((ang * Math.PI) / 180.0);\r\n        var trans = this.obtaincoordinates(coords[least_lat], ver, hor);\r\n        final[i].lat = trans.lat;\r\n        final[i].lon = trans.lon;\r\n      }\r\n    }\r\n    //correcting the hybrid vertices to remove negatives i.e translating the axes.\r\n    var min_x = Math.min.apply(\r\n      null,\r\n      final.map(function(item) {\r\n        return item.localx;\r\n      })\r\n    );\r\n    var min_y = Math.min.apply(\r\n      null,\r\n      final.map(function(item) {\r\n        return item.localy;\r\n      })\r\n    );\r\n    for (let i = 0; i < final.length; i++) {\r\n      final[i].localx -= min_x;\r\n      final[i].localy -= min_y;\r\n    }\r\n    //translating entrance/any points according to new axis\r\n    for (let i = 0; i < entrance_point.length; i++) {\r\n      entrance_point[i].localx -= min_x;\r\n      entrance_point[i].localy -= min_y;\r\n    }\r\n    coords = final; //for next loop\r\n    //evaluating local coordinates of the DROPOFF point using perpendicular distance from axes\r\n    for (let i = 0; i < coords.length; i++) {\r\n      if (coords[i].localx == 0 && coords[i].localy == 0) {\r\n        var oo = i;\r\n      } //oo-> orgin\r\n      if (coords[i].localx == 0 && coords[i].localy != 0) {\r\n        var on = i;\r\n      } //on-> point on y-axis\r\n      if (coords[i].localx != 0 && coords[i].localy == 0) {\r\n        var no = i;\r\n      } //no-> point on x-axis\r\n    }\r\n    drop_points[p].localx = this.perpendicular(coords[oo], coords[on], gpoint);\r\n    drop_points[p].localy = this.perpendicular(coords[oo], coords[no], gpoint);\r\n    //translating prev dropoff points according to new axis\r\n    for (let i = 0; i < p; i++) {\r\n      drop_points[i].localx -= min_x;\r\n      drop_points[i].localy -= min_y;\r\n    }\r\n  }\r\n  //converting to geoJSON format\r\n  let geoJSON_ext = {\r\n    type: \"FeatureCollection\",\r\n    features: []\r\n  };\r\n  var arr = [];\r\n  for (let j = 0; j < final.length; j++) {\r\n    arr.push([final[j].lon, final[j].lat]);\r\n  }\r\n  geoJSON_ext.features.push({\r\n    type: \"Feature\",\r\n    properties: {},\r\n    geometry: {\r\n      type: \"Polygon\",\r\n      coordinates: [arr]\r\n    }\r\n  });\r\n  return geoJSON_ext;\r\n};\r\n/**\r\n *\r\n * @param {*} nonRefined\r\n * @param {*} refinedPoints\r\n * @param {*} mapElements\r\n * @param {*} floor\r\n * @id N2.1.7\r\n * @author Gulshan Jangid and Akhilesh Karra\r\n * @description generating instructions from points\r\n */\r\nexport const findInstructions = (\r\n  nonRefined,\r\n  refinedPoints,\r\n  mapElements,\r\n  floor\r\n) => {\r\n  //length of refined and non refined paths\r\n  let nonRefinedPoints = JSON.parse(nonRefined);\r\n  var nRefined = refinedPoints.length;\r\n  var nNonRefined = nonRefinedPoints.length;\r\n  //converting the mapElements to ordered map for ease of access\r\n  var ElementMap = new Map();\r\n  var includedSet = new Set();\r\n  var word;\r\n  //for iteration purpose\r\n  var currentNRPoint = 0;\r\n  var currentRPoint = 0;\r\n  var flagList = [];\r\n  var i = 0;\r\n  var j = 0;\r\n  //radius defines what range to cover in a path\r\n  var radius = 3;\r\n  let pathTuning = [];\r\n  //adding the elements to map\r\n  for (i = 0; i < mapElements.length; i++) {\r\n    let props = mapElements[i];\r\n    if (props.element.type === \"Rooms\") {\r\n      if (props.name !== \"undefined\") {\r\n        Object.keys(props).map(id => {\r\n          if (id === \"roomName\") {\r\n            props[`name`] = [...props[id]].join(\"\");\r\n            delete props[id];\r\n          }\r\n        });\r\n        ElementMap.set(\r\n          `${props.coordinateX}@${props.coordinateY}`,\r\n          mapElements[i]\r\n        );\r\n      }\r\n    } else if (props.element.type === \"FloorConnection\") {\r\n      if (props.name !== \"undefined\") {\r\n        ElementMap.set(\r\n          `${props.coordinateX}@${props.coordinateY}`,\r\n          mapElements[i]\r\n        );\r\n      }\r\n    } else if (props.element.type === \"Services\") {\r\n      if (props.name !== \"undefined\")\r\n        ElementMap.set(\r\n          `${props.coordinateX}@${props.coordinateY}`,\r\n          mapElements[i]\r\n        );\r\n    } else if (props.element.type === \"RestRooms\") {\r\n      if (props.name !== \"undefined\")\r\n        ElementMap.set(\r\n          `${props.coordinateX}@${props.coordinateY}`,\r\n          mapElements[i]\r\n        );\r\n    } else {\r\n    }\r\n  }\r\n  // //finding the indices of the\r\n  while (currentNRPoint < nNonRefined && currentRPoint < nRefined) {\r\n    if (\r\n      nonRefinedPoints[currentNRPoint][0] === refinedPoints[currentRPoint].x &&\r\n      nonRefinedPoints[currentNRPoint][1] === refinedPoints[currentRPoint].y\r\n    ) {\r\n      flagList.push(currentNRPoint);\r\n      currentRPoint++;\r\n    }\r\n    currentNRPoint++;\r\n  }\r\n  // Generating the direction and elaborated results\r\n  var DirectionResults = [];\r\n  var ElaboratedResults = [];\r\n  //entry point insertion to the list\r\n  DirectionResults.push(\r\n    \"You are at \" +\r\n      ElementMap.get(\"\" + refinedPoints[0].x + \"@\" + refinedPoints[0].y).name\r\n  );\r\n  ElaboratedResults.push(\r\n    \"You are at \" +\r\n      ElementMap.get(\"\" + refinedPoints[0].x + \"@\" + refinedPoints[0].y).name\r\n  );\r\n  includedSet.add(refinedPoints[0].x + \"@\" + refinedPoints[0].y);\r\n  includedSet.add(\r\n    refinedPoints[nRefined - 1].x + \"@\" + refinedPoints[nRefined - 1].y\r\n  );\r\n\r\n  //iterate and /finding the desired results\r\n  var error = 0;\r\n  for (currentRPoint = 0; currentRPoint < nRefined - 1; currentRPoint++) {\r\n    var angle = 0;\r\n    var coordinates;\r\n    // this.actualAngle = 155\r\n    if (currentRPoint === 0) {\r\n      angle = find_angle(\r\n        {\r\n          x: refinedPoints[currentRPoint].x,\r\n          y: refinedPoints[currentRPoint].y + 1\r\n        },\r\n        refinedPoints[currentRPoint + 1],\r\n        refinedPoints[currentRPoint]\r\n      );\r\n\r\n      let path_angle = angle;\r\n      let floorangle = 270;\r\n      let diff = 360 - floorangle;\r\n      // let CurrentDirection = 60;\r\n      let CurrentDirection = 0;\r\n      let gn = calculatePath(path_angle, diff, CurrentDirection);\r\n      angle = gn;\r\n    } else\r\n      angle = find_angle(\r\n        refinedPoints[currentRPoint - 1],\r\n        refinedPoints[currentRPoint + 1],\r\n        refinedPoints[currentRPoint]\r\n      );\r\n    angle = angle + error;\r\n    error = findErrorInAngle(angle);\r\n    let hypo = 0.6 * (flagList[currentRPoint + 1] - flagList[currentRPoint]);\r\n    let base = Math.cos(angle) * hypo;\r\n    let height = Math.sin(angle) * hypo;\r\n    var forwardStep = parseInt(Math.abs(height));\r\n    var lastStep = parseInt(Math.abs(base));\r\n    let steps = Math.round(parseInt(forwardStep + hypo));\r\n    if (currentRPoint === nRefined - 2) {\r\n      console.log(flagList);\r\n      word = findDirectionword(angle);\r\n      DirectionResults.push(word);\r\n      DirectionResults.push(\r\n        \"Move \" +\r\n          Math.round(\r\n            0.6 * (flagList[currentRPoint + 1] - flagList[currentRPoint])\r\n          ) +\r\n          \" steps forward\"\r\n      );\r\n      pathTuning.push({\r\n        points: refinedPoints[currentRPoint],\r\n        angle: angle,\r\n        base,\r\n        height,\r\n        word\r\n      });\r\n      break;\r\n    }\r\n    if (hypo <= 6) {\r\n      word = findDirectionword(angle);\r\n      if (word.includes(\"Turn 0 O' Clock\")) {\r\n        word = \"Go straight\";\r\n      }\r\n      pathTuning.push({\r\n        points: refinedPoints[currentRPoint],\r\n        angle: angle,\r\n        base,\r\n        height,\r\n        word\r\n      });\r\n      DirectionResults.push(word + \" and move\"+steps+\"steps forward\");\r\n      \t\r\n    } else {\r\n      word = findDirectionword(angle);\r\n      pathTuning.push({\r\n        points: refinedPoints[currentRPoint],\r\n        angle: angle,\r\n        base,\r\n        height,\r\n        word\r\n      });\r\n      let step = parseInt(\r\n        Math.round(\r\n          0.6 * (flagList[currentRPoint + 1] - flagList[currentRPoint])\r\n        )\r\n      );\r\n      DirectionResults.push(word);\r\n      DirectionResults.push(\" Move \" + step + \" steps forward\");\r\n    }\r\n    //this part of code handles the intermediate importatnt rooms\r\n    var begin = flagList[currentRPoint] + 1;\r\n    var end = flagList[currentRPoint + 1];\r\n\r\n    while (begin < end) {\r\n      var currpoint = nonRefinedPoints[begin];\r\n      for (\r\n        i = Math.max(0, currpoint[0] - radius);\r\n        i < currpoint[0] + radius;\r\n        i++\r\n      ) {\r\n        for (\r\n          j = Math.max(0, currpoint[1] - radius);\r\n          j < currpoint[1] + radius;\r\n          j++\r\n        ) {\r\n          if (!includedSet.has(i + \"@\" + j) && ElementMap.has(i + \"@\" + j)) {\r\n            var tempAngle = find_angle(\r\n              {\r\n                x: nonRefinedPoints[begin - 1][0],\r\n                y: nonRefinedPoints[begin - 1][1]\r\n              },\r\n              { x: i, y: j },\r\n              { x: nonRefinedPoints[begin][0], y: nonRefinedPoints[begin][1] }\r\n            );\r\n            ElaboratedResults.push(\r\n              ElementMap.get(i + \"@\" + j).roomName +\r\n                \" on your \" +\r\n                findDirectionAbbreviation(tempAngle)\r\n            );\r\n            includedSet.add(i + \"@\" + j);\r\n          }\r\n        }\r\n      }\r\n      begin++;\r\n    }\r\n  }\r\n  let elem = ElementMap.get(\r\n    \"\" + refinedPoints[nRefined - 1].x + \"@\" + refinedPoints[nRefined - 1].y\r\n  );\r\n  if (\r\n    elem.element.type === \"Services\" &&\r\n    elem.element.subType === \"Rest Rooms\"\r\n  ) {\r\n    let name = `${elem.washroomType} Washroom (${elem.floor} Floor)`;\r\n    DirectionResults.push(\"You will reach \" + name);\r\n  } else if (\r\n    elem.element.type === \"Services\" &&\r\n    elem.element.subType === \"Drinking Water | Non Drinking\"\r\n  ) {\r\n    let name = `Drinking Water Point (${elem.floor} Floor)`;\r\n    DirectionResults.push(\"You will reach \" + name);\r\n  } else {\r\n    DirectionResults.push(\r\n      \"You will reach \" +\r\n        ElementMap.get(\r\n          \"\" +\r\n            refinedPoints[nRefined - 1].x +\r\n            \"@\" +\r\n            refinedPoints[nRefined - 1].y\r\n        ).name\r\n    );\r\n  }\r\n  ElaboratedResults.push(\r\n    \"You have reached \" +\r\n      ElementMap.get(\r\n        \"\" + refinedPoints[nRefined - 1].x + \"@\" + refinedPoints[nRefined - 1].y\r\n      ).name\r\n  );\r\n  return DirectionResults;\r\n};\r\n/**\r\n *\r\n * @param {*} path_angle\r\n * @param {*} diff\r\n * @param {*} CurrentDirection\r\n * @id N2.1.9\r\n * @author Gulshan Jangid\r\n * @description calculate path\r\n */\r\nvar calculatePath = (path_angle, diff, CurrentDirection) => {\r\n  let pathGN, rotateDirection, path_angleN;\r\n  if (path_angle >= 0 && path_angle < 106) {\r\n    pathGN = 360 - (diff - path_angle);\r\n    rotateDirection = pathGN - CurrentDirection;\r\n  } else if (path_angle > 105 && path_angle <= 180) {\r\n    pathGN = path_angle - diff;\r\n    rotateDirection = pathGN - CurrentDirection;\r\n  } else if (path_angle <= -1 && path_angle >= -180) {\r\n    path_angleN = 180 + path_angle;\r\n    pathGN = path_angleN + 180 - diff;\r\n    rotateDirection = pathGN - CurrentDirection;\r\n  }\r\n  return rotateDirection;\r\n};\r\n/**\r\n *\r\n * @param {*} points\r\n * @param {*} tolerance\r\n * @id N2.1.10\r\n * @author Gulshan Jangid\r\n * @description simplify points\r\n */\r\nexport const simplifyPath = (points, tolerance) => {\r\n  // helper classes\r\n  var Vector = function(x, y) {\r\n    this.x = x;\r\n    this.y = y;\r\n  };\r\n  var Line = function(p1, p2) {\r\n    this.p1 = p1;\r\n    this.p2 = p2; \r\n    this.distanceToPoint = function(point) {\r\n      // slope\r\n      var m = (this.p2.y - this.p1.y) / (this.p2.x - this.p1.x),\r\n        // y offset\r\n        b = this.p1.y - m * this.p1.x,\r\n        d = [];\r\n\tif(this.p2.x==this.p1.x){\r\n\td.push(point.x-p2.x);}\r\n      // distance to the linear equation\r\n\telse{\r\n      d.push(\r\n        Math.abs(point.y - m * point.x - b) / Math.sqrt(Math.pow(m, 2) + 1)\r\n      );}\r\n      // distance to p1\r\n      d.push(\r\n        Math.sqrt(\r\n          Math.pow(point.x - this.p1.x, 2) + Math.pow(point.y - this.p1.y, 2)\r\n        )\r\n      );\r\n      // distance to p2\r\n      d.push(\r\n        Math.sqrt(\r\n          Math.pow(point.x - this.p2.x, 2) + Math.pow(point.y - this.p2.y, 2)\r\n        )\r\n      );\r\n      // return the smallest distance\r\n      return d.sort(function(a, b) {\r\n        return a - b; //causes an array to be sorted numerically and ascending\r\n      })[0];\r\n    };\r\n    this.intersectPoint = function(po1,po2) {\r\n      var m = (this.p1.y-this.p2.y)/(this.p1.x - this.p2.x);\r\n      var m1 = (po1.y-po2.y)/(po1.x-po2.x);\r\n      var b = this.p1.y-m*this.p1.x;\r\n      var b1 = po1.y - m1*po1.x;\r\n      var x2=0;\r\n      var y2 = 0;\r\n      if(this.p1.x === this.p2.x){\r\n        x2 = this.p1.x;\r\n        y2 = m1*x2 + b1;  \r\n      }else \r\n      if(po1.x === po2.x){\r\n        x2 = po1.x;\r\n        y2 = m*x2 + b;\r\n       } else{\r\n         x2 = (b1-b)/(m-m1);\r\n         y2 = m*x2 + b;\r\n       }\r\n       return {x:Math.round(x2),y:Math.round(y2)};\r\n\r\n    }\r\n  };\r\n  /**\r\n   *\r\n   * @param {*} points\r\n   * @param {*} tolerance\r\n   * @id N2.1.11\r\n * @author Gulshan Jangid\r\n * @description algorithm to generate smooth line\r\n   */\r\n  var douglasPeucker = function(points, tolerance) {\r\n    if (points.length <= 2) {\r\n      return [points[0]];\r\n    }\r\n    var returnPoints = [],\r\n      // make line from start to end\r\n      line = new Line(points[0], points[points.length - 1]),\r\n      // find the largest distance from intermediate poitns to this line\r\n      maxDistance = 0,\r\n      maxDistanceIndex = 0,\r\n      p;\r\n    for (var i = 1; i <= points.length - 2; i++) {\r\n      var distance = line.distanceToPoint(points[i]);\r\n      if (distance > maxDistance) {\r\n        maxDistance = distance;\r\n        maxDistanceIndex = i;\r\n      }\r\n   }\r\n    // check if the max distance is greater than our tollerance allows\r\n    if (maxDistance >= tolerance) {\r\n      p = points[maxDistanceIndex];\r\n      line.distanceToPoint(p, true);\r\n      // include this point in the output\r\n      returnPoints = returnPoints.concat(\r\n        douglasPeucker(points.slice(0, maxDistanceIndex + 1), tolerance)\r\n      );\r\n      // returnPoints.push( points[maxDistanceIndex] );\r\n      returnPoints = returnPoints.concat(\r\n        douglasPeucker(points.slice(maxDistanceIndex, points.length), tolerance)\r\n      );\r\n    } else {\r\n      // ditching this point\r\n      p = points[maxDistanceIndex];\r\n      line.distanceToPoint(p, true);\r\n      returnPoints = [points[0]];\r\n    }\r\n    return returnPoints;\r\n  };\r\n  var arr = douglasPeucker(points, tolerance);\r\n  // always have to push the very last point on so it doesn't get left off\r\n  arr.push(points[points.length - 1]);\r\n  for(let i=0;i<arr.length-3;i++){\r\n    var l1 = new Line(arr[i],arr[i+1]);\r\n    var l2 = new Line(arr[i+1],arr[i+2]);\r\n    var l3 = new Line(arr[i+2],arr[i+3]);\r\n    var dist = Math.sqrt((arr[i+1].x-arr[i+2].x)*(arr[i+1].x-arr[i+2].x) + (arr[i+1].y-arr[i+2].y)*(arr[i+1].y-arr[i+2].y));\r\n    if(dist<5){\r\n      //find intersecting point of l1 and l3\r\n      var point = l1.intersectPoint(arr[i+2],arr[i+3]);\r\n      arr.splice(i+1,2,point);\r\n      console.log(point);\r\n      \r\n    }\r\n  }\r\n  console.log(arr);\r\n  return arr;\r\n};\r\n/**\r\n *\r\n * @param {*} p0\r\n * @param {*} p1\r\n * @param {*} c\r\n * @id N2.1.12\r\n * @author Gulshan Jangid\r\n * @description find angle\r\n */\r\nexport const find_angle = (p0, p1, c) => {\r\n  var p0c = { x: c.x - p0.x, y: c.y - p0.y }; // p0->c (b)\r\n  var cp1 = { x: p1.x - c.x, y: p1.y - c.y }; // p1->c (a)\r\n  return (\r\n    (Math.atan2(cp1.y * p0c.x - cp1.x * p0c.y, p0c.x * cp1.x + p0c.y * cp1.y) *\r\n      180) /\r\n    Math.PI\r\n  );\r\n};\r\n//Module for finding the direction's equivalent commands\r\n/**\r\n *\r\n * @param {*} angle\r\n * @id N2.1.13\r\n * @author Gulshan Jangid\r\n * @description find direction word\r\n */\r\nexport const findDirectionword = angle => {\r\n  if (angle >= 75 && angle <= 105) return \"Turn Right\";\r\n  if (angle <= -75 && angle >= -105) return \"Turn Left\";\r\n  if ((angle >= 165 && angle <= 180) || (angle <= -165 && angle >= -180))\r\n    return \"Go Straight\";\r\n  if (angle < 0) {\r\n    if (Math.round((360 + angle) / 30) === 9) {\r\n      return \"Turn Left\";\r\n    }\r\n    return \"Turn \" + Math.round((360 + angle) / 30) + \" O' Clock\";\r\n  }\r\n  if (Math.floor(angle / 30) === 3) return \"Turn Right\";\r\n  return \"Turn \" + Math.round(angle / 30) + \" O' Clock\";\r\n};\r\n/**\r\n *\r\n * @param {*} angle\r\n * @id N2.1.14\r\n * @author Gulshan Jangid\r\n * @description generate word from angle\r\n */\r\nexport const findWord = angle => {\r\n  if (angle >= 75 && angle <= 105) return \"Turn Right\";\r\n  if (angle <= -75 && angle >= -105) return \"Turn Left\";\r\n  if ((angle >= 165 && angle <= 180) || (angle <= -165 && angle >= -180))\r\n    return \"Go Straight\";\r\n  if (angle < 0) {\r\n    if (Math.round((360 + angle) / 30) === 9) {\r\n      return \"Turn Left\";\r\n    }\r\n    return \"Turn left\";\r\n    //   return \"Turn \" + Math.round((360 + angle) / 30) + \" O' Clock\";\r\n  }\r\n  if (Math.floor(angle / 30) === 3) return \"Turn Right\";\r\n  return \"Turn right\";\r\n  // return \"Turn \" + Math.round(angle / 30) + \" O' Clock\";\r\n};\r\n/**\r\n *\r\n * @param {*} angle\r\n * @id N2.1.15\r\n * @author Gulshan Jangid\r\n * @description error in angle\r\n */\r\n// find the error component in the iteration and leaves it for the next iteration\r\nexport const findErrorInAngle = angle => {\r\n  if (angle < 0) return 360 + angle - Math.round((360 + angle) / 30) * 30;\r\n  return angle - Math.round(angle / 30) * 30;\r\n};\r\n//same as above but in abbreviated form\r\n/**\r\n *\r\n * @param {*} angle\r\n * @id N2.1.16\r\n * @author Gulshan Jangid\r\n * @description direction abbreviation\r\n */\r\nexport const findDirectionAbbreviation = angle => {\r\n  if (angle > 0) return \"Right\";\r\n  return \"Left\";\r\n};\r\n","C:\\Users\\Assistech\\mishor\\inclunav\\src\\components\\dashboard\\global\\BottomBar.js",["771","772","773","774","775"],"import React from \"react\";\r\nimport Modal from \"react-modal\";\r\nimport { saveAddress } from \"../../../store/actions/index\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst customStyles = {\r\n  content: {\r\n    top: \"50%\",\r\n    left: \"50%\",\r\n    right: \"auto\",\r\n    bottom: \"auto\",\r\n    marginRight: \"-50%\",\r\n    transform: \"translate(-50%, -50%)\",\r\n    background: \"#27282D\",\r\n    width: \"75%\"\r\n  },\r\n  overlay: { zIndex: 9999 }\r\n};\r\nclass BottomBar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      open: false,\r\n      type: \"\",\r\n      showOption: false,\r\n      toggle: false,\r\n      click:false\r\n    };\r\n  }\r\n\r\n  componentDidMount(){\r\n  }\r\n\r\n  onOpenModal = () => {\r\n    this.setState({ open: true });\r\n  };\r\n\r\n  onCloseModal = () => {\r\n    this.setState({ open: false });\r\n  };\r\n\r\n  render() {\r\n    let {toggle} = this.state;\r\n    if((this.props.dstName !== \"Destination\") && !this.state.click){\r\n        toggle  = true\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <Modal\r\n          isOpen={this.state.open}\r\n          // onAfterOpen = {afterOpenModal}\r\n          onRequestClose={this.onCloseModal}\r\n          style={customStyles}\r\n          contentLabel=\"Example Modal\"\r\n          // open = {this.state.open} onClose={this.onCloseModal}\r\n        >\r\n          <div className=\"row\">\r\n            <div className=\"col-12 text-center mt-4\">\r\n              <img\r\n                width=\"25\"\r\n                height=\"25\"\r\n                src=\"assets/images/saved_address.svg\"\r\n                alt=\"vew details\"\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"col-12 text-white text-center\">\r\n              {this.props.destinationVenue}\r\n            </div>\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"col-12 text-white text-center font-weight-bold\">\r\n              <p className=\"h4\"> Save Location as? </p>\r\n            </div>\r\n          </div>\r\n\r\n          {this.state.showOption ? (\r\n            <div\r\n              className=\"d-flex-column justify-content-center bg-white rounded\"\r\n              style={{ padding: \"1px\" }}\r\n            >\r\n              <div\r\n                className=\"save-address-box row text-white mt-1 mb-2 ml-1 row\"\r\n                onClick={() => {\r\n                  this.setState({\r\n                    type: \"Home\"\r\n                  });\r\n                }}\r\n              >\r\n                <div className=\"col-2 my-auto\">\r\n                  <img\r\n                    width=\"25\"\r\n                    height=\"25\"\r\n                    src=\"assets/images/home.svg\"\r\n                    alt=\"vew details\"\r\n                  />\r\n                </div>\r\n                <div className=\"col-10 my-auto\">Home Address</div>\r\n              </div>\r\n              <div\r\n                className=\"save-address-box row text-white mb-2 ml-1\"\r\n                onClick={() => {\r\n                  this.setState({\r\n                    type: \"Home\"\r\n                  });\r\n                }}\r\n              >\r\n                <div className=\"col-2 my-auto\">\r\n                  <img\r\n                    width=\"25\"\r\n                    height=\"25\"\r\n                    src=\"assets/images/work.svg\"\r\n                    alt=\"vew details\"\r\n                  />\r\n                </div>\r\n                <div className=\"col-10 my-auto\">Work Address</div>\r\n              </div>\r\n              <div\r\n                className=\"save-address-box row text-white mb-2 ml-1\"\r\n                onClick={() => {\r\n                  this.setState({\r\n                    showOption: false\r\n                  });\r\n                }}\r\n              >\r\n                <div className=\"col-2 my-auto\">\r\n                  <img\r\n                    width=\"25\"\r\n                    height=\"25\"\r\n                    src=\"assets/images/saved_address.svg\"\r\n                    alt=\"vew details\"\r\n                  />\r\n                </div>\r\n                <div className=\"col-10 my-auto\">Custom Address</div>\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control w-100\"\r\n              placeholder=\"Enter Custom Name\"\r\n              value={this.state.type}\r\n              onChange={e => {\r\n                this.setState({\r\n                  type: e.target.value\r\n                });\r\n              }}\r\n            />\r\n          )}\r\n\r\n          <div className=\"row w-100 m-0 pb-5 mt-2\">\r\n            <div className=\"col-6\">\r\n              <button\r\n                className={\r\n                  \"btn btn-language-setting btn-confirm-text mx-auto btn-block btn-default font-weight-bold h2\"\r\n                }\r\n                onClick={() => {\r\n                  let array = this.props.destinationVenue.split(\",\");\r\n                  let name = array[0];\r\n                  let floor = array[1].split(\" \");\r\n                  let buildingName = array[2];\r\n                  let venueName = array[3];\r\n                }}\r\n                style={{\r\n                  width: \"75px\",\r\n                  height: \"48px\",\r\n                  float: \"left\"\r\n                }}\r\n              >\r\n                SAVE\r\n              </button>\r\n            </div>\r\n            <div className=\"col-6\">\r\n              <button\r\n                className={\r\n                  \"btn btn-language-dark btn-cancel-text mx-auto btn-block btn-default font-weight-bold h2\"\r\n                }\r\n                onClick={() => {\r\n                  this.onCloseModal();\r\n                }}\r\n                style={{\r\n                  width: \"84px\",\r\n                  height: \"48px\",\r\n                  float: \"right\"\r\n                }}\r\n              >\r\n                CANCEL\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </Modal>\r\n        <div\r\n          className={`d-flex-column ${\r\n            toggle ? \"bottom-barbtn\" : \"bottom-barbtn-toggle\"\r\n          }`}\r\n        >\r\n          <div\r\n            style={{ textAlign: \"center\" }}\r\n            onClick={() => {\r\n              this.setState({ toggle: !this.state.toggle,click:true });\r\n            }}\r\n          >\r\n            <img src=\"assets/images/viewDetails.svg\" alt=\"vew details\" />\r\n          </div>\r\n          {toggle ? (\r\n            <div className=\"bg-dark\">\r\n              <div className=\"row w-100  mx-auto mb-2\">\r\n                <div className=\"col-2\">\r\n                  <img\r\n                    className=\"float-left mt-2 mr-2\"\r\n                    src=\"/inclunav/assets/images/dst_navigate.png\"\r\n                    alt=\"select destination\"\r\n                  />\r\n                </div>\r\n                <div className=\"col-10\">\r\n\r\n                    <div className=\"row\">\r\n                  <div className=\"col-4\">\r\n                  <p className=\"strt-txt text-justify \"> {this.props.srcName} </p>\r\n                </div>\r\n                <div\r\n                  className=\"col-2\"\r\n                  onClick={() => {\r\n                  }}\r\n                >\r\n                  <img\r\n                    className=\"ml-2\"\r\n                    src=\"/inclunav/assets/images/way.svg\"\r\n                    alt=\"share location\"\r\n                  />\r\n                </div>\r\n                <div className=\"col-4\">\r\n                  <p className=\"strt-txt text-justify \">\r\n                  {this.props.dstName} \r\n                  </p>\r\n                </div>\r\n                  </div>\r\n\r\n                </div>\r\n                {/* <div className=\"col-2\">\r\n                  <div className=\"direction-text\">\r\n                    <div className=\"text-white\">\r\n                      5000\r\n                    </div>\r\n                    <div className=\"text-white strt-txt text-justify\"></div>\r\n                  </div>\r\n                </div> */}\r\n              </div>\r\n\r\n\r\n\r\n              \r\n              <div className=\"row w-100  mx-auto\">\r\n                <div className=\"col-6\">\r\n                  <button\r\n                    className=\"btn btn-direction  mx-auto btn-block btn-default btn-lg font-weight-bold  h2\"\r\n                    onClick={() => {\r\n                        this.props.handleInstr()\r\n                      // this.props.handleShowInstructions();\r\n                    }}\r\n                  >\r\n                    Directions\r\n                  </button>\r\n                </div>\r\n                <div className=\"col-2\">\r\n                  <button\r\n                    className=\"ellipse\"\r\n                    onClick={() => {\r\n                      // this.onOpenModal();\r\n                    }}\r\n                  >\r\n                    <img\r\n                      className=\"mx-auto my-auto\"\r\n                      src=\"/inclunav/assets/images/save_marker.svg\"\r\n                      alt=\"save marker\"\r\n                    />\r\n                  </button>\r\n                </div>\r\n                <div className=\"col-2\">\r\n                    <button\r\n                      className=\"ellipse\"\r\n                      onClick={(e)=>{\r\n                        if (String(this.props.dstData.properties.url) === \"null\") {\r\n                            /*to handle null values*/\r\n                            e.preventDefault();\r\n                            alert(` No website associated`);\r\n                          } else {\r\n                            window.open(this.props.dstData.properties.url, \"_blank\" /*Open in a new window.*/);\r\n                          }\r\n                      }}\r\n                    >\r\n                      <i class=\"mx-auto my-auto text-white fa fa-globe\"></i>\r\n                    </button>\r\n                </div>\r\n                <div className=\"col-2\">\r\n                  <button className=\"ellipse\">\r\n                    <img\r\n                      className=\"mx-auto my-auto\"\r\n                      src=\"/inclunav/assets/images/telephone.svg\"\r\n                      alt=\"save marker\"\r\n                    />\r\n                  </button>\r\n                </div>\r\n              </div>\r\n\r\n\r\n              {/* <div className=\"row w-100  mx-auto bottom-div mb-2 p-2\">\r\n                <div className=\"col-4\">\r\n                  <p className=\"strt-txt text-justify \">Building Entrance</p>\r\n                </div>\r\n                <div\r\n                  className=\"col-2\"\r\n                  onClick={() => {\r\n                  }}\r\n                >\r\n                  <img\r\n                    className=\"ml-2\"\r\n                    src=\"/inclunav/assets/images/way.svg\"\r\n                    alt=\"share location\"\r\n                  />\r\n                </div>\r\n                <div className=\"col-4\">\r\n                  <p className=\"strt-txt text-justify \">\r\n                  </p>\r\n                </div>\r\n                <div\r\n                  className=\"col-2\"\r\n                  onClick={() => {\r\n                    // this.props.handleShowInstructions();\r\n                    // this.setState({ showInstructions: true });\r\n                  }}\r\n                >\r\n                  <img\r\n                    className=\"ml-2\"\r\n                    src=\"/inclunav/assets/images/toggle_menu.svg\"\r\n                    alt=\"share location\"\r\n                  />\r\n                </div>\r\n              </div> */}\r\n\r\n\r\n\r\n            </div>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    saveAddr: state.saveAddress\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n  saveAddress\r\n})(BottomBar);\r\n","C:\\Users\\Assistech\\mishor\\inclunav\\src\\components\\dashboard\\ProfileSettings.js",["776","777","778","779","780","781","782","783","784","785","786","787","788","789","790","791","792","793","794","795","796","797","798","799","800","801","802","803","804","805"],"C:\\Users\\Assistech\\mishor\\inclunav\\src\\components\\dashboard\\navigation\\InclusiveNavigation.js",["806","807","808","809","810","811","812","813","814","815","816","817","818","819","820","821","822","823","824","825","826","827","828","829","830","831","832","833","834","835","836","837","838","839","840","841","842","843","844","845","846","847","848","849","850","851","852","853","854","855","856","857","858","859","860","861","862","863","864","865","866","867","868","869","870","871","872","873","874","875","876","877","878","879","880","881","882","883","884","885","886","887","888","889","890","891","892","893","894","895","896","897","898","899"],"C:\\Users\\Assistech\\mishor\\inclunav\\src\\components\\dashboard\\NavigationSettings.js",[],"C:\\Users\\Assistech\\mishor\\inclunav\\src\\components\\dashboard\\Settings.js",["900","901"],"C:\\Users\\Assistech\\mishor\\inclunav\\src\\store\\actions\\index.js",["902","903","904","905"],"import axios from 'axios';\r\nimport config from '../../config';\r\n\r\nexport const userLogin = (data,cb)=> async (dispatch)=>{\r\n    const response = await axios.post(`${config.login}`,data);\r\n    const getDetails = response.data;\r\n    dispatch({type:'USER_LOGIN',payload:getDetails})\r\n    cb()\r\n}\r\n\r\nexport const userRegister = (data,cb)=> async (dispatch)=>{\r\n    const response = await axios.post(`${config.register}`,data);\r\n    const getDetails = response.data;\r\n    dispatch({type:'USER_REGISTER',payload:getDetails})\r\n    cb()\r\n}\r\n\r\nexport const sendOtp = (data,cb)=> async (dispatch)=>{\r\n    const response = await axios.post(`${config.sendOtp}`,data);\r\n    const getDetails = response.data;\r\n    dispatch({type:'SEND_OTP',payload:getDetails})\r\n    cb()\r\n}\r\n\r\nexport const verifyOtp = (data,cb)=> async (dispatch)=>{\r\n    const response = await axios.post(`${config.verifyOtp}`,data);\r\n    const getDetails = response.data;\r\n    dispatch({type:'VERIFY_OTP',payload:getDetails})\r\n    cb()\r\n}\r\n\r\nexport const sendEmailotp = (data,cb)=> async (dispatch)=>{\r\n    const response = await axios.post(`${config.sendEmailOtp}`,data);\r\n    const getDetails = response.data;\r\n    dispatch({type:'SEND_EMAILOTP',payload:getDetails})\r\n    cb()\r\n}\r\n\r\nexport const verifyEmailotp = (data,cb)=> async (dispatch)=>{\r\n    const response = await axios.post(`${config.verifyEmailOtp}`,data);\r\n    const getDetails = response.data;\r\n    dispatch({type:'VERIFY_EMAILOTP',payload:getDetails})\r\n    cb()\r\n}\r\n\r\nexport const forgotPassword = (data)=> async (dispatch)=>{\r\n    const response = await axios.post(`${config.forgotPassword}`,data);\r\n    const getDetails = response.data;\r\n    dispatch({type:'FORGOT_PASSWORD',payload:getDetails})\r\n\r\n}\r\n\r\nexport const userDetails = (data)=> async (dispatch)=>{\r\n    const response = await axios.post(config.userDetails,data,{headers:{ 'Content-Type': 'application/json', 'Authorization': `${data.token}` }});\r\n    const getDetails = response.data;\r\n    dispatch({type:'USER_DETAILS',payload:getDetails})\r\n}\r\n\r\nexport const resetPassword = (data)=> async (dispatch)=>{\r\n    const response = await axios.post(config.resetPassword,data,{headers:{ 'Content-Type': 'application/json', 'Authorization': `${data.token}` }});\r\n    const getDetails = response.data;\r\n    dispatch({type:'RESET_PASSWORD',payload:getDetails})\r\n}\r\n\r\n// export const venueList = (data)=> async (dispatch)=>{\r\n//     const response = await axios.post(config.venueList,data,{headers:{ 'Content-Type': 'application/json', 'Authorization': `${data.token}` }});\r\n//     const getDetails = response.data;\r\n//     dispatch({type:'RESET_PASSWORD',payload:getDetails})\r\n// }\r\n\r\nexport const getAllBuildingElements = (data,next)=> async (dispatch)=>{\r\n    const response = await axios.get(`${config.navigationData}/${data.venueName}/${data.buildingName}/null`);\r\n    const responseData = response.data;\r\n    dispatch({type:'NAVIGATION_INFO',payload:responseData})\r\n    next(); \r\n}\r\n\r\nexport const androidNavigation = (data,next)=> async (dispatch)=>{\r\n    const response = await axios.get(`${config.androidNavigation}/${data.venueName}/${data.buildingName}/null`);\r\n    const responseData = response.data;\r\n    let arra = [];\r\n    for (let i = 0; i < responseData.length; i++) {\r\n      if (responseData[i].element.type === \"Floor\") {\r\n          arra.push(responseData[i])\r\n    }\r\n    }\r\n    dispatch({type:'ANDROID_NAVIGATION',payload:arra})\r\n    next(); \r\n}\r\n\r\nexport const globalNavigation = (data,next)=> async (dispatch)=>{\r\n    const response = await axios.get(`${config.androidNavigation}/${data.venueName}/${data.buildingName}/null`);\r\n    console.log(\"data\",data,response)\r\n    const responseData = response.data;\r\n    dispatch({type:'GLOBAL_NAVIGATION',payload:responseData})\r\n    next(); \r\n}\r\n\r\nexport const imgDetails = (venue,buildingname,floor,file,cb)=> async  (dispatch)=>{\r\n    const response = await axios.get(`${config.imgDetails}${venue}/${buildingname}/${floor}/${file}`)\r\n    const pathResponse = response.data;\r\n    dispatch({type:'FETCH_IMAGE',payload: pathResponse});\r\n    cb();\r\n}\r\n\r\nexport const refPoint =  (venue,building,floor,cb) => async (dispatch) => {\r\n    const response = await axios.get(`${config.globalRef}${venue}/${building}/${floor}`);\r\n    const responseData = response.data;\r\n    console.log(\"response\",responseData,venue,building,floor)\r\n    dispatch({type:'REF_POINT',payload:responseData})\r\n    cb()\r\n}\r\n\r\nexport const floorList = (buildingName,next)=> async (dispatch)=>{\r\n    const response = await axios.post(config.floorList,{buildingName:buildingName});\r\n    const allFloors = response.data;\r\n    dispatch({type:'FLOOR_LIST',payload: allFloors})\r\n    next()\r\n}\r\n\r\nexport const venueList = (next)=> async (dispatch)=>{\r\n    const response = await axios.post(config.venueList);\r\n    const getDetails = response.data;\r\n    dispatch({type:'VENUE_LIST',payload:getDetails});\r\n    next();\r\n}\r\n\r\n// export const buildingList = (data)=> async (dispatch)=>{\r\n//     const response = await axios.post(config.buildingList,data,{headers:{ 'Content-Type': 'application/json', 'Authorization': `${data.token}` }});\r\n//     const getDetails = response.data;\r\n//     dispatch({type:'BUILDING_LIST',payload:getDetails})\r\n// }\r\n\r\nexport const buildingList = (data,cb)=> async (dispatch)=>{\r\n    const response = await axios.post(config.buildingList,data);\r\n    const getDetails = response.data;\r\n    dispatch({type:'BUILDING_LIST',payload:getDetails})\r\n    cb()\r\n}\r\n\r\nexport const getGpsLocation = (data,cb)=> async (dispatch)=>{\r\n    let latitude = data.lat.toString()\r\n    let longitude = data.lng.toString()\r\n    let url = `https://forward-reverse-geocoding.p.rapidapi.com/v1/reverse?lat=${latitude}&lon=${longitude}&format=json&accept-language=en&polygon_threshold=0.0`\r\n    let resp = await fetch(url,{\r\n      \"method\": \"GET\",\r\n      \"headers\": {\r\n        \"x-rapidapi-key\": \"23d4e05de9msh6374022ee59c78ap1c8dfdjsn43be9985d2e1\",\r\n        \"x-rapidapi-host\": \"forward-reverse-geocoding.p.rapidapi.com\",\r\n        \"useQueryString\": true\r\n      }\r\n    })\r\n    let dt = await resp.json()\r\n    dispatch({type:'GPS_LOCATION',payload:dt})\r\n    cb()\r\n}\r\n\r\n//Settings section\r\nexport const getUserInformation = (data,cb)=> async (dispatch)=>{\r\n    const response = await axios.post(config.userInformation,data,{headers:{ 'Content-Type': 'application/json', 'Authorization': `${data.token}` }});\r\n    const getDetails = response.data;\r\n    dispatch({type:'USER_INFORMATION',payload:getDetails})\r\n    cb()\r\n}\r\n\r\nexport const getUserPortfolio = (data,cb)=> async (dispatch)=>{\r\n    const response = await axios.post(config.userPortfolio,data,{headers:{ 'Content-Type': 'application/json', 'Authorization': `${data.token}` }});\r\n    const getDetails = response.data;\r\n    dispatch({type:'USER_PORTFOLIO',payload:getDetails})\r\n    cb()\r\n}\r\n\r\nexport const updateName = (data,cb)=> async (dispatch)=>{\r\n    const response = await axios.post(config.updateName,data,{headers:{ 'Content-Type': 'application/json', 'Authorization': `${data.token}` }});\r\n    const getDetails = response.data;\r\n    dispatch({type:'UPDATE_NAME',payload:getDetails})\r\n    cb()\r\n}\r\n\r\nexport const updatePassword = (data,cb)=> async (dispatch)=>{\r\n    const response = await axios.post(config.updatePassword,data,{headers:{ 'Content-Type': 'application/json', 'Authorization': `${data.token}` }});\r\n    const getDetails = response.data;\r\n    dispatch({type:'UPDATE_PASSWORD',payload:getDetails})\r\n    cb()\r\n}\r\n\r\nexport const updateMobile = (data,cb)=> async (dispatch)=>{\r\n    const response = await axios.post(config.updateMobile,data,{headers:{ 'Content-Type': 'application/json', 'Authorization': `${data.token}` }});\r\n    const getDetails = response.data;\r\n    dispatch({type:'UPDATE_MOBILE',payload:getDetails})\r\n    cb()\r\n}\r\n\r\nexport const updateEmail = (data,cb)=> async (dispatch)=>{\r\n    const response = await axios.post(config.updateEmail,data,{headers:{ 'Content-Type': 'application/json', 'Authorization': `${data.token}` }});\r\n    const getDetails = response.data;\r\n    console.log(\"update email response\",response)\r\n    dispatch({type:'UPDATE_EMAIL',payload:getDetails})\r\n    cb()\r\n}\r\n///\r\nexport const updateLanguage = (data,cb)=> async (dispatch)=>{\r\n    const response = await axios.post(config.updateLanguage,data,{headers:{ 'Content-Type': 'application/json', 'Authorization': `${data.token}` }});\r\n    const getDetails = response.data;\r\n    dispatch({type:'UPDATE_LANGUAGE',payload:getDetails})\r\n    cb()\r\n}\r\n\r\nexport const updateVision = (data,cb)=> async (dispatch)=>{\r\n    const response = await axios.post(config.updateVision,data,{headers:{ 'Content-Type': 'application/json', 'Authorization': `${data.token}` }});\r\n    const getDetails = response.data;\r\n\r\n    dispatch({type:'UPDATE_VISION',payload:getDetails})\r\n    cb()\r\n}\r\n\r\nexport const updateHeight = (data,cb)=> async (dispatch)=>{\r\n    const response = await axios.post(config.updateHeight,data,{headers:{ 'Content-Type': 'application/json', 'Authorization': `${data.token}` }});\r\n    const getDetails = response.data;\r\n    dispatch({type:'UPDATE_HEIGHT',payload:getDetails})\r\n    cb()\r\n}\r\n\r\nexport const updateAgegroup = (data,cb)=> async (dispatch)=>{\r\n    const response = await axios.post(config.updateAgegroup,data,{headers:{ 'Content-Type': 'application/json', 'Authorization': `${data.token}` }});\r\n    const getDetails = response.data;\r\n    dispatch({type:'UPDATE_AGEGROUP',payload:getDetails})\r\n    cb()\r\n}\r\n\r\nexport const updateWalking = (data,cb)=> async (dispatch)=>{\r\n    const response = await axios.post(config.updateWalking,data,{headers:{ 'Content-Type': 'application/json', 'Authorization': `${data.token}` }});\r\n    const getDetails = response.data;\r\n    dispatch({type:'UPDATE_WALKING',payload:getDetails})\r\n    cb()\r\n}\r\n\r\nexport const saveAddress = (data,cb)=> async (dispatch)=>{\r\n    const response = await axios.post(config.saveAddress,data,{headers:{ 'Content-Type': 'application/json', 'Authorization': `${data.token}` }});\r\n    const getDetails = response.data;\r\n    dispatch({type:'SAVE_ADDRESS',payload:getDetails})\r\n    cb()\r\n}\r\n\r\nexport const osmRoutes = (data,cb)=> async (dispatch)=>{\r\n    let srcLat = data.srcLat;\r\n    let srcLng = data.srcLng;\r\n    let dstLat = data.dstLat;\r\n    let dstLng = data.dstLng;\r\n    // console.log(\"ww\",`${config.osmRoutes}start=${srcLat},${srcLng}&end=${dstLat},${dstLng}`)\r\n    // const response = await axios.get(`${config.osmRoutes}${srcLat},${srcLng};${dstLat},${dstLng}?overview=false`);\r\n    // const getDetails = response.data;\r\n    const getDetails = [];\r\n    dispatch({type:'OSM_ROUTES',payload:getDetails})\r\n    cb()\r\n}\r\n\r\nexport const pickupPoints = (data,cb)=> async (dispatch)=>{\r\n    const response = await axios.get(`${config.pickUpPoints}/${data.venue}/${data.building}`);\r\n    const getDetails = response.data;\r\n    dispatch({type:'PICKUP_POINTS',payload:getDetails})\r\n    cb()\r\n}\r\n\r\nexport const navContent = (data,cb)=> async (dispatch)=>{\r\n    dispatch({type:'NAV_CONTENT',payload:data})\r\n    cb()\r\n}","C:\\Users\\Assistech\\mishor\\inclunav\\src\\components\\dashboard\\navigation\\Menu.js",[],"C:\\Users\\Assistech\\mishor\\inclunav\\src\\components\\dashboard\\navigation\\SelectSource.js",[],"C:\\Users\\Assistech\\mishor\\inclunav\\src\\components\\dashboard\\navigation\\SelectDestination.js",[],{"ruleId":"906","replacedBy":"907"},{"ruleId":"908","replacedBy":"909"},{"ruleId":"910","severity":1,"message":"911","line":15,"column":8,"nodeType":"912","messageId":"913","endLine":15,"endColumn":18},{"ruleId":"914","severity":1,"message":"915","line":1,"column":1,"nodeType":"916","endLine":8,"endColumn":2},{"ruleId":"914","severity":1,"message":"915","line":1,"column":1,"nodeType":"916","endLine":8,"endColumn":2},{"ruleId":"914","severity":1,"message":"915","line":1,"column":1,"nodeType":"916","endLine":8,"endColumn":2},{"ruleId":"914","severity":1,"message":"915","line":1,"column":1,"nodeType":"916","endLine":8,"endColumn":2},{"ruleId":"914","severity":1,"message":"915","line":1,"column":1,"nodeType":"916","endLine":8,"endColumn":2},{"ruleId":"914","severity":1,"message":"915","line":1,"column":1,"nodeType":"916","endLine":8,"endColumn":2},{"ruleId":"914","severity":1,"message":"915","line":1,"column":1,"nodeType":"916","endLine":8,"endColumn":2},{"ruleId":"914","severity":1,"message":"915","line":1,"column":1,"nodeType":"916","endLine":8,"endColumn":2},{"ruleId":"914","severity":1,"message":"915","line":1,"column":1,"nodeType":"916","endLine":8,"endColumn":2},{"ruleId":"914","severity":1,"message":"915","line":1,"column":1,"nodeType":"916","endLine":8,"endColumn":2},{"ruleId":"914","severity":1,"message":"915","line":1,"column":1,"nodeType":"916","endLine":8,"endColumn":2},{"ruleId":"914","severity":1,"message":"915","line":1,"column":1,"nodeType":"916","endLine":8,"endColumn":2},{"ruleId":"914","severity":1,"message":"915","line":1,"column":1,"nodeType":"916","endLine":8,"endColumn":2},{"ruleId":"914","severity":1,"message":"915","line":1,"column":1,"nodeType":"916","endLine":8,"endColumn":2},{"ruleId":"914","severity":1,"message":"915","line":1,"column":1,"nodeType":"916","endLine":8,"endColumn":2},{"ruleId":"914","severity":1,"message":"915","line":1,"column":1,"nodeType":"916","endLine":8,"endColumn":2},{"ruleId":"914","severity":1,"message":"915","line":1,"column":1,"nodeType":"916","endLine":8,"endColumn":2},{"ruleId":"914","severity":1,"message":"915","line":1,"column":1,"nodeType":"916","endLine":8,"endColumn":2},{"ruleId":"914","severity":1,"message":"915","line":1,"column":1,"nodeType":"916","endLine":8,"endColumn":2},{"ruleId":"914","severity":1,"message":"915","line":1,"column":1,"nodeType":"916","endLine":8,"endColumn":2},{"ruleId":"914","severity":1,"message":"915","line":1,"column":1,"nodeType":"916","endLine":8,"endColumn":2},{"ruleId":"914","severity":1,"message":"915","line":1,"column":1,"nodeType":"916","endLine":8,"endColumn":2},{"ruleId":"914","severity":1,"message":"915","line":1,"column":1,"nodeType":"916","endLine":8,"endColumn":2},{"ruleId":"914","severity":1,"message":"915","line":1,"column":1,"nodeType":"916","endLine":8,"endColumn":2},{"ruleId":"914","severity":1,"message":"915","line":1,"column":1,"nodeType":"916","endLine":8,"endColumn":2},{"ruleId":"914","severity":1,"message":"915","line":1,"column":1,"nodeType":"916","endLine":8,"endColumn":2},{"ruleId":"914","severity":1,"message":"915","line":1,"column":1,"nodeType":"916","endLine":8,"endColumn":2},{"ruleId":"914","severity":1,"message":"915","line":1,"column":1,"nodeType":"916","endLine":8,"endColumn":2},{"ruleId":"914","severity":1,"message":"915","line":1,"column":1,"nodeType":"916","endLine":8,"endColumn":2},{"ruleId":"914","severity":1,"message":"915","line":1,"column":1,"nodeType":"916","endLine":8,"endColumn":2},{"ruleId":"914","severity":1,"message":"915","line":1,"column":1,"nodeType":"916","endLine":8,"endColumn":2},{"ruleId":"910","severity":1,"message":"917","line":1,"column":17,"nodeType":"912","messageId":"913","endLine":1,"endColumn":25},{"ruleId":"910","severity":1,"message":"917","line":1,"column":17,"nodeType":"912","messageId":"913","endLine":1,"endColumn":25},{"ruleId":"910","severity":1,"message":"917","line":1,"column":17,"nodeType":"912","messageId":"913","endLine":1,"endColumn":25},{"ruleId":"910","severity":1,"message":"917","line":1,"column":17,"nodeType":"912","messageId":"913","endLine":1,"endColumn":25},{"ruleId":"910","severity":1,"message":"918","line":1,"column":27,"nodeType":"912","messageId":"913","endLine":1,"endColumn":36},{"ruleId":"910","severity":1,"message":"919","line":2,"column":10,"nodeType":"912","messageId":"913","endLine":2,"endColumn":21},{"ruleId":"910","severity":1,"message":"920","line":2,"column":23,"nodeType":"912","messageId":"913","endLine":2,"endColumn":34},{"ruleId":"910","severity":1,"message":"921","line":5,"column":10,"nodeType":"912","messageId":"913","endLine":5,"endColumn":16},{"ruleId":"910","severity":1,"message":"922","line":7,"column":8,"nodeType":"912","messageId":"913","endLine":7,"endColumn":14},{"ruleId":"910","severity":1,"message":"923","line":7,"column":18,"nodeType":"912","messageId":"913","endLine":7,"endColumn":27},{"ruleId":"910","severity":1,"message":"924","line":188,"column":7,"nodeType":"912","messageId":"913","endLine":188,"endColumn":16},{"ruleId":"910","severity":1,"message":"925","line":194,"column":7,"nodeType":"912","messageId":"913","endLine":194,"endColumn":15},{"ruleId":"910","severity":1,"message":"926","line":198,"column":7,"nodeType":"912","messageId":"913","endLine":198,"endColumn":19},{"ruleId":"910","severity":1,"message":"927","line":202,"column":11,"nodeType":"912","messageId":"913","endLine":202,"endColumn":20},{"ruleId":"928","severity":1,"message":"929","line":46,"column":4,"nodeType":"930","endLine":46,"endColumn":39,"suggestions":"931"},{"ruleId":"910","severity":1,"message":"932","line":1,"column":37,"nodeType":"912","messageId":"913","endLine":1,"endColumn":46},{"ruleId":"928","severity":1,"message":"929","line":60,"column":5,"nodeType":"930","endLine":60,"endColumn":25,"suggestions":"933"},{"ruleId":"910","severity":1,"message":"917","line":1,"column":17,"nodeType":"912","messageId":"913","endLine":1,"endColumn":25},{"ruleId":"910","severity":1,"message":"917","line":1,"column":17,"nodeType":"912","messageId":"913","endLine":1,"endColumn":25},{"ruleId":"910","severity":1,"message":"918","line":1,"column":26,"nodeType":"912","messageId":"913","endLine":1,"endColumn":35},{"ruleId":"910","severity":1,"message":"919","line":2,"column":10,"nodeType":"912","messageId":"913","endLine":2,"endColumn":21},{"ruleId":"910","severity":1,"message":"920","line":2,"column":23,"nodeType":"912","messageId":"913","endLine":2,"endColumn":34},{"ruleId":"910","severity":1,"message":"934","line":3,"column":10,"nodeType":"912","messageId":"913","endLine":3,"endColumn":22},{"ruleId":"910","severity":1,"message":"935","line":3,"column":23,"nodeType":"912","messageId":"913","endLine":3,"endColumn":30},{"ruleId":"910","severity":1,"message":"936","line":3,"column":10,"nodeType":"912","messageId":"913","endLine":3,"endColumn":14},{"ruleId":"910","severity":1,"message":"937","line":4,"column":8,"nodeType":"912","messageId":"913","endLine":4,"endColumn":14},{"ruleId":"910","severity":1,"message":"938","line":131,"column":15,"nodeType":"912","messageId":"913","endLine":131,"endColumn":19},{"ruleId":"939","severity":1,"message":"940","line":132,"column":20,"nodeType":"912","messageId":"941","endLine":132,"endColumn":21},{"ruleId":"910","severity":1,"message":"942","line":133,"column":13,"nodeType":"912","messageId":"913","endLine":133,"endColumn":18},{"ruleId":"910","severity":1,"message":"943","line":192,"column":5,"nodeType":"912","messageId":"913","endLine":192,"endColumn":11},{"ruleId":"910","severity":1,"message":"944","line":201,"column":5,"nodeType":"912","messageId":"913","endLine":201,"endColumn":16},{"ruleId":"910","severity":1,"message":"945","line":218,"column":5,"nodeType":"912","messageId":"913","endLine":218,"endColumn":12},{"ruleId":"910","severity":1,"message":"946","line":564,"column":26,"nodeType":"912","messageId":"913","endLine":564,"endColumn":33},{"ruleId":"910","severity":1,"message":"947","line":624,"column":11,"nodeType":"912","messageId":"913","endLine":624,"endColumn":16},{"ruleId":"939","severity":1,"message":"948","line":718,"column":9,"nodeType":"912","messageId":"941","endLine":718,"endColumn":17},{"ruleId":"939","severity":1,"message":"949","line":737,"column":9,"nodeType":"912","messageId":"941","endLine":737,"endColumn":21},{"ruleId":"910","severity":1,"message":"950","line":862,"column":26,"nodeType":"912","messageId":"913","endLine":862,"endColumn":39},{"ruleId":"951","severity":1,"message":"952","line":1037,"column":25,"nodeType":"953","messageId":"954","endLine":1037,"endColumn":27},{"ruleId":"951","severity":1,"message":"952","line":1056,"column":13,"nodeType":"953","messageId":"954","endLine":1056,"endColumn":15},{"ruleId":"951","severity":1,"message":"955","line":1087,"column":28,"nodeType":"953","messageId":"954","endLine":1087,"endColumn":30},{"ruleId":"956","severity":1,"message":"957","line":1098,"column":27,"nodeType":"958","messageId":"959","endLine":1103,"endColumn":12},{"ruleId":"939","severity":1,"message":"960","line":1115,"column":13,"nodeType":"912","messageId":"941","endLine":1115,"endColumn":17},{"ruleId":"951","severity":1,"message":"952","line":1146,"column":58,"nodeType":"953","messageId":"954","endLine":1146,"endColumn":60},{"ruleId":"951","severity":1,"message":"952","line":1146,"column":68,"nodeType":"953","messageId":"954","endLine":1146,"endColumn":70},{"ruleId":"951","severity":1,"message":"952","line":1209,"column":30,"nodeType":"953","messageId":"954","endLine":1209,"endColumn":32},{"ruleId":"951","severity":1,"message":"952","line":1219,"column":62,"nodeType":"953","messageId":"954","endLine":1219,"endColumn":64},{"ruleId":"951","severity":1,"message":"952","line":1219,"column":72,"nodeType":"953","messageId":"954","endLine":1219,"endColumn":74},{"ruleId":"951","severity":1,"message":"952","line":1291,"column":47,"nodeType":"953","messageId":"954","endLine":1291,"endColumn":49},{"ruleId":"951","severity":1,"message":"952","line":1308,"column":43,"nodeType":"953","messageId":"954","endLine":1308,"endColumn":45},{"ruleId":"939","severity":1,"message":"961","line":1446,"column":13,"nodeType":"912","messageId":"941","endLine":1446,"endColumn":16},{"ruleId":"951","severity":1,"message":"952","line":1451,"column":40,"nodeType":"953","messageId":"954","endLine":1451,"endColumn":42},{"ruleId":"939","severity":1,"message":"962","line":1452,"column":15,"nodeType":"912","messageId":"941","endLine":1452,"endColumn":16},{"ruleId":"939","severity":1,"message":"961","line":1457,"column":19,"nodeType":"912","messageId":"941","endLine":1457,"endColumn":22},{"ruleId":"939","severity":1,"message":"940","line":1486,"column":16,"nodeType":"912","messageId":"941","endLine":1486,"endColumn":17},{"ruleId":"910","severity":1,"message":"963","line":1500,"column":19,"nodeType":"912","messageId":"913","endLine":1500,"endColumn":26},{"ruleId":"910","severity":1,"message":"964","line":1500,"column":36,"nodeType":"912","messageId":"913","endLine":1500,"endColumn":43},{"ruleId":"910","severity":1,"message":"965","line":1500,"column":45,"nodeType":"912","messageId":"913","endLine":1500,"endColumn":54},{"ruleId":"910","severity":1,"message":"966","line":1500,"column":56,"nodeType":"912","messageId":"913","endLine":1500,"endColumn":65},{"ruleId":"951","severity":1,"message":"955","line":1617,"column":11,"nodeType":"953","messageId":"954","endLine":1617,"endColumn":13},{"ruleId":"951","severity":1,"message":"955","line":1686,"column":11,"nodeType":"953","messageId":"954","endLine":1686,"endColumn":13},{"ruleId":"910","severity":1,"message":"967","line":1743,"column":8,"nodeType":"912","messageId":"913","endLine":1743,"endColumn":14},{"ruleId":"910","severity":1,"message":"968","line":1748,"column":10,"nodeType":"912","messageId":"913","endLine":1748,"endColumn":14},{"ruleId":"951","severity":1,"message":"952","line":1795,"column":17,"nodeType":"953","messageId":"954","endLine":1795,"endColumn":19},{"ruleId":"951","severity":1,"message":"952","line":1796,"column":19,"nodeType":"953","messageId":"954","endLine":1796,"endColumn":21},{"ruleId":"951","severity":1,"message":"952","line":1796,"column":37,"nodeType":"953","messageId":"954","endLine":1796,"endColumn":39},{"ruleId":"951","severity":1,"message":"952","line":1802,"column":89,"nodeType":"953","messageId":"954","endLine":1802,"endColumn":91},{"ruleId":"951","severity":1,"message":"952","line":1806,"column":20,"nodeType":"953","messageId":"954","endLine":1806,"endColumn":22},{"ruleId":"969","severity":1,"message":"970","line":1808,"column":56,"nodeType":"953","messageId":"971","endLine":1808,"endColumn":57},{"ruleId":"972","severity":1,"message":"973","line":1826,"column":19,"nodeType":"974","messageId":"975","endLine":1826,"endColumn":21},{"ruleId":"972","severity":1,"message":"973","line":1826,"column":26,"nodeType":"974","messageId":"975","endLine":1826,"endColumn":28},{"ruleId":"972","severity":1,"message":"976","line":1826,"column":26,"nodeType":"974","messageId":"975","endLine":1826,"endColumn":28},{"ruleId":"972","severity":1,"message":"976","line":1826,"column":34,"nodeType":"974","messageId":"975","endLine":1826,"endColumn":36},{"ruleId":"951","severity":1,"message":"952","line":1827,"column":34,"nodeType":"953","messageId":"954","endLine":1827,"endColumn":36},{"ruleId":"951","severity":1,"message":"952","line":1827,"column":59,"nodeType":"953","messageId":"954","endLine":1827,"endColumn":61},{"ruleId":"951","severity":1,"message":"952","line":1895,"column":18,"nodeType":"953","messageId":"954","endLine":1895,"endColumn":20},{"ruleId":"951","severity":1,"message":"952","line":1896,"column":25,"nodeType":"953","messageId":"954","endLine":1896,"endColumn":27},{"ruleId":"951","severity":1,"message":"952","line":1896,"column":50,"nodeType":"953","messageId":"954","endLine":1896,"endColumn":52},{"ruleId":"951","severity":1,"message":"952","line":1906,"column":15,"nodeType":"953","messageId":"954","endLine":1906,"endColumn":17},{"ruleId":"951","severity":1,"message":"952","line":1912,"column":19,"nodeType":"953","messageId":"954","endLine":1912,"endColumn":21},{"ruleId":"939","severity":1,"message":"977","line":1913,"column":20,"nodeType":"912","messageId":"941","endLine":1913,"endColumn":22},{"ruleId":"969","severity":1,"message":"970","line":1914,"column":54,"nodeType":"953","messageId":"971","endLine":1914,"endColumn":55},{"ruleId":"951","severity":1,"message":"952","line":1935,"column":36,"nodeType":"953","messageId":"954","endLine":1935,"endColumn":38},{"ruleId":"951","severity":1,"message":"952","line":1935,"column":62,"nodeType":"953","messageId":"954","endLine":1935,"endColumn":64},{"ruleId":"951","severity":1,"message":"952","line":1951,"column":41,"nodeType":"953","messageId":"954","endLine":1951,"endColumn":43},{"ruleId":"951","severity":1,"message":"952","line":1951,"column":67,"nodeType":"953","messageId":"954","endLine":1951,"endColumn":69},{"ruleId":"951","severity":1,"message":"952","line":1955,"column":30,"nodeType":"953","messageId":"954","endLine":1955,"endColumn":32},{"ruleId":"951","severity":1,"message":"952","line":1964,"column":16,"nodeType":"953","messageId":"954","endLine":1964,"endColumn":18},{"ruleId":"910","severity":1,"message":"950","line":1976,"column":13,"nodeType":"912","messageId":"913","endLine":1976,"endColumn":26},{"ruleId":"910","severity":1,"message":"978","line":1976,"column":28,"nodeType":"912","messageId":"913","endLine":1976,"endColumn":44},{"ruleId":"951","severity":1,"message":"952","line":2040,"column":25,"nodeType":"953","messageId":"954","endLine":2040,"endColumn":27},{"ruleId":"951","severity":1,"message":"952","line":2050,"column":24,"nodeType":"953","messageId":"954","endLine":2050,"endColumn":26},{"ruleId":"951","severity":1,"message":"952","line":2051,"column":24,"nodeType":"953","messageId":"954","endLine":2051,"endColumn":26},{"ruleId":"939","severity":1,"message":"948","line":2052,"column":9,"nodeType":"912","messageId":"941","endLine":2052,"endColumn":17},{"ruleId":"951","severity":1,"message":"952","line":2061,"column":13,"nodeType":"953","messageId":"954","endLine":2061,"endColumn":15},{"ruleId":"951","severity":1,"message":"952","line":2100,"column":58,"nodeType":"953","messageId":"954","endLine":2100,"endColumn":60},{"ruleId":"951","severity":1,"message":"952","line":2100,"column":68,"nodeType":"953","messageId":"954","endLine":2100,"endColumn":70},{"ruleId":"910","severity":1,"message":"979","line":2121,"column":9,"nodeType":"912","messageId":"913","endLine":2121,"endColumn":17},{"ruleId":"910","severity":1,"message":"980","line":2235,"column":9,"nodeType":"912","messageId":"913","endLine":2235,"endColumn":17},{"ruleId":"910","severity":1,"message":"981","line":2236,"column":9,"nodeType":"912","messageId":"913","endLine":2236,"endColumn":17},{"ruleId":"910","severity":1,"message":"982","line":2241,"column":9,"nodeType":"912","messageId":"913","endLine":2241,"endColumn":17},{"ruleId":"910","severity":1,"message":"983","line":2252,"column":15,"nodeType":"912","messageId":"913","endLine":2252,"endColumn":26},{"ruleId":"910","severity":1,"message":"984","line":2268,"column":15,"nodeType":"912","messageId":"913","endLine":2268,"endColumn":21},{"ruleId":"910","severity":1,"message":"985","line":2271,"column":15,"nodeType":"912","messageId":"913","endLine":2271,"endColumn":21},{"ruleId":"969","severity":1,"message":"970","line":2275,"column":66,"nodeType":"953","messageId":"971","endLine":2275,"endColumn":67},{"ruleId":"969","severity":1,"message":"970","line":2276,"column":66,"nodeType":"953","messageId":"971","endLine":2276,"endColumn":67},{"ruleId":"939","severity":1,"message":"986","line":2315,"column":17,"nodeType":"912","messageId":"941","endLine":2315,"endColumn":21},{"ruleId":"951","severity":1,"message":"952","line":2372,"column":21,"nodeType":"953","messageId":"954","endLine":2372,"endColumn":23},{"ruleId":"910","severity":1,"message":"987","line":2379,"column":15,"nodeType":"912","messageId":"913","endLine":2379,"endColumn":19},{"ruleId":"951","severity":1,"message":"952","line":2386,"column":24,"nodeType":"953","messageId":"954","endLine":2386,"endColumn":26},{"ruleId":"951","severity":1,"message":"952","line":2389,"column":29,"nodeType":"953","messageId":"954","endLine":2389,"endColumn":31},{"ruleId":"951","severity":1,"message":"952","line":2390,"column":19,"nodeType":"953","messageId":"954","endLine":2390,"endColumn":21},{"ruleId":"951","severity":1,"message":"952","line":2395,"column":23,"nodeType":"953","messageId":"954","endLine":2395,"endColumn":25},{"ruleId":"951","severity":1,"message":"952","line":2398,"column":71,"nodeType":"953","messageId":"954","endLine":2398,"endColumn":73},{"ruleId":"951","severity":1,"message":"952","line":2405,"column":31,"nodeType":"953","messageId":"954","endLine":2405,"endColumn":33},{"ruleId":"951","severity":1,"message":"952","line":2418,"column":32,"nodeType":"953","messageId":"954","endLine":2418,"endColumn":34},{"ruleId":"951","severity":1,"message":"952","line":2422,"column":29,"nodeType":"953","messageId":"954","endLine":2422,"endColumn":31},{"ruleId":"951","severity":1,"message":"952","line":2433,"column":31,"nodeType":"953","messageId":"954","endLine":2433,"endColumn":33},{"ruleId":"939","severity":1,"message":"988","line":2439,"column":21,"nodeType":"912","messageId":"941","endLine":2439,"endColumn":24},{"ruleId":"939","severity":1,"message":"989","line":2445,"column":25,"nodeType":"912","messageId":"941","endLine":2445,"endColumn":26},{"ruleId":"951","severity":1,"message":"952","line":2446,"column":32,"nodeType":"953","messageId":"954","endLine":2446,"endColumn":34},{"ruleId":"951","severity":1,"message":"952","line":2450,"column":29,"nodeType":"953","messageId":"954","endLine":2450,"endColumn":31},{"ruleId":"939","severity":1,"message":"990","line":2487,"column":16,"nodeType":"912","messageId":"941","endLine":2487,"endColumn":17},{"ruleId":"910","severity":1,"message":"991","line":2488,"column":13,"nodeType":"912","messageId":"913","endLine":2488,"endColumn":17},{"ruleId":"939","severity":1,"message":"940","line":2525,"column":24,"nodeType":"912","messageId":"941","endLine":2525,"endColumn":25},{"ruleId":"992","severity":1,"message":"993","line":2919,"column":67,"nodeType":"958","messageId":"994","endLine":2919,"endColumn":69},{"ruleId":"910","severity":1,"message":"932","line":1,"column":17,"nodeType":"912","messageId":"913","endLine":1,"endColumn":26},{"ruleId":"910","severity":1,"message":"995","line":2,"column":10,"nodeType":"912","messageId":"913","endLine":2,"endColumn":16},{"ruleId":"910","severity":1,"message":"996","line":24,"column":12,"nodeType":"912","messageId":"913","endLine":24,"endColumn":21},{"ruleId":"910","severity":1,"message":"997","line":28,"column":10,"nodeType":"912","messageId":"913","endLine":28,"endColumn":22},{"ruleId":"910","severity":1,"message":"998","line":29,"column":10,"nodeType":"912","messageId":"913","endLine":29,"endColumn":27},{"ruleId":"910","severity":1,"message":"999","line":30,"column":10,"nodeType":"912","messageId":"913","endLine":30,"endColumn":23},{"ruleId":"910","severity":1,"message":"1000","line":31,"column":10,"nodeType":"912","messageId":"913","endLine":31,"endColumn":24},{"ruleId":"910","severity":1,"message":"1001","line":35,"column":29,"nodeType":"912","messageId":"913","endLine":35,"endColumn":33},{"ruleId":"910","severity":1,"message":"1002","line":35,"column":35,"nodeType":"912","messageId":"913","endLine":35,"endColumn":39},{"ruleId":"910","severity":1,"message":"1003","line":210,"column":21,"nodeType":"912","messageId":"913","endLine":210,"endColumn":27},{"ruleId":"910","severity":1,"message":"1004","line":231,"column":25,"nodeType":"912","messageId":"913","endLine":231,"endColumn":28},{"ruleId":"910","severity":1,"message":"1005","line":232,"column":25,"nodeType":"912","messageId":"913","endLine":232,"endColumn":28},{"ruleId":"992","severity":1,"message":"993","line":313,"column":33,"nodeType":"958","messageId":"994","endLine":313,"endColumn":35},{"ruleId":"910","severity":1,"message":"1006","line":361,"column":23,"nodeType":"912","messageId":"913","endLine":361,"endColumn":25},{"ruleId":"910","severity":1,"message":"1007","line":405,"column":13,"nodeType":"912","messageId":"913","endLine":405,"endColumn":17},{"ruleId":"910","severity":1,"message":"1008","line":445,"column":13,"nodeType":"912","messageId":"913","endLine":445,"endColumn":20},{"ruleId":"992","severity":1,"message":"1009","line":445,"column":53,"nodeType":"958","messageId":"1010","endLine":445,"endColumn":55},{"ruleId":"910","severity":1,"message":"1011","line":446,"column":15,"nodeType":"912","messageId":"913","endLine":446,"endColumn":16},{"ruleId":"992","severity":1,"message":"993","line":446,"column":34,"nodeType":"958","messageId":"994","endLine":446,"endColumn":36},{"ruleId":"910","severity":1,"message":"1012","line":452,"column":13,"nodeType":"912","messageId":"913","endLine":452,"endColumn":22},{"ruleId":"939","severity":1,"message":"961","line":609,"column":19,"nodeType":"912","messageId":"941","endLine":609,"endColumn":22},{"ruleId":"951","severity":1,"message":"952","line":614,"column":46,"nodeType":"953","messageId":"954","endLine":614,"endColumn":48},{"ruleId":"939","severity":1,"message":"962","line":615,"column":21,"nodeType":"912","messageId":"941","endLine":615,"endColumn":22},{"ruleId":"939","severity":1,"message":"961","line":620,"column":25,"nodeType":"912","messageId":"941","endLine":620,"endColumn":28},{"ruleId":"939","severity":1,"message":"940","line":650,"column":22,"nodeType":"912","messageId":"941","endLine":650,"endColumn":23},{"ruleId":"939","severity":1,"message":"1013","line":734,"column":15,"nodeType":"912","messageId":"941","endLine":734,"endColumn":18},{"ruleId":"939","severity":1,"message":"1014","line":735,"column":15,"nodeType":"912","messageId":"941","endLine":735,"endColumn":23},{"ruleId":"939","severity":1,"message":"1015","line":736,"column":15,"nodeType":"912","messageId":"941","endLine":736,"endColumn":24},{"ruleId":"910","severity":1,"message":"1016","line":755,"column":15,"nodeType":"912","messageId":"913","endLine":755,"endColumn":18},{"ruleId":"910","severity":1,"message":"1017","line":756,"column":15,"nodeType":"912","messageId":"913","endLine":756,"endColumn":16},{"ruleId":"910","severity":1,"message":"1018","line":757,"column":15,"nodeType":"912","messageId":"913","endLine":757,"endColumn":16},{"ruleId":"910","severity":1,"message":"1019","line":758,"column":15,"nodeType":"912","messageId":"913","endLine":758,"endColumn":19},{"ruleId":"939","severity":1,"message":"1020","line":774,"column":17,"nodeType":"912","messageId":"941","endLine":774,"endColumn":27},{"ruleId":"910","severity":1,"message":"1021","line":782,"column":17,"nodeType":"912","messageId":"913","endLine":782,"endColumn":22},{"ruleId":"939","severity":1,"message":"1013","line":786,"column":15,"nodeType":"912","messageId":"941","endLine":786,"endColumn":18},{"ruleId":"939","severity":1,"message":"1014","line":787,"column":15,"nodeType":"912","messageId":"941","endLine":787,"endColumn":23},{"ruleId":"939","severity":1,"message":"1015","line":788,"column":15,"nodeType":"912","messageId":"941","endLine":788,"endColumn":24},{"ruleId":"910","severity":1,"message":"965","line":845,"column":19,"nodeType":"912","messageId":"913","endLine":845,"endColumn":28},{"ruleId":"939","severity":1,"message":"1020","line":846,"column":17,"nodeType":"912","messageId":"941","endLine":846,"endColumn":27},{"ruleId":"939","severity":1,"message":"1020","line":853,"column":17,"nodeType":"912","messageId":"941","endLine":853,"endColumn":27},{"ruleId":"951","severity":1,"message":"952","line":886,"column":30,"nodeType":"953","messageId":"954","endLine":886,"endColumn":32},{"ruleId":"939","severity":1,"message":"990","line":906,"column":20,"nodeType":"912","messageId":"941","endLine":906,"endColumn":21},{"ruleId":"939","severity":1,"message":"1022","line":907,"column":17,"nodeType":"912","messageId":"941","endLine":907,"endColumn":21},{"ruleId":"910","severity":1,"message":"1023","line":907,"column":17,"nodeType":"912","messageId":"913","endLine":907,"endColumn":21},{"ruleId":"910","severity":1,"message":"1024","line":913,"column":17,"nodeType":"912","messageId":"913","endLine":913,"endColumn":33},{"ruleId":"910","severity":1,"message":"1025","line":934,"column":11,"nodeType":"912","messageId":"913","endLine":934,"endColumn":23},{"ruleId":"910","severity":1,"message":"1026","line":1016,"column":22,"nodeType":"912","messageId":"913","endLine":1016,"endColumn":27},{"ruleId":"910","severity":1,"message":"1021","line":1032,"column":19,"nodeType":"912","messageId":"913","endLine":1032,"endColumn":24},{"ruleId":"910","severity":1,"message":"985","line":1062,"column":15,"nodeType":"912","messageId":"913","endLine":1062,"endColumn":21},{"ruleId":"910","severity":1,"message":"981","line":1062,"column":33,"nodeType":"912","messageId":"913","endLine":1062,"endColumn":41},{"ruleId":"910","severity":1,"message":"984","line":1062,"column":43,"nodeType":"912","messageId":"913","endLine":1062,"endColumn":49},{"ruleId":"910","severity":1,"message":"985","line":1081,"column":15,"nodeType":"912","messageId":"913","endLine":1081,"endColumn":21},{"ruleId":"910","severity":1,"message":"984","line":1081,"column":43,"nodeType":"912","messageId":"913","endLine":1081,"endColumn":49},{"ruleId":"969","severity":1,"message":"970","line":1201,"column":63,"nodeType":"953","messageId":"971","endLine":1201,"endColumn":64},{"ruleId":"969","severity":1,"message":"970","line":1203,"column":63,"nodeType":"953","messageId":"971","endLine":1203,"endColumn":64},{"ruleId":"951","severity":1,"message":"952","line":1211,"column":41,"nodeType":"953","messageId":"954","endLine":1211,"endColumn":43},{"ruleId":"939","severity":1,"message":"990","line":1236,"column":20,"nodeType":"912","messageId":"941","endLine":1236,"endColumn":21},{"ruleId":"951","severity":1,"message":"952","line":1239,"column":48,"nodeType":"953","messageId":"954","endLine":1239,"endColumn":50},{"ruleId":"939","severity":1,"message":"1027","line":1241,"column":19,"nodeType":"912","messageId":"941","endLine":1241,"endColumn":24},{"ruleId":"939","severity":1,"message":"986","line":1242,"column":19,"nodeType":"912","messageId":"941","endLine":1242,"endColumn":23},{"ruleId":"951","severity":1,"message":"952","line":1307,"column":26,"nodeType":"953","messageId":"954","endLine":1307,"endColumn":28},{"ruleId":"951","severity":1,"message":"952","line":1309,"column":33,"nodeType":"953","messageId":"954","endLine":1309,"endColumn":35},{"ruleId":"951","severity":1,"message":"952","line":1310,"column":21,"nodeType":"953","messageId":"954","endLine":1310,"endColumn":23},{"ruleId":"951","severity":1,"message":"952","line":1314,"column":32,"nodeType":"953","messageId":"954","endLine":1314,"endColumn":34},{"ruleId":"951","severity":1,"message":"952","line":1323,"column":33,"nodeType":"953","messageId":"954","endLine":1323,"endColumn":35},{"ruleId":"951","severity":1,"message":"952","line":1327,"column":30,"nodeType":"953","messageId":"954","endLine":1327,"endColumn":32},{"ruleId":"939","severity":1,"message":"990","line":1352,"column":20,"nodeType":"912","messageId":"941","endLine":1352,"endColumn":21},{"ruleId":"910","severity":1,"message":"991","line":1353,"column":17,"nodeType":"912","messageId":"913","endLine":1353,"endColumn":21},{"ruleId":"910","severity":1,"message":"1028","line":1392,"column":19,"nodeType":"912","messageId":"913","endLine":1392,"endColumn":22},{"ruleId":"910","severity":1,"message":"1024","line":1394,"column":19,"nodeType":"912","messageId":"913","endLine":1394,"endColumn":35},{"ruleId":"910","severity":1,"message":"1029","line":1417,"column":19,"nodeType":"912","messageId":"913","endLine":1417,"endColumn":25},{"ruleId":"910","severity":1,"message":"1030","line":1419,"column":19,"nodeType":"912","messageId":"913","endLine":1419,"endColumn":35},{"ruleId":"939","severity":1,"message":"940","line":1489,"column":28,"nodeType":"912","messageId":"941","endLine":1489,"endColumn":29},{"ruleId":"910","severity":1,"message":"1021","line":1521,"column":21,"nodeType":"912","messageId":"913","endLine":1521,"endColumn":26},{"ruleId":"951","severity":1,"message":"952","line":1590,"column":22,"nodeType":"953","messageId":"954","endLine":1590,"endColumn":24},{"ruleId":"951","severity":1,"message":"952","line":1591,"column":29,"nodeType":"953","messageId":"954","endLine":1591,"endColumn":31},{"ruleId":"951","severity":1,"message":"952","line":1591,"column":54,"nodeType":"953","messageId":"954","endLine":1591,"endColumn":56},{"ruleId":"951","severity":1,"message":"952","line":1600,"column":19,"nodeType":"953","messageId":"954","endLine":1600,"endColumn":21},{"ruleId":"951","severity":1,"message":"952","line":1606,"column":23,"nodeType":"953","messageId":"954","endLine":1606,"endColumn":25},{"ruleId":"939","severity":1,"message":"977","line":1607,"column":24,"nodeType":"912","messageId":"941","endLine":1607,"endColumn":26},{"ruleId":"969","severity":1,"message":"970","line":1608,"column":58,"nodeType":"953","messageId":"971","endLine":1608,"endColumn":59},{"ruleId":"951","severity":1,"message":"952","line":1626,"column":40,"nodeType":"953","messageId":"954","endLine":1626,"endColumn":42},{"ruleId":"951","severity":1,"message":"952","line":1626,"column":66,"nodeType":"953","messageId":"954","endLine":1626,"endColumn":68},{"ruleId":"951","severity":1,"message":"952","line":1646,"column":45,"nodeType":"953","messageId":"954","endLine":1646,"endColumn":47},{"ruleId":"951","severity":1,"message":"952","line":1646,"column":71,"nodeType":"953","messageId":"954","endLine":1646,"endColumn":73},{"ruleId":"951","severity":1,"message":"952","line":1650,"column":34,"nodeType":"953","messageId":"954","endLine":1650,"endColumn":36},{"ruleId":"951","severity":1,"message":"952","line":1659,"column":20,"nodeType":"953","messageId":"954","endLine":1659,"endColumn":22},{"ruleId":"939","severity":1,"message":"1031","line":1682,"column":17,"nodeType":"912","messageId":"941","endLine":1682,"endColumn":24},{"ruleId":"910","severity":1,"message":"1032","line":1800,"column":13,"nodeType":"912","messageId":"913","endLine":1800,"endColumn":19},{"ruleId":"992","severity":1,"message":"1009","line":1955,"column":41,"nodeType":"958","messageId":"1010","endLine":1955,"endColumn":43},{"ruleId":"910","severity":1,"message":"1033","line":2025,"column":15,"nodeType":"912","messageId":"913","endLine":2025,"endColumn":26},{"ruleId":"951","severity":1,"message":"952","line":2059,"column":29,"nodeType":"953","messageId":"954","endLine":2059,"endColumn":31},{"ruleId":"910","severity":1,"message":"1019","line":2189,"column":13,"nodeType":"912","messageId":"913","endLine":2189,"endColumn":17},{"ruleId":"910","severity":1,"message":"1034","line":2336,"column":15,"nodeType":"912","messageId":"913","endLine":2336,"endColumn":19},{"ruleId":"910","severity":1,"message":"1034","line":2396,"column":13,"nodeType":"912","messageId":"913","endLine":2396,"endColumn":17},{"ruleId":"910","severity":1,"message":"1034","line":2452,"column":13,"nodeType":"912","messageId":"913","endLine":2452,"endColumn":17},{"ruleId":"910","severity":1,"message":"1034","line":2521,"column":13,"nodeType":"912","messageId":"913","endLine":2521,"endColumn":17},{"ruleId":"910","severity":1,"message":"1035","line":2755,"column":15,"nodeType":"912","messageId":"913","endLine":2755,"endColumn":34},{"ruleId":"910","severity":1,"message":"1034","line":2759,"column":13,"nodeType":"912","messageId":"913","endLine":2759,"endColumn":17},{"ruleId":"910","severity":1,"message":"1036","line":3001,"column":11,"nodeType":"912","messageId":"913","endLine":3001,"endColumn":19},{"ruleId":"910","severity":1,"message":"1037","line":3029,"column":9,"nodeType":"912","messageId":"913","endLine":3029,"endColumn":28},{"ruleId":"910","severity":1,"message":"1038","line":3034,"column":19,"nodeType":"912","messageId":"913","endLine":3034,"endColumn":29},{"ruleId":"992","severity":1,"message":"993","line":3319,"column":54,"nodeType":"958","messageId":"994","endLine":3319,"endColumn":56},{"ruleId":"992","severity":1,"message":"993","line":3330,"column":50,"nodeType":"958","messageId":"994","endLine":3330,"endColumn":52},{"ruleId":"910","severity":1,"message":"996","line":25,"column":10,"nodeType":"912","messageId":"913","endLine":25,"endColumn":19},{"ruleId":"910","severity":1,"message":"1039","line":33,"column":8,"nodeType":"912","messageId":"913","endLine":33,"endColumn":18},{"ruleId":"910","severity":1,"message":"1040","line":34,"column":8,"nodeType":"912","messageId":"913","endLine":34,"endColumn":23},{"ruleId":"910","severity":1,"message":"1041","line":35,"column":8,"nodeType":"912","messageId":"913","endLine":35,"endColumn":12},{"ruleId":"910","severity":1,"message":"1042","line":39,"column":8,"nodeType":"912","messageId":"913","endLine":39,"endColumn":13},{"ruleId":"910","severity":1,"message":"1043","line":41,"column":7,"nodeType":"912","messageId":"913","endLine":41,"endColumn":19},{"ruleId":"910","severity":1,"message":"1044","line":56,"column":7,"nodeType":"912","messageId":"913","endLine":56,"endColumn":13},{"ruleId":"910","severity":1,"message":"1003","line":235,"column":17,"nodeType":"912","messageId":"913","endLine":235,"endColumn":23},{"ruleId":"910","severity":1,"message":"1004","line":258,"column":21,"nodeType":"912","messageId":"913","endLine":258,"endColumn":24},{"ruleId":"910","severity":1,"message":"1005","line":259,"column":21,"nodeType":"912","messageId":"913","endLine":259,"endColumn":24},{"ruleId":"992","severity":1,"message":"993","line":409,"column":29,"nodeType":"958","messageId":"994","endLine":409,"endColumn":31},{"ruleId":"910","severity":1,"message":"1006","line":457,"column":19,"nodeType":"912","messageId":"913","endLine":457,"endColumn":21},{"ruleId":"910","severity":1,"message":"1007","line":542,"column":9,"nodeType":"912","messageId":"913","endLine":542,"endColumn":13},{"ruleId":"910","severity":1,"message":"1008","line":583,"column":9,"nodeType":"912","messageId":"913","endLine":583,"endColumn":16},{"ruleId":"992","severity":1,"message":"1009","line":583,"column":49,"nodeType":"958","messageId":"1010","endLine":583,"endColumn":51},{"ruleId":"910","severity":1,"message":"1011","line":584,"column":11,"nodeType":"912","messageId":"913","endLine":584,"endColumn":12},{"ruleId":"992","severity":1,"message":"993","line":584,"column":30,"nodeType":"958","messageId":"994","endLine":584,"endColumn":32},{"ruleId":"910","severity":1,"message":"1012","line":590,"column":9,"nodeType":"912","messageId":"913","endLine":590,"endColumn":18},{"ruleId":"910","severity":1,"message":"1045","line":673,"column":9,"nodeType":"912","messageId":"913","endLine":673,"endColumn":17},{"ruleId":"910","severity":1,"message":"1046","line":773,"column":9,"nodeType":"912","messageId":"913","endLine":773,"endColumn":13},{"ruleId":"939","severity":1,"message":"961","line":833,"column":15,"nodeType":"912","messageId":"941","endLine":833,"endColumn":18},{"ruleId":"951","severity":1,"message":"952","line":838,"column":42,"nodeType":"953","messageId":"954","endLine":838,"endColumn":44},{"ruleId":"939","severity":1,"message":"962","line":839,"column":17,"nodeType":"912","messageId":"941","endLine":839,"endColumn":18},{"ruleId":"939","severity":1,"message":"961","line":844,"column":21,"nodeType":"912","messageId":"941","endLine":844,"endColumn":24},{"ruleId":"939","severity":1,"message":"940","line":876,"column":18,"nodeType":"912","messageId":"941","endLine":876,"endColumn":19},{"ruleId":"939","severity":1,"message":"1013","line":960,"column":11,"nodeType":"912","messageId":"941","endLine":960,"endColumn":14},{"ruleId":"939","severity":1,"message":"1014","line":961,"column":11,"nodeType":"912","messageId":"941","endLine":961,"endColumn":19},{"ruleId":"939","severity":1,"message":"1015","line":962,"column":11,"nodeType":"912","messageId":"941","endLine":962,"endColumn":20},{"ruleId":"910","severity":1,"message":"1016","line":981,"column":11,"nodeType":"912","messageId":"913","endLine":981,"endColumn":14},{"ruleId":"910","severity":1,"message":"1017","line":982,"column":11,"nodeType":"912","messageId":"913","endLine":982,"endColumn":12},{"ruleId":"910","severity":1,"message":"1018","line":983,"column":11,"nodeType":"912","messageId":"913","endLine":983,"endColumn":12},{"ruleId":"910","severity":1,"message":"1019","line":984,"column":11,"nodeType":"912","messageId":"913","endLine":984,"endColumn":15},{"ruleId":"939","severity":1,"message":"1020","line":1000,"column":13,"nodeType":"912","messageId":"941","endLine":1000,"endColumn":23},{"ruleId":"910","severity":1,"message":"1021","line":1008,"column":13,"nodeType":"912","messageId":"913","endLine":1008,"endColumn":18},{"ruleId":"939","severity":1,"message":"1013","line":1012,"column":11,"nodeType":"912","messageId":"941","endLine":1012,"endColumn":14},{"ruleId":"939","severity":1,"message":"1014","line":1013,"column":11,"nodeType":"912","messageId":"941","endLine":1013,"endColumn":19},{"ruleId":"939","severity":1,"message":"1015","line":1014,"column":11,"nodeType":"912","messageId":"941","endLine":1014,"endColumn":20},{"ruleId":"910","severity":1,"message":"965","line":1256,"column":15,"nodeType":"912","messageId":"913","endLine":1256,"endColumn":24},{"ruleId":"939","severity":1,"message":"1020","line":1257,"column":13,"nodeType":"912","messageId":"941","endLine":1257,"endColumn":23},{"ruleId":"939","severity":1,"message":"1020","line":1264,"column":13,"nodeType":"912","messageId":"941","endLine":1264,"endColumn":23},{"ruleId":"951","severity":1,"message":"952","line":1297,"column":26,"nodeType":"953","messageId":"954","endLine":1297,"endColumn":28},{"ruleId":"939","severity":1,"message":"990","line":1317,"column":16,"nodeType":"912","messageId":"941","endLine":1317,"endColumn":17},{"ruleId":"939","severity":1,"message":"1022","line":1318,"column":13,"nodeType":"912","messageId":"941","endLine":1318,"endColumn":17},{"ruleId":"910","severity":1,"message":"1023","line":1318,"column":13,"nodeType":"912","messageId":"913","endLine":1318,"endColumn":17},{"ruleId":"910","severity":1,"message":"1024","line":1324,"column":13,"nodeType":"912","messageId":"913","endLine":1324,"endColumn":29},{"ruleId":"910","severity":1,"message":"1025","line":1345,"column":7,"nodeType":"912","messageId":"913","endLine":1345,"endColumn":19},{"ruleId":"910","severity":1,"message":"1026","line":1427,"column":18,"nodeType":"912","messageId":"913","endLine":1427,"endColumn":23},{"ruleId":"910","severity":1,"message":"1021","line":1443,"column":15,"nodeType":"912","messageId":"913","endLine":1443,"endColumn":20},{"ruleId":"910","severity":1,"message":"985","line":1473,"column":11,"nodeType":"912","messageId":"913","endLine":1473,"endColumn":17},{"ruleId":"910","severity":1,"message":"981","line":1473,"column":29,"nodeType":"912","messageId":"913","endLine":1473,"endColumn":37},{"ruleId":"910","severity":1,"message":"984","line":1473,"column":39,"nodeType":"912","messageId":"913","endLine":1473,"endColumn":45},{"ruleId":"910","severity":1,"message":"985","line":1492,"column":11,"nodeType":"912","messageId":"913","endLine":1492,"endColumn":17},{"ruleId":"910","severity":1,"message":"984","line":1492,"column":39,"nodeType":"912","messageId":"913","endLine":1492,"endColumn":45},{"ruleId":"969","severity":1,"message":"970","line":1612,"column":59,"nodeType":"953","messageId":"971","endLine":1612,"endColumn":60},{"ruleId":"969","severity":1,"message":"970","line":1614,"column":59,"nodeType":"953","messageId":"971","endLine":1614,"endColumn":60},{"ruleId":"951","severity":1,"message":"952","line":1623,"column":37,"nodeType":"953","messageId":"954","endLine":1623,"endColumn":39},{"ruleId":"939","severity":1,"message":"990","line":1649,"column":16,"nodeType":"912","messageId":"941","endLine":1649,"endColumn":17},{"ruleId":"951","severity":1,"message":"952","line":1652,"column":44,"nodeType":"953","messageId":"954","endLine":1652,"endColumn":46},{"ruleId":"939","severity":1,"message":"1027","line":1654,"column":15,"nodeType":"912","messageId":"941","endLine":1654,"endColumn":20},{"ruleId":"939","severity":1,"message":"986","line":1655,"column":15,"nodeType":"912","messageId":"941","endLine":1655,"endColumn":19},{"ruleId":"951","severity":1,"message":"952","line":1722,"column":22,"nodeType":"953","messageId":"954","endLine":1722,"endColumn":24},{"ruleId":"951","severity":1,"message":"952","line":1724,"column":29,"nodeType":"953","messageId":"954","endLine":1724,"endColumn":31},{"ruleId":"951","severity":1,"message":"952","line":1725,"column":17,"nodeType":"953","messageId":"954","endLine":1725,"endColumn":19},{"ruleId":"951","severity":1,"message":"952","line":1729,"column":28,"nodeType":"953","messageId":"954","endLine":1729,"endColumn":30},{"ruleId":"951","severity":1,"message":"952","line":1738,"column":29,"nodeType":"953","messageId":"954","endLine":1738,"endColumn":31},{"ruleId":"951","severity":1,"message":"952","line":1742,"column":26,"nodeType":"953","messageId":"954","endLine":1742,"endColumn":28},{"ruleId":"939","severity":1,"message":"990","line":1767,"column":16,"nodeType":"912","messageId":"941","endLine":1767,"endColumn":17},{"ruleId":"910","severity":1,"message":"991","line":1768,"column":13,"nodeType":"912","messageId":"913","endLine":1768,"endColumn":17},{"ruleId":"910","severity":1,"message":"1028","line":1808,"column":15,"nodeType":"912","messageId":"913","endLine":1808,"endColumn":18},{"ruleId":"910","severity":1,"message":"1024","line":1810,"column":15,"nodeType":"912","messageId":"913","endLine":1810,"endColumn":31},{"ruleId":"910","severity":1,"message":"1029","line":1833,"column":15,"nodeType":"912","messageId":"913","endLine":1833,"endColumn":21},{"ruleId":"910","severity":1,"message":"1030","line":1835,"column":15,"nodeType":"912","messageId":"913","endLine":1835,"endColumn":31},{"ruleId":"939","severity":1,"message":"940","line":1906,"column":24,"nodeType":"912","messageId":"941","endLine":1906,"endColumn":25},{"ruleId":"910","severity":1,"message":"1021","line":1938,"column":17,"nodeType":"912","messageId":"913","endLine":1938,"endColumn":22},{"ruleId":"951","severity":1,"message":"952","line":2007,"column":18,"nodeType":"953","messageId":"954","endLine":2007,"endColumn":20},{"ruleId":"951","severity":1,"message":"952","line":2008,"column":25,"nodeType":"953","messageId":"954","endLine":2008,"endColumn":27},{"ruleId":"951","severity":1,"message":"952","line":2008,"column":50,"nodeType":"953","messageId":"954","endLine":2008,"endColumn":52},{"ruleId":"951","severity":1,"message":"952","line":2017,"column":15,"nodeType":"953","messageId":"954","endLine":2017,"endColumn":17},{"ruleId":"951","severity":1,"message":"952","line":2023,"column":19,"nodeType":"953","messageId":"954","endLine":2023,"endColumn":21},{"ruleId":"939","severity":1,"message":"977","line":2024,"column":20,"nodeType":"912","messageId":"941","endLine":2024,"endColumn":22},{"ruleId":"969","severity":1,"message":"970","line":2025,"column":54,"nodeType":"953","messageId":"971","endLine":2025,"endColumn":55},{"ruleId":"951","severity":1,"message":"952","line":2043,"column":36,"nodeType":"953","messageId":"954","endLine":2043,"endColumn":38},{"ruleId":"951","severity":1,"message":"952","line":2043,"column":62,"nodeType":"953","messageId":"954","endLine":2043,"endColumn":64},{"ruleId":"951","severity":1,"message":"952","line":2063,"column":41,"nodeType":"953","messageId":"954","endLine":2063,"endColumn":43},{"ruleId":"951","severity":1,"message":"952","line":2063,"column":67,"nodeType":"953","messageId":"954","endLine":2063,"endColumn":69},{"ruleId":"951","severity":1,"message":"952","line":2067,"column":30,"nodeType":"953","messageId":"954","endLine":2067,"endColumn":32},{"ruleId":"951","severity":1,"message":"952","line":2076,"column":16,"nodeType":"953","messageId":"954","endLine":2076,"endColumn":18},{"ruleId":"939","severity":1,"message":"1031","line":2099,"column":13,"nodeType":"912","messageId":"941","endLine":2099,"endColumn":20},{"ruleId":"910","severity":1,"message":"1032","line":2229,"column":9,"nodeType":"912","messageId":"913","endLine":2229,"endColumn":15},{"ruleId":"992","severity":1,"message":"1009","line":2424,"column":37,"nodeType":"958","messageId":"1010","endLine":2424,"endColumn":39},{"ruleId":"910","severity":1,"message":"1033","line":2492,"column":11,"nodeType":"912","messageId":"913","endLine":2492,"endColumn":22},{"ruleId":"910","severity":1,"message":"1019","line":2654,"column":9,"nodeType":"912","messageId":"913","endLine":2654,"endColumn":13},{"ruleId":"910","severity":1,"message":"1034","line":2805,"column":11,"nodeType":"912","messageId":"913","endLine":2805,"endColumn":15},{"ruleId":"910","severity":1,"message":"1034","line":2867,"column":9,"nodeType":"912","messageId":"913","endLine":2867,"endColumn":13},{"ruleId":"910","severity":1,"message":"1034","line":2923,"column":9,"nodeType":"912","messageId":"913","endLine":2923,"endColumn":13},{"ruleId":"910","severity":1,"message":"1034","line":3012,"column":9,"nodeType":"912","messageId":"913","endLine":3012,"endColumn":13},{"ruleId":"910","severity":1,"message":"1035","line":3246,"column":11,"nodeType":"912","messageId":"913","endLine":3246,"endColumn":30},{"ruleId":"910","severity":1,"message":"1034","line":3250,"column":9,"nodeType":"912","messageId":"913","endLine":3250,"endColumn":13},{"ruleId":"910","severity":1,"message":"1036","line":3557,"column":7,"nodeType":"912","messageId":"913","endLine":3557,"endColumn":15},{"ruleId":"910","severity":1,"message":"1038","line":3611,"column":19,"nodeType":"912","messageId":"913","endLine":3611,"endColumn":29},{"ruleId":"1047","severity":1,"message":"1048","line":3661,"column":25,"nodeType":"1049","endLine":3661,"endColumn":47},{"ruleId":"992","severity":1,"message":"993","line":4010,"column":54,"nodeType":"958","messageId":"994","endLine":4010,"endColumn":56},{"ruleId":"992","severity":1,"message":"993","line":4021,"column":50,"nodeType":"958","messageId":"994","endLine":4021,"endColumn":52},{"ruleId":"910","severity":1,"message":"1050","line":3,"column":8,"nodeType":"912","messageId":"913","endLine":3,"endColumn":14},{"ruleId":"910","severity":1,"message":"996","line":4,"column":10,"nodeType":"912","messageId":"913","endLine":4,"endColumn":19},{"ruleId":"910","severity":1,"message":"936","line":17,"column":10,"nodeType":"912","messageId":"913","endLine":17,"endColumn":14},{"ruleId":"910","severity":1,"message":"1051","line":18,"column":10,"nodeType":"912","messageId":"913","endLine":18,"endColumn":13},{"ruleId":"910","severity":1,"message":"1052","line":18,"column":15,"nodeType":"912","messageId":"913","endLine":18,"endColumn":24},{"ruleId":"910","severity":1,"message":"1044","line":28,"column":7,"nodeType":"912","messageId":"913","endLine":28,"endColumn":13},{"ruleId":"910","severity":1,"message":"1053","line":30,"column":7,"nodeType":"912","messageId":"913","endLine":30,"endColumn":11},{"ruleId":"910","severity":1,"message":"1054","line":45,"column":7,"nodeType":"912","messageId":"913","endLine":45,"endColumn":13},{"ruleId":"910","severity":1,"message":"1055","line":73,"column":7,"nodeType":"912","messageId":"913","endLine":73,"endColumn":14},{"ruleId":"910","severity":1,"message":"1056","line":113,"column":15,"nodeType":"912","messageId":"913","endLine":113,"endColumn":23},{"ruleId":"910","severity":1,"message":"1057","line":243,"column":13,"nodeType":"912","messageId":"913","endLine":243,"endColumn":24},{"ruleId":"910","severity":1,"message":"1058","line":245,"column":11,"nodeType":"912","messageId":"913","endLine":245,"endColumn":26},{"ruleId":"1059","severity":1,"message":"1060","line":267,"column":17,"nodeType":"1061","endLine":270,"endColumn":19},{"ruleId":"1047","severity":1,"message":"1048","line":204,"column":25,"nodeType":"1049","endLine":204,"endColumn":47},{"ruleId":"1059","severity":1,"message":"1060","line":23,"column":62,"nodeType":"1061","endLine":23,"endColumn":104},{"ruleId":"1059","severity":1,"message":"1060","line":28,"column":62,"nodeType":"1061","endLine":28,"endColumn":103},{"ruleId":"1059","severity":1,"message":"1060","line":33,"column":62,"nodeType":"1061","endLine":33,"endColumn":105},{"ruleId":"1059","severity":1,"message":"1060","line":49,"column":62,"nodeType":"1061","endLine":49,"endColumn":106},{"ruleId":"1059","severity":1,"message":"1060","line":65,"column":62,"nodeType":"1061","endLine":65,"endColumn":105},{"ruleId":"1059","severity":1,"message":"1060","line":69,"column":62,"nodeType":"1061","endLine":69,"endColumn":99},{"ruleId":"1059","severity":1,"message":"1060","line":73,"column":62,"nodeType":"1061","endLine":73,"endColumn":107},{"ruleId":"1059","severity":1,"message":"1060","line":77,"column":62,"nodeType":"1061","endLine":77,"endColumn":101},{"ruleId":"1059","severity":1,"message":"1060","line":79,"column":62,"nodeType":"1061","endLine":79,"endColumn":107},{"ruleId":"1059","severity":1,"message":"1060","line":116,"column":30,"nodeType":"1061","endLine":116,"endColumn":72},{"ruleId":"1059","severity":1,"message":"1060","line":121,"column":30,"nodeType":"1061","endLine":121,"endColumn":71},{"ruleId":"1059","severity":1,"message":"1060","line":126,"column":30,"nodeType":"1061","endLine":126,"endColumn":73},{"ruleId":"1059","severity":1,"message":"1060","line":142,"column":30,"nodeType":"1061","endLine":142,"endColumn":74},{"ruleId":"1059","severity":1,"message":"1060","line":158,"column":30,"nodeType":"1061","endLine":158,"endColumn":73},{"ruleId":"1059","severity":1,"message":"1060","line":162,"column":30,"nodeType":"1061","endLine":162,"endColumn":67},{"ruleId":"1059","severity":1,"message":"1060","line":166,"column":30,"nodeType":"1061","endLine":166,"endColumn":75},{"ruleId":"1059","severity":1,"message":"1060","line":170,"column":30,"nodeType":"1061","endLine":170,"endColumn":69},{"ruleId":"1059","severity":1,"message":"1060","line":172,"column":30,"nodeType":"1061","endLine":172,"endColumn":75},{"ruleId":"910","severity":1,"message":"1036","line":76,"column":7,"nodeType":"912","messageId":"913","endLine":76,"endColumn":15},{"ruleId":"910","severity":1,"message":"1036","line":120,"column":5,"nodeType":"912","messageId":"913","endLine":120,"endColumn":13},{"ruleId":"951","severity":1,"message":"952","line":109,"column":12,"nodeType":"953","messageId":"954","endLine":109,"endColumn":14},{"ruleId":"951","severity":1,"message":"952","line":116,"column":56,"nodeType":"953","messageId":"954","endLine":116,"endColumn":58},{"ruleId":"951","severity":1,"message":"952","line":116,"column":66,"nodeType":"953","messageId":"954","endLine":116,"endColumn":68},{"ruleId":"951","severity":1,"message":"952","line":122,"column":19,"nodeType":"953","messageId":"954","endLine":122,"endColumn":21},{"ruleId":"939","severity":1,"message":"1062","line":127,"column":9,"nodeType":"912","messageId":"941","endLine":127,"endColumn":14},{"ruleId":"951","severity":1,"message":"952","line":129,"column":56,"nodeType":"953","messageId":"954","endLine":129,"endColumn":58},{"ruleId":"951","severity":1,"message":"952","line":129,"column":66,"nodeType":"953","messageId":"954","endLine":129,"endColumn":68},{"ruleId":"951","severity":1,"message":"952","line":197,"column":14,"nodeType":"953","messageId":"954","endLine":197,"endColumn":16},{"ruleId":"939","severity":1,"message":"1063","line":200,"column":11,"nodeType":"912","messageId":"941","endLine":200,"endColumn":13},{"ruleId":"951","severity":1,"message":"952","line":204,"column":14,"nodeType":"953","messageId":"954","endLine":204,"endColumn":16},{"ruleId":"939","severity":1,"message":"1064","line":207,"column":11,"nodeType":"912","messageId":"941","endLine":207,"endColumn":13},{"ruleId":"951","severity":1,"message":"952","line":213,"column":49,"nodeType":"953","messageId":"954","endLine":213,"endColumn":51},{"ruleId":"939","severity":1,"message":"1065","line":216,"column":15,"nodeType":"912","messageId":"941","endLine":216,"endColumn":19},{"ruleId":"939","severity":1,"message":"1065","line":220,"column":15,"nodeType":"912","messageId":"941","endLine":220,"endColumn":19},{"ruleId":"951","severity":1,"message":"952","line":224,"column":56,"nodeType":"953","messageId":"954","endLine":224,"endColumn":58},{"ruleId":"939","severity":1,"message":"1065","line":227,"column":15,"nodeType":"912","messageId":"941","endLine":227,"endColumn":19},{"ruleId":"939","severity":1,"message":"1065","line":231,"column":15,"nodeType":"912","messageId":"941","endLine":231,"endColumn":19},{"ruleId":"951","severity":1,"message":"952","line":239,"column":49,"nodeType":"953","messageId":"954","endLine":239,"endColumn":51},{"ruleId":"939","severity":1,"message":"1065","line":241,"column":13,"nodeType":"912","messageId":"941","endLine":241,"endColumn":17},{"ruleId":"951","severity":1,"message":"952","line":249,"column":56,"nodeType":"953","messageId":"954","endLine":249,"endColumn":58},{"ruleId":"939","severity":1,"message":"1065","line":251,"column":13,"nodeType":"912","messageId":"941","endLine":251,"endColumn":17},{"ruleId":"951","severity":1,"message":"955","line":267,"column":25,"nodeType":"953","messageId":"954","endLine":267,"endColumn":27},{"ruleId":"951","severity":1,"message":"955","line":268,"column":25,"nodeType":"953","messageId":"954","endLine":268,"endColumn":27},{"ruleId":"951","severity":1,"message":"952","line":272,"column":64,"nodeType":"953","messageId":"954","endLine":272,"endColumn":66},{"ruleId":"939","severity":1,"message":"1066","line":275,"column":15,"nodeType":"912","messageId":"941","endLine":275,"endColumn":16},{"ruleId":"939","severity":1,"message":"1062","line":280,"column":13,"nodeType":"912","messageId":"941","endLine":280,"endColumn":18},{"ruleId":"939","severity":1,"message":"1065","line":291,"column":13,"nodeType":"912","messageId":"941","endLine":291,"endColumn":17},{"ruleId":"939","severity":1,"message":"1067","line":292,"column":13,"nodeType":"912","messageId":"941","endLine":292,"endColumn":16},{"ruleId":"939","severity":1,"message":"1068","line":293,"column":13,"nodeType":"912","messageId":"941","endLine":293,"endColumn":16},{"ruleId":"939","severity":1,"message":"1069","line":294,"column":13,"nodeType":"912","messageId":"941","endLine":294,"endColumn":18},{"ruleId":"951","severity":1,"message":"952","line":324,"column":28,"nodeType":"953","messageId":"954","endLine":324,"endColumn":30},{"ruleId":"951","severity":1,"message":"952","line":324,"column":53,"nodeType":"953","messageId":"954","endLine":324,"endColumn":55},{"ruleId":"951","severity":1,"message":"952","line":327,"column":28,"nodeType":"953","messageId":"954","endLine":327,"endColumn":30},{"ruleId":"951","severity":1,"message":"955","line":327,"column":53,"nodeType":"953","messageId":"954","endLine":327,"endColumn":55},{"ruleId":"951","severity":1,"message":"955","line":330,"column":28,"nodeType":"953","messageId":"954","endLine":330,"endColumn":30},{"ruleId":"951","severity":1,"message":"952","line":330,"column":53,"nodeType":"953","messageId":"954","endLine":330,"endColumn":55},{"ruleId":"992","severity":1,"message":"1009","line":399,"column":35,"nodeType":"958","messageId":"1010","endLine":399,"endColumn":37},{"ruleId":"910","severity":1,"message":"1033","line":464,"column":9,"nodeType":"912","messageId":"913","endLine":464,"endColumn":20},{"ruleId":"910","severity":1,"message":"1070","line":495,"column":9,"nodeType":"912","messageId":"913","endLine":495,"endColumn":17},{"ruleId":"910","severity":1,"message":"1032","line":653,"column":7,"nodeType":"912","messageId":"913","endLine":653,"endColumn":13},{"ruleId":"951","severity":1,"message":"952","line":666,"column":14,"nodeType":"953","messageId":"954","endLine":666,"endColumn":16},{"ruleId":"910","severity":1,"message":"1071","line":763,"column":9,"nodeType":"912","messageId":"913","endLine":763,"endColumn":11},{"ruleId":"910","severity":1,"message":"1072","line":764,"column":9,"nodeType":"912","messageId":"913","endLine":764,"endColumn":11},{"ruleId":"910","severity":1,"message":"936","line":5,"column":10,"nodeType":"912","messageId":"913","endLine":5,"endColumn":14},{"ruleId":"910","severity":1,"message":"1073","line":162,"column":23,"nodeType":"912","messageId":"913","endLine":162,"endColumn":27},{"ruleId":"910","severity":1,"message":"1074","line":163,"column":23,"nodeType":"912","messageId":"913","endLine":163,"endColumn":28},{"ruleId":"910","severity":1,"message":"1075","line":164,"column":23,"nodeType":"912","messageId":"913","endLine":164,"endColumn":35},{"ruleId":"910","severity":1,"message":"1076","line":165,"column":23,"nodeType":"912","messageId":"913","endLine":165,"endColumn":32},{"ruleId":"910","severity":1,"message":"1077","line":4,"column":8,"nodeType":"912","messageId":"913","endLine":4,"endColumn":23},{"ruleId":"910","severity":1,"message":"924","line":305,"column":9,"nodeType":"912","messageId":"913","endLine":305,"endColumn":18},{"ruleId":"910","severity":1,"message":"1073","line":306,"column":9,"nodeType":"912","messageId":"913","endLine":306,"endColumn":13},{"ruleId":"910","severity":1,"message":"1078","line":307,"column":9,"nodeType":"912","messageId":"913","endLine":307,"endColumn":14},{"ruleId":"910","severity":1,"message":"1079","line":308,"column":9,"nodeType":"912","messageId":"913","endLine":308,"endColumn":21},{"ruleId":"910","severity":1,"message":"1080","line":310,"column":9,"nodeType":"912","messageId":"913","endLine":310,"endColumn":17},{"ruleId":"910","severity":1,"message":"925","line":311,"column":9,"nodeType":"912","messageId":"913","endLine":311,"endColumn":17},{"ruleId":"910","severity":1,"message":"926","line":315,"column":9,"nodeType":"912","messageId":"913","endLine":315,"endColumn":21},{"ruleId":"910","severity":1,"message":"924","line":538,"column":9,"nodeType":"912","messageId":"913","endLine":538,"endColumn":18},{"ruleId":"910","severity":1,"message":"1073","line":539,"column":9,"nodeType":"912","messageId":"913","endLine":539,"endColumn":13},{"ruleId":"910","severity":1,"message":"1078","line":540,"column":9,"nodeType":"912","messageId":"913","endLine":540,"endColumn":14},{"ruleId":"910","severity":1,"message":"1079","line":541,"column":9,"nodeType":"912","messageId":"913","endLine":541,"endColumn":21},{"ruleId":"910","severity":1,"message":"1080","line":543,"column":9,"nodeType":"912","messageId":"913","endLine":543,"endColumn":17},{"ruleId":"910","severity":1,"message":"925","line":544,"column":9,"nodeType":"912","messageId":"913","endLine":544,"endColumn":17},{"ruleId":"910","severity":1,"message":"1081","line":545,"column":9,"nodeType":"912","messageId":"913","endLine":545,"endColumn":15},{"ruleId":"910","severity":1,"message":"1082","line":546,"column":9,"nodeType":"912","messageId":"913","endLine":546,"endColumn":16},{"ruleId":"910","severity":1,"message":"1083","line":547,"column":9,"nodeType":"912","messageId":"913","endLine":547,"endColumn":15},{"ruleId":"910","severity":1,"message":"926","line":548,"column":9,"nodeType":"912","messageId":"913","endLine":548,"endColumn":21},{"ruleId":"910","severity":1,"message":"924","line":821,"column":9,"nodeType":"912","messageId":"913","endLine":821,"endColumn":18},{"ruleId":"910","severity":1,"message":"1073","line":822,"column":9,"nodeType":"912","messageId":"913","endLine":822,"endColumn":13},{"ruleId":"910","severity":1,"message":"1078","line":823,"column":9,"nodeType":"912","messageId":"913","endLine":823,"endColumn":14},{"ruleId":"910","severity":1,"message":"1079","line":824,"column":9,"nodeType":"912","messageId":"913","endLine":824,"endColumn":21},{"ruleId":"910","severity":1,"message":"1084","line":825,"column":9,"nodeType":"912","messageId":"913","endLine":825,"endColumn":17},{"ruleId":"910","severity":1,"message":"1080","line":826,"column":9,"nodeType":"912","messageId":"913","endLine":826,"endColumn":17},{"ruleId":"910","severity":1,"message":"925","line":827,"column":9,"nodeType":"912","messageId":"913","endLine":827,"endColumn":17},{"ruleId":"910","severity":1,"message":"1081","line":828,"column":9,"nodeType":"912","messageId":"913","endLine":828,"endColumn":15},{"ruleId":"910","severity":1,"message":"1082","line":829,"column":9,"nodeType":"912","messageId":"913","endLine":829,"endColumn":16},{"ruleId":"910","severity":1,"message":"1083","line":830,"column":9,"nodeType":"912","messageId":"913","endLine":830,"endColumn":15},{"ruleId":"910","severity":1,"message":"926","line":831,"column":9,"nodeType":"912","messageId":"913","endLine":831,"endColumn":21},{"ruleId":"910","severity":1,"message":"1085","line":832,"column":9,"nodeType":"912","messageId":"913","endLine":832,"endColumn":22},{"ruleId":"910","severity":1,"message":"996","line":22,"column":10,"nodeType":"912","messageId":"913","endLine":22,"endColumn":19},{"ruleId":"910","severity":1,"message":"1041","line":32,"column":8,"nodeType":"912","messageId":"913","endLine":32,"endColumn":12},{"ruleId":"910","severity":1,"message":"1044","line":34,"column":7,"nodeType":"912","messageId":"913","endLine":34,"endColumn":13},{"ruleId":"992","severity":1,"message":"993","line":335,"column":21,"nodeType":"958","messageId":"994","endLine":335,"endColumn":23},{"ruleId":"910","severity":1,"message":"1007","line":409,"column":9,"nodeType":"912","messageId":"913","endLine":409,"endColumn":13},{"ruleId":"910","severity":1,"message":"1008","line":449,"column":9,"nodeType":"912","messageId":"913","endLine":449,"endColumn":16},{"ruleId":"992","severity":1,"message":"1009","line":449,"column":49,"nodeType":"958","messageId":"1010","endLine":449,"endColumn":51},{"ruleId":"910","severity":1,"message":"1011","line":450,"column":11,"nodeType":"912","messageId":"913","endLine":450,"endColumn":12},{"ruleId":"992","severity":1,"message":"993","line":450,"column":30,"nodeType":"958","messageId":"994","endLine":450,"endColumn":32},{"ruleId":"910","severity":1,"message":"1012","line":456,"column":9,"nodeType":"912","messageId":"913","endLine":456,"endColumn":18},{"ruleId":"939","severity":1,"message":"961","line":613,"column":15,"nodeType":"912","messageId":"941","endLine":613,"endColumn":18},{"ruleId":"951","severity":1,"message":"952","line":618,"column":42,"nodeType":"953","messageId":"954","endLine":618,"endColumn":44},{"ruleId":"939","severity":1,"message":"962","line":619,"column":17,"nodeType":"912","messageId":"941","endLine":619,"endColumn":18},{"ruleId":"939","severity":1,"message":"961","line":624,"column":21,"nodeType":"912","messageId":"941","endLine":624,"endColumn":24},{"ruleId":"939","severity":1,"message":"940","line":654,"column":18,"nodeType":"912","messageId":"941","endLine":654,"endColumn":19},{"ruleId":"939","severity":1,"message":"1013","line":734,"column":11,"nodeType":"912","messageId":"941","endLine":734,"endColumn":14},{"ruleId":"939","severity":1,"message":"1014","line":735,"column":11,"nodeType":"912","messageId":"941","endLine":735,"endColumn":19},{"ruleId":"939","severity":1,"message":"1015","line":736,"column":11,"nodeType":"912","messageId":"941","endLine":736,"endColumn":20},{"ruleId":"910","severity":1,"message":"1016","line":755,"column":11,"nodeType":"912","messageId":"913","endLine":755,"endColumn":14},{"ruleId":"910","severity":1,"message":"1017","line":756,"column":11,"nodeType":"912","messageId":"913","endLine":756,"endColumn":12},{"ruleId":"910","severity":1,"message":"1018","line":757,"column":11,"nodeType":"912","messageId":"913","endLine":757,"endColumn":12},{"ruleId":"910","severity":1,"message":"1019","line":758,"column":11,"nodeType":"912","messageId":"913","endLine":758,"endColumn":15},{"ruleId":"939","severity":1,"message":"1020","line":774,"column":13,"nodeType":"912","messageId":"941","endLine":774,"endColumn":23},{"ruleId":"910","severity":1,"message":"1021","line":782,"column":13,"nodeType":"912","messageId":"913","endLine":782,"endColumn":18},{"ruleId":"939","severity":1,"message":"1013","line":786,"column":11,"nodeType":"912","messageId":"941","endLine":786,"endColumn":14},{"ruleId":"939","severity":1,"message":"1014","line":787,"column":11,"nodeType":"912","messageId":"941","endLine":787,"endColumn":19},{"ruleId":"939","severity":1,"message":"1015","line":788,"column":11,"nodeType":"912","messageId":"941","endLine":788,"endColumn":20},{"ruleId":"910","severity":1,"message":"965","line":841,"column":15,"nodeType":"912","messageId":"913","endLine":841,"endColumn":24},{"ruleId":"939","severity":1,"message":"1020","line":842,"column":13,"nodeType":"912","messageId":"941","endLine":842,"endColumn":23},{"ruleId":"939","severity":1,"message":"1020","line":849,"column":13,"nodeType":"912","messageId":"941","endLine":849,"endColumn":23},{"ruleId":"951","severity":1,"message":"952","line":882,"column":26,"nodeType":"953","messageId":"954","endLine":882,"endColumn":28},{"ruleId":"939","severity":1,"message":"990","line":901,"column":16,"nodeType":"912","messageId":"941","endLine":901,"endColumn":17},{"ruleId":"939","severity":1,"message":"1022","line":902,"column":13,"nodeType":"912","messageId":"941","endLine":902,"endColumn":17},{"ruleId":"910","severity":1,"message":"1023","line":902,"column":13,"nodeType":"912","messageId":"913","endLine":902,"endColumn":17},{"ruleId":"910","severity":1,"message":"1024","line":907,"column":13,"nodeType":"912","messageId":"913","endLine":907,"endColumn":29},{"ruleId":"910","severity":1,"message":"1025","line":925,"column":7,"nodeType":"912","messageId":"913","endLine":925,"endColumn":19},{"ruleId":"910","severity":1,"message":"1026","line":1006,"column":18,"nodeType":"912","messageId":"913","endLine":1006,"endColumn":23},{"ruleId":"910","severity":1,"message":"1021","line":1022,"column":15,"nodeType":"912","messageId":"913","endLine":1022,"endColumn":20},{"ruleId":"910","severity":1,"message":"985","line":1052,"column":11,"nodeType":"912","messageId":"913","endLine":1052,"endColumn":17},{"ruleId":"910","severity":1,"message":"981","line":1052,"column":29,"nodeType":"912","messageId":"913","endLine":1052,"endColumn":37},{"ruleId":"910","severity":1,"message":"984","line":1052,"column":39,"nodeType":"912","messageId":"913","endLine":1052,"endColumn":45},{"ruleId":"910","severity":1,"message":"985","line":1071,"column":11,"nodeType":"912","messageId":"913","endLine":1071,"endColumn":17},{"ruleId":"910","severity":1,"message":"984","line":1071,"column":39,"nodeType":"912","messageId":"913","endLine":1071,"endColumn":45},{"ruleId":"969","severity":1,"message":"970","line":1191,"column":59,"nodeType":"953","messageId":"971","endLine":1191,"endColumn":60},{"ruleId":"969","severity":1,"message":"970","line":1193,"column":59,"nodeType":"953","messageId":"971","endLine":1193,"endColumn":60},{"ruleId":"951","severity":1,"message":"952","line":1201,"column":37,"nodeType":"953","messageId":"954","endLine":1201,"endColumn":39},{"ruleId":"939","severity":1,"message":"990","line":1226,"column":16,"nodeType":"912","messageId":"941","endLine":1226,"endColumn":17},{"ruleId":"951","severity":1,"message":"952","line":1229,"column":44,"nodeType":"953","messageId":"954","endLine":1229,"endColumn":46},{"ruleId":"939","severity":1,"message":"1027","line":1231,"column":15,"nodeType":"912","messageId":"941","endLine":1231,"endColumn":20},{"ruleId":"939","severity":1,"message":"986","line":1232,"column":15,"nodeType":"912","messageId":"941","endLine":1232,"endColumn":19},{"ruleId":"951","severity":1,"message":"952","line":1296,"column":22,"nodeType":"953","messageId":"954","endLine":1296,"endColumn":24},{"ruleId":"951","severity":1,"message":"952","line":1298,"column":29,"nodeType":"953","messageId":"954","endLine":1298,"endColumn":31},{"ruleId":"951","severity":1,"message":"952","line":1299,"column":17,"nodeType":"953","messageId":"954","endLine":1299,"endColumn":19},{"ruleId":"951","severity":1,"message":"952","line":1303,"column":28,"nodeType":"953","messageId":"954","endLine":1303,"endColumn":30},{"ruleId":"951","severity":1,"message":"952","line":1312,"column":29,"nodeType":"953","messageId":"954","endLine":1312,"endColumn":31},{"ruleId":"951","severity":1,"message":"952","line":1316,"column":26,"nodeType":"953","messageId":"954","endLine":1316,"endColumn":28},{"ruleId":"939","severity":1,"message":"990","line":1341,"column":16,"nodeType":"912","messageId":"941","endLine":1341,"endColumn":17},{"ruleId":"910","severity":1,"message":"991","line":1342,"column":13,"nodeType":"912","messageId":"913","endLine":1342,"endColumn":17},{"ruleId":"910","severity":1,"message":"1028","line":1381,"column":15,"nodeType":"912","messageId":"913","endLine":1381,"endColumn":18},{"ruleId":"910","severity":1,"message":"1024","line":1383,"column":15,"nodeType":"912","messageId":"913","endLine":1383,"endColumn":31},{"ruleId":"910","severity":1,"message":"1029","line":1406,"column":15,"nodeType":"912","messageId":"913","endLine":1406,"endColumn":21},{"ruleId":"910","severity":1,"message":"1030","line":1408,"column":15,"nodeType":"912","messageId":"913","endLine":1408,"endColumn":31},{"ruleId":"939","severity":1,"message":"940","line":1478,"column":24,"nodeType":"912","messageId":"941","endLine":1478,"endColumn":25},{"ruleId":"910","severity":1,"message":"1021","line":1510,"column":17,"nodeType":"912","messageId":"913","endLine":1510,"endColumn":22},{"ruleId":"951","severity":1,"message":"952","line":1577,"column":18,"nodeType":"953","messageId":"954","endLine":1577,"endColumn":20},{"ruleId":"951","severity":1,"message":"952","line":1578,"column":25,"nodeType":"953","messageId":"954","endLine":1578,"endColumn":27},{"ruleId":"951","severity":1,"message":"952","line":1578,"column":50,"nodeType":"953","messageId":"954","endLine":1578,"endColumn":52},{"ruleId":"951","severity":1,"message":"952","line":1587,"column":15,"nodeType":"953","messageId":"954","endLine":1587,"endColumn":17},{"ruleId":"951","severity":1,"message":"952","line":1593,"column":19,"nodeType":"953","messageId":"954","endLine":1593,"endColumn":21},{"ruleId":"939","severity":1,"message":"977","line":1594,"column":20,"nodeType":"912","messageId":"941","endLine":1594,"endColumn":22},{"ruleId":"969","severity":1,"message":"970","line":1595,"column":54,"nodeType":"953","messageId":"971","endLine":1595,"endColumn":55},{"ruleId":"951","severity":1,"message":"952","line":1613,"column":36,"nodeType":"953","messageId":"954","endLine":1613,"endColumn":38},{"ruleId":"951","severity":1,"message":"952","line":1613,"column":62,"nodeType":"953","messageId":"954","endLine":1613,"endColumn":64},{"ruleId":"951","severity":1,"message":"952","line":1633,"column":41,"nodeType":"953","messageId":"954","endLine":1633,"endColumn":43},{"ruleId":"951","severity":1,"message":"952","line":1633,"column":67,"nodeType":"953","messageId":"954","endLine":1633,"endColumn":69},{"ruleId":"951","severity":1,"message":"952","line":1637,"column":30,"nodeType":"953","messageId":"954","endLine":1637,"endColumn":32},{"ruleId":"951","severity":1,"message":"952","line":1646,"column":16,"nodeType":"953","messageId":"954","endLine":1646,"endColumn":18},{"ruleId":"910","severity":1,"message":"1021","line":1647,"column":13,"nodeType":"912","messageId":"913","endLine":1647,"endColumn":18},{"ruleId":"939","severity":1,"message":"1031","line":1666,"column":13,"nodeType":"912","messageId":"941","endLine":1666,"endColumn":20},{"ruleId":"951","severity":1,"message":"952","line":1715,"column":21,"nodeType":"953","messageId":"954","endLine":1715,"endColumn":23},{"ruleId":"910","severity":1,"message":"1032","line":1825,"column":9,"nodeType":"912","messageId":"913","endLine":1825,"endColumn":15},{"ruleId":"992","severity":1,"message":"1009","line":2022,"column":37,"nodeType":"958","messageId":"1010","endLine":2022,"endColumn":39},{"ruleId":"910","severity":1,"message":"1033","line":2090,"column":11,"nodeType":"912","messageId":"913","endLine":2090,"endColumn":22},{"ruleId":"910","severity":1,"message":"1019","line":2237,"column":9,"nodeType":"912","messageId":"913","endLine":2237,"endColumn":13},{"ruleId":"910","severity":1,"message":"1034","line":2384,"column":11,"nodeType":"912","messageId":"913","endLine":2384,"endColumn":15},{"ruleId":"910","severity":1,"message":"1034","line":2446,"column":9,"nodeType":"912","messageId":"913","endLine":2446,"endColumn":13},{"ruleId":"910","severity":1,"message":"1034","line":2502,"column":9,"nodeType":"912","messageId":"913","endLine":2502,"endColumn":13},{"ruleId":"910","severity":1,"message":"1034","line":2591,"column":9,"nodeType":"912","messageId":"913","endLine":2591,"endColumn":13},{"ruleId":"910","severity":1,"message":"1035","line":2825,"column":11,"nodeType":"912","messageId":"913","endLine":2825,"endColumn":30},{"ruleId":"910","severity":1,"message":"1034","line":2829,"column":9,"nodeType":"912","messageId":"913","endLine":2829,"endColumn":13},{"ruleId":"910","severity":1,"message":"1036","line":3077,"column":7,"nodeType":"912","messageId":"913","endLine":3077,"endColumn":15},{"ruleId":"910","severity":1,"message":"1038","line":3131,"column":19,"nodeType":"912","messageId":"913","endLine":3131,"endColumn":29},{"ruleId":"992","severity":1,"message":"993","line":3506,"column":54,"nodeType":"958","messageId":"994","endLine":3506,"endColumn":56},{"ruleId":"992","severity":1,"message":"993","line":3517,"column":50,"nodeType":"958","messageId":"994","endLine":3517,"endColumn":52},{"ruleId":"1059","severity":1,"message":"1060","line":12,"column":22,"nodeType":"1061","endLine":15,"endColumn":24},{"ruleId":"1059","severity":1,"message":"1060","line":24,"column":22,"nodeType":"1061","endLine":27,"endColumn":24},{"ruleId":"910","severity":1,"message":"1086","line":246,"column":9,"nodeType":"912","messageId":"913","endLine":246,"endColumn":15},{"ruleId":"910","severity":1,"message":"1087","line":247,"column":9,"nodeType":"912","messageId":"913","endLine":247,"endColumn":15},{"ruleId":"910","severity":1,"message":"1088","line":248,"column":9,"nodeType":"912","messageId":"913","endLine":248,"endColumn":15},{"ruleId":"910","severity":1,"message":"1089","line":249,"column":9,"nodeType":"912","messageId":"913","endLine":249,"endColumn":15},"no-native-reassign",["1090"],"no-negated-in-lhs",["1091"],"no-unused-vars","'GlobalView' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'useState' is defined but never used.","'useEffect' is defined but never used.","'useDispatch' is defined but never used.","'useSelector' is defined but never used.","'verify' is defined but never used.","'Radium' is defined but never used.","'StyleRoot' is defined but never used.","'otpStatus' is assigned a value but never used.","'errorMsg' is assigned a value but never used.","'verifyStatus' is assigned a value but never used.","'container' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.history'. Either include it or remove the dependency array.","ArrayExpression",["1092"],"'Component' is defined but never used.",["1093"],"'userRegister' is defined but never used.","'sendOtp' is defined but never used.","'Link' is defined but never used.","'config' is defined but never used.","'conc' is assigned a value but never used.","no-redeclare","'j' is already defined.","redeclared","'conc2' is assigned a value but never used.","'source' is assigned a value but never used.","'destination' is assigned a value but never used.","'myStyle' is assigned a value but never used.","'dstData' is assigned a value but never used.","'lists' is assigned a value but never used.","'high_lon' is already defined.","'local_coords' is already defined.","'selectedVenue' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'nth_lift'.","ArrowFunctionExpression","unsafeRefs","'temp' is already defined.","'val' is already defined.","'v' is already defined.","'srcName' is assigned a value but never used.","'dstName' is assigned a value but never used.","'dstfloorL' is assigned a value but never used.","'dstfloorB' is assigned a value but never used.","'closed' is assigned a value but never used.","'row2' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","Unexpected mix of '||' and '&&'.","'ch' is already defined.","'selectedBuilding' is assigned a value but never used.","'myBounds' is assigned a value but never used.","'srcfloor' is assigned a value but never used.","'dstfloor' is assigned a value but never used.","'building' is assigned a value but never used.","'flrDataPoly' is assigned a value but never used.","'dstVal' is assigned a value but never used.","'srcVal' is assigned a value but never used.","'vert' is already defined.","'flag' is assigned a value but never used.","'dum' is already defined.","'p' is already defined.","'i' is already defined.","'ind1' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'render' is defined but never used.","'Typeahead' is defined but never used.","'Instructions' is defined but never used.","'NavigationDetails' is defined but never used.","'GlobalDetails' is defined but never used.","'InstructionTab' is defined but never used.","'Rect' is defined but never used.","'Text' is defined but never used.","'topPos' is assigned a value but never used.","'lat' is assigned a value but never used.","'lng' is assigned a value but never used.","'me' is assigned a value but never used.","'list' is assigned a value but never used.","'listArr' is assigned a value but never used.","Array.prototype.map() expects a return value from arrow function.","expectedInside","'k' is assigned a value but never used.","'sortedArr' is assigned a value but never used.","'wrh' is already defined.","'newWidth' is already defined.","'newHeight' is already defined.","'rot' is assigned a value but never used.","'x' is assigned a value but never used.","'y' is assigned a value but never used.","'step' is assigned a value but never used.","'half_scale' is already defined.","'scale' is assigned a value but never used.","'elem' is already defined.","'elem' is assigned a value but never used.","'height_of_canvas' is assigned a value but never used.","'pointerangle' is defined but never used.","'timer' is defined but never used.","'coord' is already defined.","'ind' is assigned a value but never used.","'active' is assigned a value but never used.","'initialTransform' is assigned a value but never used.","'context' is already defined.","'Vector' is assigned a value but never used.","'coordinates' is defined but never used.","'resp' is assigned a value but never used.","'srcBuildingLocation' is assigned a value but never used.","'distance' is assigned a value but never used.","'combineInstructions' is assigned a value but never used.","'currentPos' is assigned a value but never used.","'SourceMenu' is defined but never used.","'DestinationMenu' is defined but never used.","'Menu' is defined but never used.","'Modal' is defined but never used.","'customStyles' is assigned a value but never used.","'center' is assigned a value but never used.","'distList' is assigned a value but never used.","'data' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'Drawer' is defined but never used.","'Map' is defined but never used.","'TileLayer' is defined but never used.","'Card' is assigned a value but never used.","'Toggle' is assigned a value but never used.","'Sidebar' is assigned a value but never used.","'geocoder' is assigned a value but never used.","'sidebarLeft' is assigned a value but never used.","'routeComponents' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'theta' is already defined.","'p2' is already defined.","'p3' is already defined.","'dist' is already defined.","'z' is already defined.","'ver' is already defined.","'hor' is already defined.","'trans' is already defined.","'lastStep' is assigned a value but never used.","'l2' is assigned a value but never used.","'l3' is assigned a value but never used.","'name' is assigned a value but never used.","'floor' is assigned a value but never used.","'buildingName' is assigned a value but never used.","'venueName' is assigned a value but never used.","'userInformation' is defined but never used.","'email' is assigned a value but never used.","'mobileNumber' is assigned a value but never used.","'otpValue' is assigned a value but never used.","'lenErr' is assigned a value but never used.","'capsErr' is assigned a value but never used.","'numErr' is assigned a value but never used.","'password' is assigned a value but never used.","'emailOtpValue' is assigned a value but never used.","'srcLat' is assigned a value but never used.","'srcLng' is assigned a value but never used.","'dstLat' is assigned a value but never used.","'dstLng' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"1094","fix":"1095"},{"desc":"1096","fix":"1097"},"Update the dependencies array to be: [dispatch, getDetails, props.history, resetResponse]",{"range":"1098","text":"1099"},"Update the dependencies array to be: [forgotPassResponse, props.history]",{"range":"1100","text":"1101"},[1563,1598],"[dispatch, getDetails, props.history, resetResponse]",[1624,1644],"[forgotPassResponse, props.history]"]